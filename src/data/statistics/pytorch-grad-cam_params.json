{
    "pytorch_grad_cam/feature_factorization/deep_feature_factorization.py": {
        "sklearn": {
            "NMF_25": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "type": "Variable",
                    "possible_values": []
                },
                "init": {
                    "value": "random",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_70": {
                "variable": {
                    "value": "concept_tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.float32(concepts).transpose((1, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cam.py": {
        "torch": {
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_grad_cam/ablation_cam.py": {
        "torch": {
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_grad_cam/ablation_cam_multilayer.py": {
        "torch": {
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_36": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.layer(x)",
                            "Call"
                        ],
                        [
                            "output.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "output.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_40": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.layer(x)",
                            "Call"
                        ],
                        [
                            "output.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "output.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_grad_cam/ablation_layer.py": {
        "torch": {
            "min_78": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.activations",
                            "Attribute"
                        ],
                        [
                            "self.activations",
                            "Attribute"
                        ],
                        [
                            "output.transpose(1, len(output.shape) - 1)",
                            "Call"
                        ],
                        [
                            "output.transpose(len(output.shape) - 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_102": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.activations",
                            "Attribute"
                        ],
                        [
                            "self.activations",
                            "Attribute"
                        ],
                        [
                            "output.transpose(1, len(output.shape) - 1)",
                            "Call"
                        ],
                        [
                            "output.transpose(len(output.shape) - 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_82": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.activations",
                            "Attribute"
                        ],
                        [
                            "self.activations",
                            "Attribute"
                        ],
                        [
                            "output.transpose(1, len(output.shape) - 1)",
                            "Call"
                        ],
                        [
                            "output.transpose(len(output.shape) - 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_106": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.activations",
                            "Attribute"
                        ],
                        [
                            "self.activations",
                            "Attribute"
                        ],
                        [
                            "output.transpose(1, len(output.shape) - 1)",
                            "Call"
                        ],
                        [
                            "output.transpose(len(output.shape) - 1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_grad_cam/base_cam.py": {
        "torch": {
            "from_numpy_166": {
                "variable": {
                    "value": "cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_2d_projection(weighted_activations)",
                            "Call"
                        ],
                        [
                            "weighted_activations.sum(axis=1)",
                            "Call"
                        ],
                        [
                            "self.get_cam_image(input_tensor, target_layer, targets, layer_activations, layer_grads, eigen_smooth)",
                            "Call"
                        ],
                        [
                            "np.maximum(cam, 0)",
                            "Call"
                        ],
                        [
                            "self.forward(augmented_tensor, targets, eigen_smooth)",
                            "Call"
                        ],
                        [
                            "cam[:, None, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(cam)",
                            "Call"
                        ],
                        [
                            "transform.deaugment_mask(cam)",
                            "Call"
                        ],
                        [
                            "cam.numpy()",
                            "Call"
                        ],
                        [
                            "cam[:, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "np.mean(np.float32(cams), axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_grad_cam/fullgrad_cam.py": {
        "torch": {
            "sqrt_41": {
                "input": {
                    "value": "layer.running_var + layer.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_grad_cam/guided_backprop.py": {
        "torch": {
            "addcmul_11": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros(input_img.size()).type_as(input_img)",
                    "type": "Call",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "input_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_img.cuda()",
                            "Call"
                        ],
                        [
                            "input_img.requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "tensor2": {
                    "value": "positive_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(input_img > 0).type_as(input_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "addcmul_26": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros(input_img.size()).type_as(input_img)",
                    "type": "Call",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "torch.addcmul(torch.zeros(input_img.size()).type_as(input_img), grad_output, positive_mask_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "positive_mask_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(grad_output > 0).type_as(grad_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_12": {
                "*size": {
                    "value": "input_img.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "*size": {
                    "value": "input_img.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addcmul_29": {
                "input": {
                    "value": "torch.zeros(input_img.size()).type_as(input_img)",
                    "type": "Call",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "positive_mask_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(input_img > 0).type_as(grad_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "input_img.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "module_top._modules[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_grad_cam/metrics/cam_mult_image.py": {
        "torch": {}
    },
    "pytorch_grad_cam/metrics/perturbation_confidence.py": {
        "torch": {
            "cat_35": {
                "variable": {
                    "value": "perturbated_tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "perturbated_tensors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(perturbated_tensors)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "binary_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "binary_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32(mask < threshold)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(binary_mask)",
                            "Call"
                        ],
                        [
                            "binary_mask.to(mask.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "ndarray": {
                    "value": "cam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cams[i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_grad_cam/metrics/road.py": {
        "torch": {
            "tensor_133": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "spsolve(csc_matrix(A), b)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_138": {
                "input": {
                    "value": "res.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_grad_cam/score_cam.py": {
        "torch": {
            "UpsamplingBilinear2d_30": {
                "variable": {
                    "value": "upsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "input_tensor.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "activation_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "activations",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_61": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_63": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_grad_cam/utils/image.py": {
        "torch": {}
    },
    "pytorch_grad_cam/utils/model_targets.py": {
        "torch": {
            "from_numpy_61": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_86": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_43": {
                "input": {
                    "value": "model_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_94": {
                "variable": {
                    "value": "box",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_23": {
                "input": {
                    "value": "model_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_22": {
                "input": {
                    "value": "model_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_grad_cam/utils/reshape_transforms.py": {
        "torch": {
            "cat_13": {
                "variable": {
                    "value": "activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(activations, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_9": {
                "input": {
                    "value": "torch.abs(value)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "target_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x['pool'].size()[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_10": {
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_context_release.py": {
        "torch": {
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_run_all_models.py": {
        "torch": {}
    },
    "usage_examples/swinT_example.py": {
        "torch": {
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "usage_examples/vit_example.py": {
        "torch": {
            "load_85": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "facebookresearch/deit:main",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "deit_tiny_patch16_224",
                    "type": "str",
                    "possible_values": []
                },
                "pretrained": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}