{
    "driver.py": {
        "torch": {
            "DataLoader_50": {
                "variable": {
                    "value": "train_dl",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loaddata.ImageLoader(FIXED_TRAIN_DIR, train_ids, mode='train', transform=transforms.train_augment)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "valid_dl",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loaddata.ImageLoader(FIXED_TRAIN_DIR, valid_ids, mode='valid', transform=transforms.train_augment)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "test_dl",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loaddata.ImageLoader(TEST_DIR, test_ids, mode='test', transform=transforms.test_augment)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "dummy_dl",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dummy_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loaddata.ImageLoader(DUMMY, dummy_ids, mode='train', transform=transforms.train_augment)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSprop_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/classifier.py": {
        "torch": {
            "Sequential_33": {
                "variable": {
                    "value": "self.down1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(in_channels, 16, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.down2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(32, 64, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.down3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(128, 256, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.down4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(512, 512, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.same",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(512, 512, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.up4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(1024, 512, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.up3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(1024, 512, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.up2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(256, 128, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(64, 64, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.up0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(32, 32, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_88": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "down1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.down1(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_91": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "down2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.down2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_94": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "down3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.down3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_97": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "down4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.down4(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_101": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.max_pool2d(down1, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down2, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down3, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down4, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.same(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down4, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up4(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down3, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up3(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down2, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up2(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down1, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up1(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.up0(out)",
                            "Call"
                        ],
                        [
                            "self.classify(out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[down4, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_105": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.max_pool2d(down1, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down2, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down3, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down4, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.same(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down4, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up4(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down3, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up3(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down2, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up2(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down1, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up1(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.up0(out)",
                            "Call"
                        ],
                        [
                            "self.classify(out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[down3, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_109": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.max_pool2d(down1, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down2, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down3, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down4, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.same(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down4, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up4(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down3, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up3(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down2, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up2(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down1, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up1(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.up0(out)",
                            "Call"
                        ],
                        [
                            "self.classify(out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[down2, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_113": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.max_pool2d(down1, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down2, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down3, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down4, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.same(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down4, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up4(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down3, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up3(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down2, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up2(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down1, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up1(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.up0(out)",
                            "Call"
                        ],
                        [
                            "self.classify(out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[down1, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_117": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.max_pool2d(down1, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down2, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down3, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down4, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.same(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down4, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up4(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down3, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up3(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down2, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up2(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down1, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up1(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.up0(out)",
                            "Call"
                        ],
                        [
                            "self.classify(out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_148": {
                "variable": {
                    "value": "self.use_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_255": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': self.epoch_counter, 'state_dict': self.net.state_dict(), 'optimizer': self.optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/model'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_266": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/model'",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_268": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/model'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_285": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.net(inputs)",
                            "Call"
                        ],
                        [
                            "self.net(inputs)",
                            "Call"
                        ],
                        [
                            "self.net(images)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_302": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'checkpoint/chpt.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_305": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'checkpoint/chpt.tar'",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_294": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': self.epoch_counter, 'state_dict': self.net.state_dict(), 'optimizer': self.optimizer.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'checkpoint/chpt.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/loaddata.py": {
        "torch": {
            "DataLoader_75": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageLoader(image_paths, image_ids, mode='train', transform=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss.py": {
        "torch": {
            "BCELoss_19": {
                "variable": {
                    "value": "self.bce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_22": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sigmoid_34": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_46": {
                "variable": {
                    "value": "self.multiclassLoss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_73": {
                "input": {
                    "value": "input_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out2.view(bs * h * w, c)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "idx.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_14": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/metric.py": {
        "torch": {
            "sigmoid_15": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "src/transforms.py": {
        "torch": {}
    },
    "src/unet256_3x3.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "self.down1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(in_channels, 16, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.down2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(32, 64, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.down3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(128, 256, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.down4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(512, 512, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.same",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(512, 512, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.up4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(1024, 512, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.up3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(1024, 512, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.up2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(256, 128, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(64, 64, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.up0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_conv_layer_bn_relu(32, 32, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.classify",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_85": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "down1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.down1(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_88": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "down2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.down2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_91": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "down3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.down3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_94": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "down4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.down4(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_98": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.max_pool2d(down1, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down2, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down3, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down4, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.same(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down4, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up4(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down3, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up3(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down2, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up2(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down1, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up1(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.up0(out)",
                            "Call"
                        ],
                        [
                            "self.classify(out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[down4, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_102": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.max_pool2d(down1, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down2, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down3, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down4, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.same(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down4, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up4(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down3, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up3(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down2, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up2(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down1, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up1(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.up0(out)",
                            "Call"
                        ],
                        [
                            "self.classify(out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[down3, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_106": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.max_pool2d(down1, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down2, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down3, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down4, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.same(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down4, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up4(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down3, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up3(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down2, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up2(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down1, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up1(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.up0(out)",
                            "Call"
                        ],
                        [
                            "self.classify(out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[down2, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_110": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.max_pool2d(down1, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down2, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down3, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down4, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.same(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down4, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up4(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down3, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up3(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down2, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up2(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down1, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up1(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.up0(out)",
                            "Call"
                        ],
                        [
                            "self.classify(out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[down1, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_114": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.max_pool2d(down1, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down2, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down3, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(down4, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.same(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down4, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up4(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down3, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up3(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down2, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up2(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "torch.cat([down1, out], 1)",
                            "Call"
                        ],
                        [
                            "self.up1(out)",
                            "Call"
                        ],
                        [
                            "F.upsample(out, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "self.up0(out)",
                            "Call"
                        ],
                        [
                            "self.classify(out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/validation.py": {
        "torch": {}
    }
}