{
    "HyKnow_Multiple/base_model.py": {
        "torch": {
            "Embedding_39": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "cfg.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "cfg.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_95": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_140": {
                "variable": {
                    "value": "t_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "t_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(t_prob, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "t_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "t_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(t_samples, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_142": {
                "variable": {
                    "value": "t_prob_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "t_prob_ground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(t_prob_ground, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_143": {
                "variable": {
                    "value": "t_samples_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "t_samples_ground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(t_samples_ground, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "k_input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "k_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padSeqs(knowledge, self.k_max_len, truncated=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_255": {
                "variable": {
                    "value": "z_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(z_prob, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_prob, pt_prob], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "z_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_prob, pt_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_257": {
                "variable": {
                    "value": "z_prob_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_prob_ground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(z_prob_ground, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_prob_ground, pt_prob_ground], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "z_prob_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_prob_ground, pt_prob_ground]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_259": {
                "variable": {
                    "value": "z_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(z_samples, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_samples, pt_samples], dim=1)",
                            "Call"
                        ],
                        [
                            "qz_samples",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "z_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_samples, pt_samples]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_261": {
                "variable": {
                    "value": "z_samples_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_samples_ground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(z_samples_ground, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_samples_ground, pt_samples_ground], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "z_samples_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_samples_ground, pt_samples_ground]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_335": {
                "variable": {
                    "value": "a_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_prob, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_336": {
                "variable": {
                    "value": "a_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_samples, dim=1)",
                            "Call"
                        ],
                        [
                            "qa_samples",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_383": {
                "variable": {
                    "value": "pm_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pm_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pm_prob, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_384": {
                "variable": {
                    "value": "m_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "m_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(m_idx, dim=1)",
                            "Call"
                        ],
                        [
                            "[list(_) for _ in list(m_idx)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_394": {
                "variable": {
                    "value": "(p, token)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pt_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob, pv_z_hiddens, emb_tt, last_hidden)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_123": {
                "variable": {
                    "value": "prob_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pt_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob, pv_z_hiddens, emb_tt, last_hidden)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tt.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_123": {
                "variable": {
                    "value": "prob_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_124": {
                "variable": {
                    "value": "log_prob_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(prob, 1, tt.view(-1, 1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_132": {
                "variable": {
                    "value": "prob_tt_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_ground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob_ground, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tt_ground.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_132": {
                "variable": {
                    "value": "prob_tt_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_133": {
                "variable": {
                    "value": "log_prob_tt_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_tt_ground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(prob_ground, 1, tt_ground.view(-1, 1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_295": {
                "variable": {
                    "value": "vec_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[db_vec, filling_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_245": {
                "variable": {
                    "value": "prob_zt_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_ground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob_ground, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "zt_ground.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_245": {
                "variable": {
                    "value": "prob_zt_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_246": {
                "variable": {
                    "value": "log_prob_zt_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_zt_ground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(prob_ground, 1, zt_ground.view(-1, 1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_270": {
                "variable": {
                    "value": "z_gumbel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gmb_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_271": {
                "variable": {
                    "value": "z_gumbel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_gumbel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(gmb_samples, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z_gumbel, self.embedding.weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_343": {
                "variable": {
                    "value": "a_gumbel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gmb_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_344": {
                "variable": {
                    "value": "a_gumbel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_gumbel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(gmb_samples, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a_gumbel, self.embedding.weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_354": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_356": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_374": {
                "variable": {
                    "value": "prob_mt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pt_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob, pv_z_hiddens, emb_tt, last_hidden)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cuda_(torch.ones(batch_size, 1).long())",
                            "Call"
                        ],
                        [
                            "m_input[:, t] if teacher_forcing else torch.topk(prob, 1)[1]",
                            "IfExp"
                        ],
                        [
                            "mt.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(mt, prev_mt, batch_size, m_eos_idx, log_pmt)",
                            "Call"
                        ],
                        [
                            "torch.topk(prob, 1)",
                            "Call"
                        ],
                        [
                            "cuda_(torch.ones(1, 1).long())",
                            "Call"
                        ],
                        [
                            "state.decoded[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_374": {
                "variable": {
                    "value": "prob_mt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_375": {
                "variable": {
                    "value": "log_pmt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_mt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(prob, 1, mt).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_380": {
                "variable": {
                    "value": "(mt_prob, mt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pt_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob, pv_z_hiddens, emb_tt, last_hidden)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_423": {
                "*size": {
                    "value": "curr_z.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_454": {
                "*size": {
                    "value": "prob.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_520": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_536": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pt_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob, pv_z_hiddens, emb_tt, last_hidden)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_537": {
                "variable": {
                    "value": "(mt_prob, mt_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pt_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob, pv_z_hiddens, emb_tt, last_hidden)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size - dead_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_575": {
                "tensors": {
                    "value": "finished[0].decoded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_233": {
                "variable": {
                    "value": "prob_zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pt_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob, pv_z_hiddens, emb_tt, last_hidden)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "zt.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_233": {
                "variable": {
                    "value": "prob_zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_234": {
                "variable": {
                    "value": "log_prob_zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_zt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(prob, 1, zt.view(-1, 1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_294": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_329": {
                "variable": {
                    "value": "prob_at",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pt_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob, pv_z_hiddens, emb_tt, last_hidden)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "at.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_329": {
                "variable": {
                    "value": "prob_at",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_330": {
                "variable": {
                    "value": "log_prob_at",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(prob, 1, at.view(-1, 1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_121": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pt_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob, pv_z_hiddens, emb_tt, last_hidden)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_297": {
                "*size": {
                    "value": "vec_input.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_106": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_218": {
                "variable": {
                    "value": "(topk_probs, topk_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "cfg.topk_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_219": {
                "variable": {
                    "value": "widx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ],
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_220": {
                "variable": {
                    "value": "zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ],
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "widx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(topk_probs, 1, replacement=True)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(topk_probs, 1, replacement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_316": {
                "variable": {
                    "value": "(topk_probs, topk_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "cfg.topk_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_317": {
                "variable": {
                    "value": "widx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ],
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_318": {
                "variable": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ],
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "widx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(topk_probs, 1, replacement=True)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(topk_probs, 1, replacement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_372": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pt_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob, pv_z_hiddens, emb_tt, last_hidden)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_409": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_216": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pt_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob, pv_z_hiddens, emb_tt, last_hidden)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_292": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_314": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pt_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob, pv_z_hiddens, emb_tt, last_hidden)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_413": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_224": {
                "variable": {
                    "value": "zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gmb_samp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(zt, prev_zt, batch_size, z_eos_idx, gmb_samp, True)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(at, prev_at, batch_size, a_eos_idx, gmb_samp, True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_225": {
                "variable": {
                    "value": "emb_zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gmb_samp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(zt, prev_zt, batch_size, z_eos_idx, gmb_samp, True)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(at, prev_at, batch_size, a_eos_idx, gmb_samp, True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_225": {
                "variable": {
                    "value": "emb_zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_322": {
                "variable": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gmb_samp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(zt, prev_zt, batch_size, z_eos_idx, gmb_samp, True)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(at, prev_at, batch_size, a_eos_idx, gmb_samp, True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_323": {
                "variable": {
                    "value": "emb_at",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gmb_samp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(zt, prev_zt, batch_size, z_eos_idx, gmb_samp, True)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(at, prev_at, batch_size, a_eos_idx, gmb_samp, True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_323": {
                "variable": {
                    "value": "emb_at",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_378": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pt_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob, pv_z_hiddens, emb_tt, last_hidden)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_545": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "HyKnow_Multiple/copy_modules.py": {
        "torch": {
            "stack_8": {
                "variable": {
                    "value": "cp_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sb == target[b] for (b, sb) in enumerate(source)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_11": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy_probs * cp_pos.float()",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_12": {
                "variable": {
                    "value": "selective_read",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[u_hiddens, m_hiddens]",
                            "List"
                        ],
                        [
                            "[u_hiddens, z_hiddens, k_hiddens]",
                            "List"
                        ],
                        [
                            "hiddens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_22": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.Wgen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.Wcp_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.Wcp_pv_pz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_input, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gru_out, t_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_55": {
                "variable": {
                    "value": "expand_u_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_u(u_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_56": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expand_u_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_56": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_83": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.Wgen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.Wcp_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.Wcp_pz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_input, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gru_out, t_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_133": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_u(u_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_134": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(expand_u_hiddens, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_134": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_176": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_178": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.Wgen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.Wcp_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.Wcp_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.Wcp_pz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_input, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gru_out, t_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_228": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_u(u_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_229": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(expand_u_hiddens, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_229": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_230": {
                "variable": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_m(m_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_231": {
                "variable": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_m(m_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_m, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_m(m_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_m, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_231": {
                "variable": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_301": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size + hidden_size + db_vec_size + slot_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_303": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_306": {
                "variable": {
                    "value": "self.Wgen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_319": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb_at, context, vec_input.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gru_out, context, vec_input.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_326": {
                "variable": {
                    "value": "prob_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_340": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size + hidden_size + db_vec_size + slot_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_342": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_348": {
                "variable": {
                    "value": "self.Wgen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_349": {
                "variable": {
                    "value": "self.Wcp_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_366": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_input, context, vec_input.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_370": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gru_out, context, vec_input.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_375": {
                "variable": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_m(m_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_376": {
                "variable": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_m(m_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_m, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_m(m_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_m, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_376": {
                "variable": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_379": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_m]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_380": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_382": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_m.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "m_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_382": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_419": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size + hidden_size + db_vec_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_421": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_431": {
                "variable": {
                    "value": "self.Wgen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_432": {
                "variable": {
                    "value": "self.Wcp_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_433": {
                "variable": {
                    "value": "self.Wcp_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_434": {
                "variable": {
                    "value": "self.Wcp_tk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_480": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_input, context, db_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_486": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gru_out, context, db_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_493": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_u(u_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_494": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(expand_u_hiddens, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_494": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_495": {
                "variable": {
                    "value": "score_c_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_z(z_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_496": {
                "variable": {
                    "value": "score_c_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_z(z_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_z, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_496": {
                "variable": {
                    "value": "score_c_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_497": {
                "variable": {
                    "value": "score_c_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_tk(k_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_498": {
                "variable": {
                    "value": "score_c_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_tk(k_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_k, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_498": {
                "variable": {
                    "value": "score_c_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_540": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_541": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "domain_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_547": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_hiddens",
                            "Method Argument"
                        ],
                        [
                            "u_hiddens",
                            "Method Argument"
                        ],
                        [
                            "u_hiddens",
                            "Method Argument"
                        ],
                        [
                            "u_hiddens",
                            "Method Argument"
                        ],
                        [
                            "u_hiddens",
                            "Method Argument"
                        ],
                        [
                            "u_hiddens",
                            "Method Argument"
                        ],
                        [
                            "u_hiddens",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_550": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "variable": {
                    "value": "expand_pv_pz_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_pv_pz(pv_z_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_59": {
                "variable": {
                    "value": "score_c_pv_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expand_pv_pz_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_pv_pz(pv_z_hiddens))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_59": {
                "variable": {
                    "value": "score_c_pv_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u, score_c_pv_pz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_63": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_63": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_64": {
                "variable": {
                    "value": "prob_c_pv_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_pv_pz.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pv_z_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "prob_c_pv_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_70": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_70": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.Win",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size + hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_138": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_139": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_141": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_141": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_146": {
                "variable": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_pz(pv_z_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_147": {
                "variable": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_pz(pv_z_hidden))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_pz, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_pz(pv_z_hidden))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_pz, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_147": {
                "variable": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u, score_c_pz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_149": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_151": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_151": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_152": {
                "variable": {
                    "value": "prob_c_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_pz.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pv_z_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_152": {
                "variable": {
                    "value": "prob_c_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.Win",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size + hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_235": {
                "variable": {
                    "value": "score_no_pv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u, score_c_m]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_no_pv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_m], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_238": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_238": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_239": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_m.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "m_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_239": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_244": {
                "variable": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_pz(pv_z_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_245": {
                "variable": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_pz(pv_z_hidden))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_pz, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_pz(pv_z_hidden))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_pz, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_245": {
                "variable": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "score_has_pv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u, score_c_m, score_c_pz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_247": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_has_pv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_m, score_c_pz], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_250": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_250": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_251": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_m.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "m_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_251": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_252": {
                "variable": {
                    "value": "prob_c_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_pz.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pv_z_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_252": {
                "variable": {
                    "value": "prob_c_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_346": {
                "variable": {
                    "value": "self.Win",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size + hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_397": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_m.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "m_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_397": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_428": {
                "variable": {
                    "value": "self.Win",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size + hidden_size * 2",
                            "BinOp"
                        ],
                        [
                            "input_size + hidden_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_436": {
                "variable": {
                    "value": "self.Wcp_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_469": {
                "variable": {
                    "value": "t_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.embed(mt), selc_read_u, selc_read_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_501": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u, score_c_z, score_c_k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_502": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_506": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_506": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_507": {
                "variable": {
                    "value": "prob_c_z_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_z.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pz_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pz_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_507": {
                "variable": {
                    "value": "prob_c_z_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_508": {
                "variable": {
                    "value": "prob_c_k_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_k.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_508": {
                "variable": {
                    "value": "prob_c_k_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_511": {
                "variable": {
                    "value": "score_c_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_a(a_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_512": {
                "variable": {
                    "value": "score_c_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_a(a_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_a, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_512": {
                "variable": {
                    "value": "score_c_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_513": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u, score_c_z, score_c_a, score_c_k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_514": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_518": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_518": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_519": {
                "variable": {
                    "value": "prob_c_z_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_z.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pz_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pz_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_519": {
                "variable": {
                    "value": "prob_c_z_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_520": {
                "variable": {
                    "value": "prob_c_a_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_a.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pa_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_520": {
                "variable": {
                    "value": "prob_c_a_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_521": {
                "variable": {
                    "value": "prob_c_k_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_k.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_521": {
                "variable": {
                    "value": "prob_c_k_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[u_hiddens, m_hiddens]",
                            "List"
                        ],
                        [
                            "[u_hiddens, z_hiddens, k_hiddens]",
                            "List"
                        ],
                        [
                            "hiddens",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_272": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_272": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_273": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_m.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "m_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_273": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_280": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_280": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_281": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_m.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "m_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_281": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_282": {
                "variable": {
                    "value": "prob_c_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_pz.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pv_z_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_282": {
                "variable": {
                    "value": "prob_c_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_365": {
                "tensors": {
                    "value": "[u_hiddens, m_hiddens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_471": {
                "variable": {
                    "value": "t_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_input, selc_read_a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_479": {
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[u_hiddens, m_hiddens]",
                            "List"
                        ],
                        [
                            "[u_hiddens, z_hiddens, k_hiddens]",
                            "List"
                        ],
                        [
                            "hiddens",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "[u_hiddens, pv_z_hiddens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_115": {
                "tensors": {
                    "value": "[emb_zt, selc_read_u, selc_read_pv_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "[u_hiddens, pv_z_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "u_input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_214": {
                "tensors": {
                    "value": "[emb_zt, selc_read_u, selc_read_m, selc_read_pv_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_241": {
                "*size": {
                    "value": "u_input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_361": {
                "tensors": {
                    "value": "[emb_at, selc_read_u, selc_read_m]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "HyKnow_Multiple/modules.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_input_np.shape[0], x_input_np.shape[1], cfg.vocab_size), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(result).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_53": {
                "variable": {
                    "value": "pz_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[first_input, pz_proba]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "y_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits + sample_gumbel(logits.size())",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y_tensor.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "n_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_dims if n_dims is not None else int(torch.max(y_tensor)) + 1",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_60": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.size()",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_63": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_100": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_106": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat([H, encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_121": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_141": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_143": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_167": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "input_seqs",
                            "variable"
                        ],
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "embedded[sort_idx]",
                            "Subscript"
                        ],
                        [
                            "input_seqs",
                            "variable"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_lens[sort_idx]",
                            "Subscript"
                        ],
                        [
                            "input_lens",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_169": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gru(embedded, hidden)",
                            "Call"
                        ],
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "self.gru(packed, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(outputs, batch_first=True)",
                            "Call"
                        ],
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "outputs[unsort_idx].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "(pz_proba.size(0), 1, pz_proba.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_61": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_106": {
                "tensors": {
                    "value": "[H, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_23": {
                "input": {
                    "value": "y_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.data if isinstance(y, Variable) else y",
                            "IfExp"
                        ],
                        [
                            "y_tensor.type(torch.LongTensor).contiguous().view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "HyKnow_Multiple/rnn_net.py": {
        "torch": {
            "Embedding_34": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_35": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size + extra_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_69": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([embedded, extra_input], -1)",
                            "Call"
                        ],
                        [
                            "embedded",
                            "variable"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_lens[sort_idx]",
                            "Subscript"
                        ],
                        [
                            "input_lens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_71": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gru(packed, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.transpose(0, 1)[unsort_idx].transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_88": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_93": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_94": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_118": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_118": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_126": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat([H, encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_129": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.repeat(encoder_outputs.size(0), 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.attn(torch.cat([H, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_64": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded, extra_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_87": {
                "*size": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_126": {
                "tensors": {
                    "value": "[H, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "HyKnow_Multiple/smc_model.py": {
        "torch": {
            "set_printoptions_11": {
                "sci_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_16": {
                "variable": {
                    "value": "self.weight_normalize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_214": {
                "variable": {
                    "value": "pa_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs['pa_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "pa_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_232": {
                "variable": {
                    "value": "cliped_norm_W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "turn_states.get('norm_W', None)",
                            "Call"
                        ],
                        [
                            "self.weight_normalize(log_w).transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "norm_W",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "variable": {
                    "value": "pa_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "z_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(z_input.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "z_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_input, t_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "ndarray": {
                    "value": "filling_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reader.cons_tensors_to_indicator(pz_samples)",
                            "Call"
                        ],
                        [
                            "cuda_(torch.from_numpy(filling_vec).float())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_181": {
                "variable": {
                    "value": "z_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(z_input.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_209": {
                "input": {
                    "value": "probs['pm_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_227": {
                "input": {
                    "value": "probs['pm_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "u_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[u_input] * self.particle_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "m_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m_input] * self.particle_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_95": {
                "variable": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.cat([norm_W] * self.particle_num, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_230": {
                "input": {
                    "value": "probs['pa_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "list(a_input.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "ndarray": {
                    "value": "db_vec_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "[norm_W] * self.particle_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "db_vec_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "HyKnow_Multiple/train.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "db_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(py_batch['db_vec'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "filling_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(py_batch['filling_vec'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "u_input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "u_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.padSeqs(py_batch['user'], cfg.u_max_len, truncated=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "t_input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.padSeqs(py_batch['topic'], maxlen=cfg.t_length, fixed_length=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "m_input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "m_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.padSeqs(py_batch['resp'], cfg.m_max_len, truncated=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_81": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_382": {
                "variable": {
                    "value": "all_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_403": {
                "variable": {
                    "value": "embedding_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "embedding_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reader.get_glove_matrix(glove_path, initial_arr)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(embedding_arr)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_488": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_489": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "z_input[sn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "z_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.padSeqs(z_input_py, maxlen=cfg.z_length, fixed_length=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_376": {
                "obj": {
                    "value": "all_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.state_dict()",
                            "Call"
                        ],
                        [
                            "torch.load(path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_485": {
                "device": {
                    "value": "cfg.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "a_input[sn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.padSeqs(a_input_py, maxlen=cfg.a_length, fixed_length=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "HyKnow_Multiple/vae_model.py": {
        "torch": {
            "sum_34": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_proba * (torch.log(q_proba) - torch.log(p_proba))",
                            "BinOp"
                        ],
                        [
                            "q_proba * (torch.log(q_proba) - torch.log(p_proba))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "self.supervised_loss(probs, index, no_label_train)",
                            "Call"
                        ],
                        [
                            "self.rl_loss(probs, index)",
                            "Call"
                        ],
                        [
                            "self.unsupervised_loss(probs, index)",
                            "Call"
                        ],
                        [
                            "self.supervised_loss(probs, index, no_label_train)",
                            "Call"
                        ],
                        [
                            "pz_loss + qz_loss + m_loss + pa_loss + qa_loss",
                            "BinOp"
                        ],
                        [
                            "pz_loss + qz_loss + m_loss",
                            "BinOp"
                        ],
                        [
                            "m_loss",
                            "variable"
                        ],
                        [
                            "m_loss + kl_loss + kl_a_loss",
                            "BinOp"
                        ],
                        [
                            "m_loss + kl_loss",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_35": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_proba * (torch.log(q_proba) - torch.log(p_proba))",
                            "BinOp"
                        ],
                        [
                            "q_proba * (torch.log(q_proba) - torch.log(p_proba))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "self.supervised_loss(probs, index, no_label_train)",
                            "Call"
                        ],
                        [
                            "self.rl_loss(probs, index)",
                            "Call"
                        ],
                        [
                            "self.unsupervised_loss(probs, index)",
                            "Call"
                        ],
                        [
                            "self.supervised_loss(probs, index, no_label_train)",
                            "Call"
                        ],
                        [
                            "pz_loss + qz_loss + m_loss + pa_loss + qa_loss",
                            "BinOp"
                        ],
                        [
                            "pz_loss + qz_loss + m_loss",
                            "BinOp"
                        ],
                        [
                            "m_loss",
                            "variable"
                        ],
                        [
                            "m_loss + kl_loss + kl_a_loss",
                            "BinOp"
                        ],
                        [
                            "m_loss + kl_loss",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_204": {
                "variable": {
                    "value": "pm_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs['pm_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_224": {
                "variable": {
                    "value": "pm_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs['pm_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_proba * (torch.log(q_proba) - torch.log(p_proba))",
                            "BinOp"
                        ],
                        [
                            "q_proba * (torch.log(q_proba) - torch.log(p_proba))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "self.supervised_loss(probs, index, no_label_train)",
                            "Call"
                        ],
                        [
                            "self.rl_loss(probs, index)",
                            "Call"
                        ],
                        [
                            "self.unsupervised_loss(probs, index)",
                            "Call"
                        ],
                        [
                            "self.supervised_loss(probs, index, no_label_train)",
                            "Call"
                        ],
                        [
                            "pz_loss + qz_loss + m_loss + pa_loss + qa_loss",
                            "BinOp"
                        ],
                        [
                            "pz_loss + qz_loss + m_loss",
                            "BinOp"
                        ],
                        [
                            "m_loss",
                            "variable"
                        ],
                        [
                            "m_loss + kl_loss + kl_a_loss",
                            "BinOp"
                        ],
                        [
                            "m_loss + kl_loss",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "kl_a_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "z_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(z_input.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_203": {
                "input": {
                    "value": "probs['qz_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_23": {
                "input": {
                    "value": "p_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_proba",
                            "Method Argument"
                        ],
                        [
                            "p_proba",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_33": {
                "input": {
                    "value": "p_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_proba",
                            "Method Argument"
                        ],
                        [
                            "p_proba",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_178": {
                "ndarray": {
                    "value": "filling_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reader.cons_tensors_to_indicator(pz_samples)",
                            "Call"
                        ],
                        [
                            "cuda_(torch.from_numpy(filling_vec).float())",
                            "Call"
                        ],
                        [
                            "self.reader.cons_tensors_to_indicator(pz_samples)",
                            "Call"
                        ],
                        [
                            "cuda_(torch.from_numpy(filling_vec).float())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_210": {
                "input": {
                    "value": "probs['qa_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "list(a_input.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "filling_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reader.cons_tensors_to_indicator(pz_samples)",
                            "Call"
                        ],
                        [
                            "cuda_(torch.from_numpy(filling_vec).float())",
                            "Call"
                        ],
                        [
                            "self.reader.cons_tensors_to_indicator(pz_samples)",
                            "Call"
                        ],
                        [
                            "cuda_(torch.from_numpy(filling_vec).float())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_170": {
                "ndarray": {
                    "value": "db_vec_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_128": {
                "ndarray": {
                    "value": "db_vec_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_173": {
                "ndarray": {
                    "value": "db_vec_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_131": {
                "ndarray": {
                    "value": "db_vec_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "HyKnow_Single/base_model.py": {
        "torch": {
            "Embedding_39": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "cfg.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "cfg.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_95": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "k_input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "k_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padSeqs(knowledge, self.k_max_len, truncated=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_242": {
                "variable": {
                    "value": "z_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(z_prob, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_243": {
                "variable": {
                    "value": "z_prob_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_prob_ground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(z_prob_ground, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_245": {
                "variable": {
                    "value": "z_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(z_samples, dim=1)",
                            "Call"
                        ],
                        [
                            "qz_samples",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_246": {
                "variable": {
                    "value": "z_samples_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_samples_ground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(z_samples_ground, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_320": {
                "variable": {
                    "value": "a_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_prob, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_321": {
                "variable": {
                    "value": "a_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_samples, dim=1)",
                            "Call"
                        ],
                        [
                            "qa_samples",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_368": {
                "variable": {
                    "value": "pm_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pm_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pm_prob, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_369": {
                "variable": {
                    "value": "m_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "m_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(m_idx, dim=1)",
                            "Call"
                        ],
                        [
                            "[list(_) for _ in list(m_idx)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_379": {
                "variable": {
                    "value": "(p, token)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_tt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_225": {
                "variable": {
                    "value": "prob_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_tt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tt.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_225": {
                "variable": {
                    "value": "prob_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_226": {
                "variable": {
                    "value": "log_prob_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(prob, 1, tt.view(-1, 1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_234": {
                "variable": {
                    "value": "prob_tt_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_ground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob_ground, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tt_ground.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_234": {
                "variable": {
                    "value": "prob_tt_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_235": {
                "variable": {
                    "value": "log_prob_tt_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_tt_ground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(prob_ground, 1, tt_ground.view(-1, 1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_280": {
                "variable": {
                    "value": "vec_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[db_vec, filling_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_191": {
                "variable": {
                    "value": "prob_zt_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_ground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob_ground, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "zt_ground.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_191": {
                "variable": {
                    "value": "prob_zt_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_192": {
                "variable": {
                    "value": "log_prob_zt_ground",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_zt_ground",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(prob_ground, 1, zt_ground.view(-1, 1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_255": {
                "variable": {
                    "value": "z_gumbel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gmb_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_256": {
                "variable": {
                    "value": "z_gumbel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_gumbel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(gmb_samples, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(z_gumbel, self.embedding.weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_328": {
                "variable": {
                    "value": "a_gumbel",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gmb_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_329": {
                "variable": {
                    "value": "a_gumbel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_gumbel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(gmb_samples, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a_gumbel, self.embedding.weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_339": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_341": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_359": {
                "variable": {
                    "value": "prob_mt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_tt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "mt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cuda_(torch.ones(batch_size, 1).long())",
                            "Call"
                        ],
                        [
                            "m_input[:, t] if teacher_forcing else torch.topk(prob, 1)[1]",
                            "IfExp"
                        ],
                        [
                            "mt.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(mt, prev_mt, batch_size, m_eos_idx, log_pmt)",
                            "Call"
                        ],
                        [
                            "torch.topk(prob, 1)",
                            "Call"
                        ],
                        [
                            "cuda_(torch.ones(1, 1).long())",
                            "Call"
                        ],
                        [
                            "state.decoded[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_359": {
                "variable": {
                    "value": "prob_mt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_360": {
                "variable": {
                    "value": "log_pmt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_mt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(prob, 1, mt).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_365": {
                "variable": {
                    "value": "(mt_prob, mt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_tt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_408": {
                "*size": {
                    "value": "curr_z.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_439": {
                "*size": {
                    "value": "prob.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_505": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_521": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_tt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_522": {
                "variable": {
                    "value": "(mt_prob, mt_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_tt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size - dead_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_560": {
                "tensors": {
                    "value": "finished[0].decoded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_179": {
                "variable": {
                    "value": "prob_zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_tt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "zt.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_179": {
                "variable": {
                    "value": "prob_zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_180": {
                "variable": {
                    "value": "log_prob_zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_zt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(prob, 1, zt.view(-1, 1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_279": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_314": {
                "variable": {
                    "value": "prob_at",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_tt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "at.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_314": {
                "variable": {
                    "value": "prob_at",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_315": {
                "variable": {
                    "value": "log_prob_at",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(prob, 1, at.view(-1, 1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_223": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_tt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_282": {
                "*size": {
                    "value": "vec_input.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_164": {
                "variable": {
                    "value": "(topk_probs, topk_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "cfg.topk_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_165": {
                "variable": {
                    "value": "widx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ],
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_166": {
                "variable": {
                    "value": "zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ],
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "widx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(topk_probs, 1, replacement=True)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(topk_probs, 1, replacement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_203": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_301": {
                "variable": {
                    "value": "(topk_probs, topk_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "cfg.topk_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_302": {
                "variable": {
                    "value": "widx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ],
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_303": {
                "variable": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ],
                        [
                            "torch.topk(prob.squeeze(1), cfg.topk_num)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "widx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(topk_probs, 1, replacement=True)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(topk_probs, 1, replacement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_357": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_tt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_394": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_162": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_tt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_277": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_299": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_tt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_398": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input.size(0)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_170": {
                "variable": {
                    "value": "zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gmb_samp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(zt, prev_zt, batch_size, z_eos_idx, gmb_samp, True)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(at, prev_at, batch_size, a_eos_idx, gmb_samp, True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_171": {
                "variable": {
                    "value": "emb_zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gmb_samp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(zt, prev_zt, batch_size, z_eos_idx, gmb_samp, True)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(at, prev_at, batch_size, a_eos_idx, gmb_samp, True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_171": {
                "variable": {
                    "value": "emb_zt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_307": {
                "variable": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gmb_samp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(zt, prev_zt, batch_size, z_eos_idx, gmb_samp, True)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(at, prev_at, batch_size, a_eos_idx, gmb_samp, True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_308": {
                "variable": {
                    "value": "emb_at",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gmb_samp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(zt, prev_zt, batch_size, z_eos_idx, gmb_samp, True)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.mask_samples(at, prev_at, batch_size, a_eos_idx, gmb_samp, True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_308": {
                "variable": {
                    "value": "emb_at",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_363": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_tt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "t_input_1hot[:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.pz_decoder.forward(u_input, u_input_1hot, u_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_pv_z=selc_read_pv_z)",
                            "Call"
                        ],
                        [
                            "self.qz_decoder.forward(u_input, u_input_1hot, u_hiddens, m_input, m_input_1hot, m_hiddens, pv_z_prob=pv_pr, pv_z_hidden=pv_h, pv_z_idx=pv_idx, emb_zt=emb_zt, last_hidden=last_hidden, selc_read_u=selc_read_u, selc_read_m=selc_read_m, selc_read_pv_z=selc_read_pv_z, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "z_input_1hot[sn][:, t, :].squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.mask_probs(prob, tokens_allow=self.reader.slot_value_mask[sn])",
                            "Call"
                        ],
                        [
                            "self.pa_decoder[sn].forward(u_hiddens, emb_at, vec_input, last_hidden)",
                            "Call"
                        ],
                        [
                            "self.qa_decoder[sn].forward(u_hiddens, m_input, m_input_1hot, m_hiddens, emb_at, vec_input, last_hidden, selc_read_m=selc_read_m, temp=self.gumbel_temp, return_gmb=return_gmb)",
                            "Call"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens, selc_read_u, selc_read_z, selc_read_a)",
                            "Call"
                        ],
                        [
                            "prob * mask",
                            "BinOp"
                        ],
                        [
                            "self.m_decoder.forward(u_input, u_input_1hot, u_hiddens, pz_samples, pz_prob, z_hiddens, mt, k_input_1hot, k_hiddens, db_vec, last_hidden, pa_samples, pa_prob, a_hiddens)",
                            "Call"
                        ],
                        [
                            "torch.log(prob)",
                            "Call"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ],
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_530": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "HyKnow_Single/copy_modules.py": {
        "torch": {
            "stack_8": {
                "variable": {
                    "value": "cp_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sb == target[b] for (b, sb) in enumerate(source)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_11": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy_probs * cp_pos.float()",
                            "BinOp"
                        ],
                        [
                            "F.softmax(weight, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_12": {
                "variable": {
                    "value": "selective_read",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[u_hiddens, m_hiddens]",
                            "List"
                        ],
                        [
                            "[u_hiddens, z_hiddens, k_hiddens]",
                            "List"
                        ],
                        [
                            "hiddens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_22": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.Wgen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.Wcp_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.Wcp_pv_pz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_input, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gru_out, t_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_55": {
                "variable": {
                    "value": "expand_u_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_u(u_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_56": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expand_u_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_56": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_83": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.Wgen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.Wcp_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.Wcp_pz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_input, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gru_out, t_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_133": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_u(u_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_134": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(expand_u_hiddens, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_134": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_176": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_178": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.Wgen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.Wcp_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.Wcp_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.Wcp_pz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_input, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gru_out, t_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_228": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_u(u_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_229": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(expand_u_hiddens, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_229": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_230": {
                "variable": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_m(m_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_231": {
                "variable": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_m(m_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_m, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_m(m_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_m, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_231": {
                "variable": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_301": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size + hidden_size + db_vec_size + slot_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_303": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_306": {
                "variable": {
                    "value": "self.Wgen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_319": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb_at, context, vec_input.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gru_out, context, vec_input.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_326": {
                "variable": {
                    "value": "prob_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_340": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size + hidden_size + db_vec_size + slot_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_342": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_348": {
                "variable": {
                    "value": "self.Wgen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_349": {
                "variable": {
                    "value": "self.Wcp_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_366": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_input, context, vec_input.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_370": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gru_out, context, vec_input.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_375": {
                "variable": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_m(m_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_376": {
                "variable": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_m(m_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_m, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_m(m_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_m, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_376": {
                "variable": {
                    "value": "score_c_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_379": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_m]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_380": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_382": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_m.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "m_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_382": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_419": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size + hidden_size + db_vec_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_421": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_431": {
                "variable": {
                    "value": "self.Wgen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_432": {
                "variable": {
                    "value": "self.Wcp_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_433": {
                "variable": {
                    "value": "self.Wcp_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_434": {
                "variable": {
                    "value": "self.Wcp_tk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_480": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_input, context, db_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_486": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gru_out, context, db_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_493": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_u(u_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_494": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(expand_u_hiddens, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_u(u_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_u, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_494": {
                "variable": {
                    "value": "score_c_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_495": {
                "variable": {
                    "value": "score_c_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_z(z_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_496": {
                "variable": {
                    "value": "score_c_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_z(z_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_z, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_496": {
                "variable": {
                    "value": "score_c_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_497": {
                "variable": {
                    "value": "score_c_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_tk(k_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_498": {
                "variable": {
                    "value": "score_c_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_tk(k_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_k, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_498": {
                "variable": {
                    "value": "score_c_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_540": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_541": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "domain_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_547": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_hiddens",
                            "Method Argument"
                        ],
                        [
                            "u_hiddens",
                            "Method Argument"
                        ],
                        [
                            "u_hiddens",
                            "Method Argument"
                        ],
                        [
                            "u_hiddens",
                            "Method Argument"
                        ],
                        [
                            "u_hiddens",
                            "Method Argument"
                        ],
                        [
                            "u_hiddens",
                            "Method Argument"
                        ],
                        [
                            "u_hiddens",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_550": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "variable": {
                    "value": "expand_pv_pz_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_pv_pz(pv_z_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_59": {
                "variable": {
                    "value": "score_c_pv_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expand_pv_pz_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_pv_pz(pv_z_hiddens))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_59": {
                "variable": {
                    "value": "score_c_pv_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u, score_c_pv_pz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_63": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_63": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_64": {
                "variable": {
                    "value": "prob_c_pv_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_pv_pz.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pv_z_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "prob_c_pv_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_70": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_70": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.Win",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size + hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_138": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_139": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_141": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_141": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_146": {
                "variable": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_pz(pv_z_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_147": {
                "variable": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_pz(pv_z_hidden))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_pz, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_pz(pv_z_hidden))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_pz, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_147": {
                "variable": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u, score_c_pz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_149": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_151": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_151": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_152": {
                "variable": {
                    "value": "prob_c_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_pz.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pv_z_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_152": {
                "variable": {
                    "value": "prob_c_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.Win",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size + hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_235": {
                "variable": {
                    "value": "score_no_pv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u, score_c_m]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_no_pv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_m], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_238": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_238": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_239": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_m.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "m_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_239": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_244": {
                "variable": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_pz(pv_z_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_245": {
                "variable": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_pz(pv_z_hidden))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_pz, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.Wcp_pz(pv_z_hidden))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_pz, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_245": {
                "variable": {
                    "value": "score_c_pz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "score_has_pv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u, score_c_m, score_c_pz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_247": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_has_pv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_m, score_c_pz], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_250": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_250": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_251": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_m.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "m_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_251": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_252": {
                "variable": {
                    "value": "prob_c_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_pz.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pv_z_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_252": {
                "variable": {
                    "value": "prob_c_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_346": {
                "variable": {
                    "value": "self.Win",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size + hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ],
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_397": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_m.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "m_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_397": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_428": {
                "variable": {
                    "value": "self.Win",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size + hidden_size * 2",
                            "BinOp"
                        ],
                        [
                            "input_size + hidden_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_436": {
                "variable": {
                    "value": "self.Wcp_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_469": {
                "variable": {
                    "value": "t_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.embed(mt), selc_read_u, selc_read_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_501": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u, score_c_z, score_c_k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_502": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_506": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_506": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_507": {
                "variable": {
                    "value": "prob_c_z_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_z.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pz_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pz_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_507": {
                "variable": {
                    "value": "prob_c_z_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_508": {
                "variable": {
                    "value": "prob_c_k_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_k.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_508": {
                "variable": {
                    "value": "prob_c_k_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_511": {
                "variable": {
                    "value": "score_c_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wcp_a(a_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_512": {
                "variable": {
                    "value": "score_c_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.Wcp_a(a_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c_a, st.transpose(1, 2)).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "st.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_512": {
                "variable": {
                    "value": "score_c_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_513": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c_u, score_c_z, score_c_a, score_c_k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_514": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c_u, score_c_pv_pz], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_pz], 1)",
                            "Call"
                        ],
                        [
                            "self.Wgen(st).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_m], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([score_g, score_c_u, score_c_z, score_c_a, score_c_k], 1)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_518": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_518": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_519": {
                "variable": {
                    "value": "prob_c_z_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_z.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pz_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pz_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_519": {
                "variable": {
                    "value": "prob_c_z_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_520": {
                "variable": {
                    "value": "prob_c_a_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_a.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pa_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_520": {
                "variable": {
                    "value": "prob_c_a_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_521": {
                "variable": {
                    "value": "prob_c_k_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_k.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_521": {
                "variable": {
                    "value": "prob_c_k_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[u_hiddens, m_hiddens]",
                            "List"
                        ],
                        [
                            "[u_hiddens, z_hiddens, k_hiddens]",
                            "List"
                        ],
                        [
                            "hiddens",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_272": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_272": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_273": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_m.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "m_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_273": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_280": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_u.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "u_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_280": {
                "variable": {
                    "value": "prob_c_u_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_281": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_m.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "m_input_1hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ],
                        [
                            "m_input_1hot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_281": {
                "variable": {
                    "value": "prob_c_m_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_282": {
                "variable": {
                    "value": "prob_c_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_c_pz.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pv_z_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ],
                        [
                            "pv_z_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_282": {
                "variable": {
                    "value": "prob_c_pz_to_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_365": {
                "tensors": {
                    "value": "[u_hiddens, m_hiddens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_471": {
                "variable": {
                    "value": "t_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t_input, selc_read_a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_479": {
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[u_hiddens, m_hiddens]",
                            "List"
                        ],
                        [
                            "[u_hiddens, z_hiddens, k_hiddens]",
                            "List"
                        ],
                        [
                            "hiddens",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "[u_hiddens, pv_z_hiddens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_115": {
                "tensors": {
                    "value": "[emb_zt, selc_read_u, selc_read_pv_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "[u_hiddens, pv_z_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "u_input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_214": {
                "tensors": {
                    "value": "[emb_zt, selc_read_u, selc_read_m, selc_read_pv_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_241": {
                "*size": {
                    "value": "u_input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_361": {
                "tensors": {
                    "value": "[emb_at, selc_read_u, selc_read_m]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "HyKnow_Single/modules.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((x_input_np.shape[0], x_input_np.shape[1], cfg.vocab_size), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(result).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_53": {
                "variable": {
                    "value": "pz_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[first_input, pz_proba]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "y_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits + sample_gumbel(logits.size())",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y_tensor.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "n_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_dims if n_dims is not None else int(torch.max(y_tensor)) + 1",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_60": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.size()",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_63": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_100": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_106": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat([H, encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_121": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_141": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_143": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_167": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "input_seqs",
                            "variable"
                        ],
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "embedded[sort_idx]",
                            "Subscript"
                        ],
                        [
                            "input_seqs",
                            "variable"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_lens[sort_idx]",
                            "Subscript"
                        ],
                        [
                            "input_lens",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_169": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gru(embedded, hidden)",
                            "Call"
                        ],
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "self.gru(packed, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(outputs, batch_first=True)",
                            "Call"
                        ],
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "outputs[unsort_idx].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "(pz_proba.size(0), 1, pz_proba.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_61": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_106": {
                "tensors": {
                    "value": "[H, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_23": {
                "input": {
                    "value": "y_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.data if isinstance(y, Variable) else y",
                            "IfExp"
                        ],
                        [
                            "y_tensor.type(torch.LongTensor).contiguous().view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "HyKnow_Single/rnn_net.py": {
        "torch": {
            "Embedding_34": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_35": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size + extra_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_69": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([embedded, extra_input], -1)",
                            "Call"
                        ],
                        [
                            "embedded",
                            "variable"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_lens[sort_idx]",
                            "Subscript"
                        ],
                        [
                            "input_lens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_71": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gru(packed, hidden)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.transpose(0, 1)[unsort_idx].transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_88": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(d_hid)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_93": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "std_94": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_118": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_118": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_126": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat([H, encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_129": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.repeat(encoder_outputs.size(0), 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.attn(torch.cat([H, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_64": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded, extra_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_87": {
                "*size": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_126": {
                "tensors": {
                    "value": "[H, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "HyKnow_Single/smc_model.py": {
        "torch": {
            "set_printoptions_11": {
                "sci_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_16": {
                "variable": {
                    "value": "self.weight_normalize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_211": {
                "variable": {
                    "value": "pa_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs['pa_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "pa_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_229": {
                "variable": {
                    "value": "cliped_norm_W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "turn_states.get('norm_W', None)",
                            "Call"
                        ],
                        [
                            "self.weight_normalize(log_w).transpose(1, 0)",
                            "Call"
                        ],
                        [
                            "norm_W",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "pa_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "z_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(z_input.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "z_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_input, t_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "ndarray": {
                    "value": "filling_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reader.cons_tensors_to_indicator(pz_samples)",
                            "Call"
                        ],
                        [
                            "cuda_(torch.from_numpy(filling_vec).float())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_178": {
                "variable": {
                    "value": "z_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(z_input.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_206": {
                "input": {
                    "value": "probs['pm_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_224": {
                "input": {
                    "value": "probs['pm_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "u_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[u_input] * self.particle_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "m_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m_input] * self.particle_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_95": {
                "variable": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.cat([norm_W] * self.particle_num, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_227": {
                "input": {
                    "value": "probs['pa_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "list(a_input.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "ndarray": {
                    "value": "db_vec_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "[norm_W] * self.particle_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "ndarray": {
                    "value": "db_vec_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "HyKnow_Single/train.py": {
        "torch": {
            "from_numpy_44": {
                "variable": {
                    "value": "db_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(py_batch['db_vec'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "filling_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(py_batch['filling_vec'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "u_input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "u_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.padSeqs(py_batch['user'], cfg.u_max_len, truncated=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "t_input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.padSeqs(py_batch['topic'], maxlen=cfg.t_length, fixed_length=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "m_input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "m_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.padSeqs(py_batch['resp'], cfg.m_max_len, truncated=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_383": {
                "variable": {
                    "value": "all_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_404": {
                "variable": {
                    "value": "embedding_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "embedding_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reader.get_glove_matrix(glove_path, initial_arr)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(embedding_arr)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_489": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_490": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "z_input[sn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "z_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.padSeqs(z_input_py, maxlen=cfg.z_length, fixed_length=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_377": {
                "obj": {
                    "value": "all_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.state_dict()",
                            "Call"
                        ],
                        [
                            "torch.load(path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_486": {
                "device": {
                    "value": "cfg.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "a_input[sn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.padSeqs(a_input_py, maxlen=cfg.a_length, fixed_length=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_487": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "HyKnow_Single/vae_model.py": {
        "torch": {
            "sum_34": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_proba * (torch.log(q_proba) - torch.log(p_proba))",
                            "BinOp"
                        ],
                        [
                            "q_proba * (torch.log(q_proba) - torch.log(p_proba))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "self.supervised_loss(probs, index, no_label_train)",
                            "Call"
                        ],
                        [
                            "self.rl_loss(probs, index)",
                            "Call"
                        ],
                        [
                            "self.unsupervised_loss(probs, index)",
                            "Call"
                        ],
                        [
                            "self.supervised_loss(probs, index, no_label_train)",
                            "Call"
                        ],
                        [
                            "pz_loss + qz_loss + m_loss + pa_loss + qa_loss",
                            "BinOp"
                        ],
                        [
                            "pz_loss + qz_loss + m_loss",
                            "BinOp"
                        ],
                        [
                            "m_loss",
                            "variable"
                        ],
                        [
                            "m_loss + kl_loss + kl_a_loss",
                            "BinOp"
                        ],
                        [
                            "m_loss + kl_loss",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_35": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_proba * (torch.log(q_proba) - torch.log(p_proba))",
                            "BinOp"
                        ],
                        [
                            "q_proba * (torch.log(q_proba) - torch.log(p_proba))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "self.supervised_loss(probs, index, no_label_train)",
                            "Call"
                        ],
                        [
                            "self.rl_loss(probs, index)",
                            "Call"
                        ],
                        [
                            "self.unsupervised_loss(probs, index)",
                            "Call"
                        ],
                        [
                            "self.supervised_loss(probs, index, no_label_train)",
                            "Call"
                        ],
                        [
                            "pz_loss + qz_loss + m_loss + pa_loss + qa_loss",
                            "BinOp"
                        ],
                        [
                            "pz_loss + qz_loss + m_loss",
                            "BinOp"
                        ],
                        [
                            "m_loss",
                            "variable"
                        ],
                        [
                            "m_loss + kl_loss + kl_a_loss",
                            "BinOp"
                        ],
                        [
                            "m_loss + kl_loss",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_204": {
                "variable": {
                    "value": "pm_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs['pm_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_224": {
                "variable": {
                    "value": "pm_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs['pm_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_proba * (torch.log(q_proba) - torch.log(p_proba))",
                            "BinOp"
                        ],
                        [
                            "q_proba * (torch.log(q_proba) - torch.log(p_proba))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "self.supervised_loss(probs, index, no_label_train)",
                            "Call"
                        ],
                        [
                            "self.rl_loss(probs, index)",
                            "Call"
                        ],
                        [
                            "self.unsupervised_loss(probs, index)",
                            "Call"
                        ],
                        [
                            "self.supervised_loss(probs, index, no_label_train)",
                            "Call"
                        ],
                        [
                            "pz_loss + qz_loss + m_loss + pa_loss + qa_loss",
                            "BinOp"
                        ],
                        [
                            "pz_loss + qz_loss + m_loss",
                            "BinOp"
                        ],
                        [
                            "m_loss",
                            "variable"
                        ],
                        [
                            "m_loss + kl_loss + kl_a_loss",
                            "BinOp"
                        ],
                        [
                            "m_loss + kl_loss",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "kl_a_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "z_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(z_input.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_203": {
                "input": {
                    "value": "probs['qz_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_23": {
                "input": {
                    "value": "p_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_proba",
                            "Method Argument"
                        ],
                        [
                            "p_proba",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_33": {
                "input": {
                    "value": "p_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_proba",
                            "Method Argument"
                        ],
                        [
                            "p_proba",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_178": {
                "ndarray": {
                    "value": "filling_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reader.cons_tensors_to_indicator(pz_samples)",
                            "Call"
                        ],
                        [
                            "cuda_(torch.from_numpy(filling_vec).float())",
                            "Call"
                        ],
                        [
                            "self.reader.cons_tensors_to_indicator(pz_samples)",
                            "Call"
                        ],
                        [
                            "cuda_(torch.from_numpy(filling_vec).float())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_210": {
                "input": {
                    "value": "probs['qa_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "list(a_input.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "filling_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reader.cons_tensors_to_indicator(pz_samples)",
                            "Call"
                        ],
                        [
                            "cuda_(torch.from_numpy(filling_vec).float())",
                            "Call"
                        ],
                        [
                            "self.reader.cons_tensors_to_indicator(pz_samples)",
                            "Call"
                        ],
                        [
                            "cuda_(torch.from_numpy(filling_vec).float())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_170": {
                "ndarray": {
                    "value": "db_vec_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_128": {
                "ndarray": {
                    "value": "db_vec_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_173": {
                "ndarray": {
                    "value": "db_vec_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_131": {
                "ndarray": {
                    "value": "db_vec_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ],
                        [
                            "self.db_op.get_db_degree(pz_samples, turn_states['dom'], self.vocab)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}