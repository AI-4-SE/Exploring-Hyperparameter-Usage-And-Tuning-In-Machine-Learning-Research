{
    "create_mnistm.py": {
        "tensorflow": {}
    },
    "flip_gradient.py": {
        "tensorflow": {
            "get_default_graph_20": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RegisterGradient_16": {
                "op_type": {
                    "value": "grad_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FlipGradient%d' % self.num_calls",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_22": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "negative_18": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mnist2pkl.py": {
        "tensorflow": {}
    },
    "model/MDAN.py": {
        "tensorflow": {
            "placeholder_24": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 28, 28, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.domain1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.domain2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.domain3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_40": {
                "variable": {
                    "value": "h_conv0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2d(X_input, W_conv0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_conv0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([64])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_42": {
                "variable": {
                    "value": "h_conv0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h_conv0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(conv2d(X_input, W_conv0), b_conv0)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(h_conv0)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h_conv0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_47": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2d(h_pool0, W_conv1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([128])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_49": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(conv2d(h_pool0, W_conv1), b_conv1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(h_conv1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h_conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_54": {
                "variable": {
                    "value": "self.h_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(conv2d(h_pool1, W_conv2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([256])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_62": {
                "variable": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2d(h_pool3, W_conv3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([256])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_64": {
                "variable": {
                    "value": "h_pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(conv2d(h_pool3, W_conv3), b_conv3)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(h_conv3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_conv3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_74": {
                "variable": {
                    "value": "classify_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : tf.concat([tf.slice(self.feature, [0, 0], [batch_size // 6, -1]), tf.slice(self.feature, [batch_size // 3, 0], [batch_size // 6, -1]), tf.slice(self.feature, [2 * batch_size // 3, 0], [batch_size // 6, -1])], 0)",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : self.feature",
                            "Lambda"
                        ]
                    ]
                }
            },
            "cond_82": {
                "variable": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : tf.concat([tf.slice(self.y, [0, 0], [batch_size // 6, -1]), tf.slice(self.y, [batch_size // 3, 0], [batch_size // 6, -1]), tf.slice(self.y, [2 * batch_size // 3, 0], [batch_size // 6, -1])], 0)",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : self.y",
                            "Lambda"
                        ]
                    ]
                }
            },
            "add_86": {
                "variable": {
                    "value": "h_fc0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(classify_feats, W_fc0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_fc0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_88": {
                "variable": {
                    "value": "h_fc0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h_fc0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(classify_feats, W_fc0), b_fc0)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(h_fc0)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h_fc0)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_92": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_fc0, W_fc1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([1024])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_94": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_fc0, W_fc1), b_fc1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(h_fc1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h_fc1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_98": {
                "variable": {
                    "value": "h_fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h_fc1, W_fc2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([10])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_100": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_fc1, W_fc2), b_fc2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(h_fc2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_102": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_fc2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_103": {
                "variable": {
                    "value": "self.pred_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_fc2)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_111": {
                "variable": {
                    "value": "feature_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "feature_1_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flip_gradient(tf.reshape(pool_1, [-1, 4 * 4 * 256]), self.l)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size // 3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "out_1_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(feature_1, w_fc1_1), b_fc1_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "out_2_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(out_1_1, w_fc2_1), b_fc2_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_125": {
                "variable": {
                    "value": "logits_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(out_2_1, w_fc3_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_fc3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([2])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_128": {
                "variable": {
                    "value": "self.pred_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(out_2_1, w_fc3_1), b_fc3_1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(logits_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_129": {
                "variable": {
                    "value": "self.domain_loss_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(out_2_1, w_fc3_1), b_fc3_1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(logits_1)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.domain1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_135": {
                "variable": {
                    "value": "feature_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "feature_2_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flip_gradient(tf.reshape(pool_2, [-1, 4 * 4 * 256]), self.l)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[batch_size // 3, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size // 3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "out_1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(feature_2, w_fc1_2), b_fc1_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_144": {
                "variable": {
                    "value": "out_2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(out_1_2, w_fc2_2), b_fc2_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_149": {
                "variable": {
                    "value": "logits_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(out_2_2, w_fc3_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_fc3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([2])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_152": {
                "variable": {
                    "value": "self.pred_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(out_2_2, w_fc3_2), b_fc3_2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(logits_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_153": {
                "variable": {
                    "value": "self.domain_loss_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(out_2_2, w_fc3_2), b_fc3_2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(logits_2)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.domain2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_160": {
                "variable": {
                    "value": "feature_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "feature_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flip_gradient(tf.reshape(pool_3, [-1, 4 * 4 * 256]))",
                            "Call"
                        ],
                        [
                            "tf.slice(feature_3, [2 * batch_size // 3, 0], [batch_size // 3, -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[2 * batch_size // 3, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size // 3, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_164": {
                "variable": {
                    "value": "out_1_3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(feature_3, w_fc1_3), b_fc1_3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_169": {
                "variable": {
                    "value": "out_2_3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.add(tf.matmul(out_1_3, w_fc2_3), b_fc2_3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_174": {
                "variable": {
                    "value": "logits_3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(out_2_3, w_fc3_3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_fc3_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([2])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_177": {
                "variable": {
                    "value": "self.pred_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(out_2_3, w_fc3_3), b_fc3_3)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(logits_3)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_178": {
                "variable": {
                    "value": "self.domain_loss_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(out_2_3, w_fc3_3), b_fc3_3)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(logits_3)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.domain3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "feature_extractor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "domain_classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_34": {
                "x": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_54": {
                "features": {
                    "value": "conv2d(h_pool1, W_conv2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_69": {
                "values": {
                    "value": "[tf.slice(self.feature, [0, 0], [batch_size // 6, -1]), tf.slice(self.feature, [batch_size // 3, 0], [batch_size // 6, -1]), tf.slice(self.feature, [2 * batch_size // 3, 0], [batch_size // 6, -1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_77": {
                "values": {
                    "value": "[tf.slice(self.y, [0, 0], [batch_size // 6, -1]), tf.slice(self.y, [batch_size // 3, 0], [batch_size // 6, -1]), tf.slice(self.y, [2 * batch_size // 3, 0], [batch_size // 6, -1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "a": {
                    "value": "classify_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_features, all_features)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([4 * 4 * 256, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_92": {
                "a": {
                    "value": "h_fc0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(classify_feats, W_fc0), b_fc0)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(h_fc0)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h_fc0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([2048, 1024])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_98": {
                "a": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(h_fc0, W_fc1), b_fc1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(h_fc1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h_fc1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([1024, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_110": {
                "tensor": {
                    "value": "pool_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_pool_2x2(self.h_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_115": {
                "x": {
                    "value": "tf.matmul(feature_1, w_fc1_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_fc1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_120": {
                "x": {
                    "value": "tf.matmul(out_1_1, w_fc2_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_fc2_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_125": {
                "a": {
                    "value": "out_2_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.add(tf.matmul(out_1_1, w_fc2_1), b_fc2_1))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(out_2_1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc3_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([2048, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_134": {
                "tensor": {
                    "value": "pool_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_pool_2x2(self.h_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_139": {
                "x": {
                    "value": "tf.matmul(feature_2, w_fc1_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_fc1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_144": {
                "x": {
                    "value": "tf.matmul(out_1_2, w_fc2_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_fc2_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_149": {
                "a": {
                    "value": "out_2_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.add(tf.matmul(out_1_2, w_fc2_2), b_fc2_2))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(out_2_2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc3_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([2048, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_159": {
                "tensor": {
                    "value": "pool_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_pool_2x2(self.h_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_164": {
                "x": {
                    "value": "tf.matmul(feature_3, w_fc1_3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_fc1_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_169": {
                "x": {
                    "value": "tf.matmul(out_1_3, w_fc2_3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_fc2_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_174": {
                "a": {
                    "value": "out_2_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.add(tf.matmul(out_1_3, w_fc2_3), b_fc2_3))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(out_2_3)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc3_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([2048, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_115": {
                "a": {
                    "value": "feature_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(feature_1_, [0, 0], [batch_size // 3, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([4 * 4 * 256, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_120": {
                "a": {
                    "value": "out_1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.add(tf.matmul(feature_1, w_fc1_1), b_fc1_1))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(out_1_1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc2_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([2048, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_139": {
                "a": {
                    "value": "feature_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(feature_2_, [batch_size // 3, 0], [batch_size // 3, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([4 * 4 * 256, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_144": {
                "a": {
                    "value": "out_1_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.add(tf.matmul(feature_2, w_fc1_2), b_fc1_2))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(out_1_2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc2_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([2048, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_164": {
                "a": {
                    "value": "feature_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flip_gradient(tf.reshape(pool_3, [-1, 4 * 4 * 256]))",
                            "Call"
                        ],
                        [
                            "tf.slice(feature_3, [2 * batch_size // 3, 0], [batch_size // 3, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc1_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([4 * 4 * 256, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_169": {
                "a": {
                    "value": "out_1_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.add(tf.matmul(feature_3, w_fc1_3), b_fc1_3))",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(out_1_3)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc2_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([2048, 2048])",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_70": {
                "input_": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size // 6, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_71": {
                "input_": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[batch_size // 3, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size // 6, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_72": {
                "input_": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[2 * batch_size // 3, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size // 6, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_78": {
                "input_": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size // 6, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_79": {
                "input_": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[batch_size // 3, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size // 6, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_80": {
                "input_": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[2 * batch_size // 3, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size // 6, -1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "truncated_normal_17": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_22": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_18": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "constraint": {
                    "value": "tf.keras.constraints.max_norm(4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_23": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_27": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_33": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_37": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}