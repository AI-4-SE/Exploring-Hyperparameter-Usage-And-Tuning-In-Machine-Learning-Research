{
    "evaluator.py": {
        "sklearn": {
            "mean_absolute_error_215": {
                "variable": {
                    "value": "skmae",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_absolute_error_225": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "accuracy_score_231": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_squared_error_206": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_curve_683": {
                "variable": {
                    "value": "stats_dict[prc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "spec_df.class_label.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "spec_df.pred_score.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_753": {
                "variable": {
                    "value": "stats_dict[auc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "spec_df.class_label.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "spec_df.pred_score.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_curve_754": {
                "variable": {
                    "value": "stats_dict[roc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "spec_df.class_label.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "spec_df.pred_score.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_761": {
                "variable": {
                    "value": "stats_dict[ap]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "patient_cl_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec_df.class_label.tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "spec_df.pred_score.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "precision_recall_curve_762": {
                "variable": {
                    "value": "stats_dict[prc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "patient_cl_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec_df.class_label.tolist()",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "spec_df.pred_score.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_766": {
                "variable": {
                    "value": "stats_dict[avp]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "patient_cl_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec_df.class_label.tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "avp_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec_df[spec_df.rg_bins == spec_df.rg_bin_target].pred_score.tolist()",
                            "Call"
                        ],
                        [
                            "avp_scores + [0.0] * (len(patient_cl_labels) - len(avp_scores))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "average_precision_score_792": {
                "y_true": {
                    "value": "fold_df.class_label.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "fold_df.pred_score.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_794": {
                "y_true": {
                    "value": "fold_df.class_label.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "fold_df.pred_score.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_266": {
                "data": {
                    "value": "[b_res_dict[l_name] for b_res_dict in batch_res_dicts if l_name in b_res_dict.keys()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "custom_extensions/nms/nms.py": {
        "torch": {
            "empty_67": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "custom_extensions/nms/setup.py": {
        "torch": {}
    },
    "custom_extensions/roi_align/2D/setup.py": {
        "torch": {}
    },
    "custom_extensions/roi_align/3D/setup.py": {
        "torch": {}
    },
    "custom_extensions/roi_align/roi_align.py": {
        "torch": {}
    },
    "exec.py": {
        "torch": {
            "AdamW_54": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "utils.parse_params_for_optim(net, weight_decay=cf.weight_decay, exclude_from_wd=cf.exclude_from_wd)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cf.learning_rate[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_61": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(utils.parse_params_for_optim(net, weight_decay=cf.weight_decay, exclude_from_wd=cf.exclude_from_wd), lr=cf.learning_rate[0])",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(utils.parse_params_for_optim(net, weight_decay=cf.weight_decay), lr=cf.learning_rate[0], momentum=0.3)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "cf.scheduling_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "cf.lr_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "cf.scheduling_patience",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "utils.parse_params_for_optim(net, weight_decay=cf.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cf.learning_rate[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__103": {
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cf.clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "inference_analysis.py": {
        "torch": {
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_142": {
                "f": {
                    "value": "weight_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_paths[rank]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/backbone.py": {
        "torch": {
            "Sequential_181": {
                "variable": {
                    "value": "self.C2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*C2_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.C3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*C3_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.C4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*C4_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_205": {
                "variable": {
                    "value": "self.C5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*C5_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.C0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(len(cf.channels), sf, ks=3, pad=1, norm=cf.norm, relu=relu_enc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_214": {
                "variable": {
                    "value": "self.C6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*C6_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_52": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_66": {
                "variable": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_108": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_267": {
                "input": {
                    "value": "p5_pre_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P5_conv1(c5_out) + F.interpolate(p6_pre_out, scale_factor=2)",
                            "BinOp"
                        ],
                        [
                            "self.P5_conv1(c5_out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_268": {
                "input": {
                    "value": "p4_pre_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P4_conv1(c4_out) + F.interpolate(p5_pre_out, scale_factor=2)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_269": {
                "input": {
                    "value": "p3_pre_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P3_conv1(c3_out) + F.interpolate(p4_pre_out, scale_factor=2)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_44": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_68": {
                "variable": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_174": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_175": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_263": {
                "input": {
                    "value": "p6_pre_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P6_conv1(c6_out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InstanceNorm3d_55": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm3d_57": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/detection_fpn.py": {
        "torch": {
            "from_numpy_103": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch['seg']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "seg_ohe",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mutils.get_one_hot_encoding(batch['seg'], self.cf.num_seg_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_132": {
                "variable": {
                    "value": "seg_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_final(out_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_137": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_final(out_features)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "seg[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.FloatTensor(self.cf.wce_weights).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "input": {
                    "value": "seg_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_173": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_final(out_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/detection_unet.py": {
        "torch": {
            "Sequential_183": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "c_gen(in_chans, bottleneck, kernel_size, pad=pad, norm=norm, relu=relu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skip_inp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_251": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size_m, stride=stride_pool) if self.dim == 2 else nn.MaxPool3d(kernel_size_m, stride=stride_pool)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_423": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_424": {
                "variable": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch['seg']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_425": {
                "variable": {
                    "value": "seg_ohe",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mutils.get_one_hot_encoding(batch['seg'], self.cf.num_seg_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_452": {
                "variable": {
                    "value": "seg_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_453": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_459": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "target": {
                    "value": "seg[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.FloatTensor(self.cf.wce_weights).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool2d_252": {
                "kernel_size": {
                    "value": "kernel_size_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel_size_m] * self.dim",
                            "BinOp"
                        ],
                        [
                            "(*kernel_size_m[:-1], 1)",
                            "Tuple"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2, 2, 1)",
                            "Tuple"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "MaxPool3d_252": {
                "kernel_size": {
                    "value": "kernel_size_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel_size_m] * self.dim",
                            "BinOp"
                        ],
                        [
                            "(*kernel_size_m[:-1], 1)",
                            "Tuple"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2, 2, 1)",
                            "Tuple"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "softmax_383": {
                "input": {
                    "value": "seg_logits.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_497": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/mrcnn.py": {
        "torch": {
            "nonzero_202": {
                "variable": {
                    "value": "pos_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_match == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_203": {
                "variable": {
                    "value": "neg_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_match == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "rpn_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_class(x)",
                            "Call"
                        ],
                        [
                            "rpn_class_logits.permute(*axes)",
                            "Call"
                        ],
                        [
                            "rpn_class_logits.contiguous()",
                            "Call"
                        ],
                        [
                            "rpn_class_logits.view(x.size()[0], -1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.linear_bbox",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cf.end_filts * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cf.head_classes * 2 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_167": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_209": {
                "variable": {
                    "value": "pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_class_logits[pos_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.LongTensor([1] * pos_indices.shape[0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_219": {
                "variable": {
                    "value": "roi_probs_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_class_logits[neg_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_221": {
                "variable": {
                    "value": "neg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_neg[neg_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.LongTensor([0] * neg_ix.shape[0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_242": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_match == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_242": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_248": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_pred_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_pred_deltas[indices]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_target_deltas[:rpn_pred_deltas.size()[0], :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_266": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mrcnn_pred_deltas[positive_roi_ix, positive_roi_class_ids, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mrcnn_target_deltas[positive_roi_ix, :].detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_287": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_masks[positive_ix, positive_class_ids, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_masks[positive_ix, :, :].detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_300": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_class_ids.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(1 - scores, scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_344": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mrcnn_cl_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_394": {
                "variable": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.np_anchors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_430": {
                "variable": {
                    "value": "batch_ixs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_normed_props.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_430": {
                "variable": {
                    "value": "batch_ixs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_433": {
                "variable": {
                    "value": "self.rpn_rois_batch_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rpn_rois, batch_ixs.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_447": {
                "variable": {
                    "value": "mrcnn_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bboxes_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "mrcnn_class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "class_logits_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_449": {
                "variable": {
                    "value": "mrcnn_regressions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regressions_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_459": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(scale[:self.cf.dim * 2] + [1])[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_638": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).cuda().float()",
                            "Call"
                        ],
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_748": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).cuda().float()",
                            "Call"
                        ],
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.linear_regressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cf.end_filts * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cf.head_classes * cf.regression_n_features",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.linear_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cf.end_filts * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cf.head_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_161": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cf.end_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cf.end_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_163": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cf.end_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cf.end_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_319": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[positive_roi_ix, positive_roi_class_ids]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_321": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[positive_roi_ix, positive_roi_class_ids]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[positive_roi_ix].detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_674": {
                "variable": {
                    "value": "rpn_match_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rpn_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([-1] * self.np_anchors.shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_675": {
                "variable": {
                    "value": "rpn_target_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rpn_target_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rpn_target_deltas).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.linear_regressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cf.end_filts * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cf.head_classes * len(cf.bin_labels)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_165": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_240": {
                "input": {
                    "value": "rpn_match == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_261": {
                "input": {
                    "value": "target_class_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_262": {
                "input": {
                    "value": "target_class_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_280": {
                "input": {
                    "value": "target_class_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_283": {
                "input": {
                    "value": "target_class_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_314": {
                "input": {
                    "value": "target_class_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_421": {
                "tensors": {
                    "value": "list(o)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_441": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_463": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_120": {
                "*size": {
                    "value": "(x.shape[0], cf.head_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "(x.shape[0], cf.head_classes * 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_313": {
                "input": {
                    "value": "target_class_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "models/retina_net.py": {
        "torch": {
            "nonzero_166": {
                "variable": {
                    "value": "pos_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_matches > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_167": {
                "variable": {
                    "value": "neg_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_matches == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_253": {
                "variable": {
                    "value": "pos_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_matches > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_253": {
                "variable": {
                    "value": "pos_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_254": {
                "variable": {
                    "value": "neg_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_matches == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_254": {
                "variable": {
                    "value": "neg_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "target_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(anchor_matches[pos_indices].long(), torch.LongTensor([0] * neg_indices.shape[0]).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "non_neutral_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_indices, neg_indices)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_259": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_pred_logits[non_neutral_indices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "take_266": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(class_pred_logits[non_neutral_indices], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.take(q, target_locs_flat)",
                            "Call"
                        ]
                    ]
                },
                "index": {
                    "value": "target_locs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.shape[1] * torch.arange(q.shape[0]).cuda() + target_classes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_268": {
                "variable": {
                    "value": "FL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(class_pred_logits[non_neutral_indices], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.take(q, target_locs_flat)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_295": {
                "variable": {
                    "value": "keep_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((keep_ix / fg_probs.shape[1]).unsqueeze(1), (keep_ix % fg_probs.shape[1]).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_303": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "pre_nms_scores.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_306": {
                "variable": {
                    "value": "std_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.reshape(cf.rpn_bbox_std_dev, [1, cf.dim * 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_307": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_313": {
                "variable": {
                    "value": "pre_nms_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refined_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mutils.apply_box_deltas_2D(pre_nms_anchors / scale, pre_nms_deltas * std_dev) * scale if cf.dim == 2 else mutils.apply_box_deltas_3D(pre_nms_anchors / scale, pre_nms_deltas * std_dev) * scale",
                            "IfExp"
                        ],
                        [
                            "mutils.clip_to_window(cf.window, refined_rois)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_346": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pre_nms_rois[keep], pre_nms_batch_ixs[keep].unsqueeze(1).float(), pre_nms_class_ids[keep].unsqueeze(1).float(), pre_nms_scores[keep].unsqueeze(1), pre_nms_regressions[keep])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_174": {
                "variable": {
                    "value": "pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_pred_logits[pos_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_pos.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_184": {
                "variable": {
                    "value": "roi_probs_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_pred_logits[neg_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_186": {
                "variable": {
                    "value": "neg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_neg[neg_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.LongTensor([0] * neg_ix.shape[0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_207": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_matches > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_207": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_214": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_deltas[indices]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_deltas[:pred_deltas.shape[0], :].detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_229": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_matches > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_229": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_521": {
                "variable": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.np_anchors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_577": {
                "variable": {
                    "value": "batch_ixs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "class_logits.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_577": {
                "variable": {
                    "value": "batch_ixs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_578": {
                "variable": {
                    "value": "flat_class_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits.view(-1, class_logits.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_689": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(batch['data']).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_776": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_235": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[indices]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_237": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[indices]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[:pred.shape[0]].detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_573": {
                "variable": {
                    "value": "rg_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(selected_fmaps[0].shape[0], n_feats, self.cf.regression_n_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_720": {
                "variable": {
                    "value": "anchor_class_match",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchor_class_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([-1] * self.np_anchors.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(anchor_class_match).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_721": {
                "variable": {
                    "value": "anchor_target_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchor_target_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(anchor_target_deltas).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_722": {
                "variable": {
                    "value": "anchor_target_rgs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchor_target_rgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(anchor_target_rgs).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_747": {
                "variable": {
                    "value": "seg_loss_ce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.final_conv(fpn_outs[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "target": {
                    "value": "var_seg[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_265": {
                "start": {
                    "value": "q.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_316": {
                "input": {
                    "value": "pre_nms_batch_ixs == b",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_206": {
                "input": {
                    "value": "anchor_matches > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_323": {
                "input": {
                    "value": "bix_class_ids == class_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_341": {
                "tensors": {
                    "value": "(batch_keep, b_keep)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_562": {
                "tensors": {
                    "value": "list(o)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_564": {
                "tensors": {
                    "value": "list(o)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_228": {
                "input": {
                    "value": "anchor_matches > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_335": {
                "tensors": {
                    "value": "(b_keep, class_keep)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_567": {
                "tensors": {
                    "value": "list(o)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_746": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.final_conv(fpn_outs[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_532": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_659": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.final_conv(fpn_outs[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "predictor.py": {
        "torch": {
            "mean_522": {
                "variable": {
                    "value": "results_dict[torch_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([d['torch_loss'] for d in chunk_dicts])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_872": {
                "f": {
                    "value": "weight_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_877": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_463": {
                "f": {
                    "value": "last_state_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.cf.fold_dir, 'last_state.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_522": {
                "tensors": {
                    "value": "[d['torch_loss'] for d in chunk_dicts]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "unittests.py": {
        "torch": {
            "tensor_325": {
                "variable": {
                    "value": "keep_numpy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mutils.nms_numpy(boxes, scores, threshold)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_328": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(list(zip(lower_y, lower_x, upper_y, upper_x, lower_z, upper_z)))",
                            "Call"
                        ],
                        [
                            "np.concatenate((boxes, np.array([[0.0, 0.0, h, w, 0, d]])))",
                            "Call"
                        ],
                        [
                            "np.array(list(zip(lower_y, lower_x, upper_y, upper_x)))",
                            "Call"
                        ],
                        [
                            "np.concatenate((boxes, np.array([[0.0, 0.0, h, w]])))",
                            "Call"
                        ],
                        [
                            "boxes / divisor",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(boxes).type(torch.float32)",
                            "Call"
                        ],
                        [
                            "boxes.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 1.0, 5.0, 5.0]]).cuda() / exp",
                            "BinOp"
                        ],
                        [
                            "torch.cat((ind.unsqueeze(1), boxes), dim=1)",
                            "Call"
                        ],
                        [
                            "batch_boxes[b]",
                            "Subscript"
                        ],
                        [
                            "boxes.type(torch.int)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_329": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(count + 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scores).type(torch.float32)",
                            "Call"
                        ],
                        [
                            "scores.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_430": {
                "variable": {
                    "value": "fmap",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "exp ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_430": {
                "variable": {
                    "value": "fmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_433": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] * len(boxes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_436": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ind.unsqueeze(1), boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "boxes_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes, torch.tensor([[-1.0, 1.0]] * len(boxes)).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_448": {
                "variable": {
                    "value": "expected_res",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[14.0, 16.0], [26.0, 28.0]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_450": {
                "variable": {
                    "value": "expected_res_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[[14.0], [16.0]], [[26.0], [28.0]]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_364": {
                "variable": {
                    "value": "fmap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(batch_boxes))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "all_452": {
                "input": {
                    "value": "aligned == expected_res",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_453": {
                "input": {
                    "value": "aligned_3d == expected_res_3d",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "rand_374": {
                "variable": {
                    "value": "fmap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(batch_boxes))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_387": {
                "ndarray": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generate_boxes(5, dim=dim, h=h, w=w, on_grid=True, seed=np.random.randint(50))[0]",
                            "Subscript"
                        ],
                        [
                            "[torch.from_numpy(rois).type(dtype=torch.float32).cuda()]",
                            "List"
                        ],
                        [
                            "generate_boxes(5, dim=dim, h=h, w=w, d=d, on_grid=True, seed=np.random.randint(50), normalize=False)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_432": {
                "data": {
                    "value": "[[1.0, 1.0, 5.0, 5.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_435": {
                "data": {
                    "value": "[y_exp, x_exp, y_exp, x_exp]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_477": {
                "data": {
                    "value": "batch_el_boxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_484": {
                "variable": {
                    "value": "roi_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "roi_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['roi_masks'][b]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(roi_masks).cuda().type(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_485": {
                "variable": {
                    "value": "box_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "roi_masks.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_485": {
                "variable": {
                    "value": "box_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_488": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tv.ops.roi_align(roi_masks, [boxes], cf.mask_shape)",
                            "Call"
                        ],
                        [
                            "masks.squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.round(masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_494": {
                "variable": {
                    "value": "masks_own",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks_own",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ra_ext.roi_align_2d(roi_masks, torch.cat((box_ids, boxes), dim=1), cf.mask_shape)",
                            "Call"
                        ],
                        [
                            "masks_own.squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.round(masks_own)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_440": {
                "data": {
                    "value": "[[-1.0, 1.0]] * len(boxes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_489": {
                "tensors": {
                    "value": "(box_ids, boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataloader_utils.py": {
        "torch": {}
    },
    "utils/exp_utils.py": {
        "torch": {
            "load_684": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_254": {
                "variable": {
                    "value": "self.tboard",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(log_dir, 'tboard')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_494": {
                "ndarray": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_502": {
                "ndarray": {
                    "value": "box_imgs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_617": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': net.state_dict(), 'optimizer': optimizer.state_dict(), 'model_index': self.model_index}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.cf.fold_dir, 'last_state.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_594": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.cf.fold_dir, name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_device_name_277": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            },
            "get_device_name_279": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            },
            "memory_allocated_388": {
                "device": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "memory_cached_390": {
                "device": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/model_utils.py": {
        "torch": {
            "log_236": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_height / height",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_237": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_width / width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_238": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dy, dx, dh, dw]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_286": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scipy.ndimage.zoom(mask, zoom_factor, order=1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(mask, scale_factor=zoom_factor)",
                            "Call"
                        ],
                        [
                            "mask[0][0]",
                            "Subscript"
                        ],
                        [
                            "scipy.ndimage.zoom(mask, zoom_factor, order=1).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "zoom_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i / j for (i, j) in zip(out_zoom, mask.shape)]",
                            "ListComp"
                        ],
                        [
                            "[i / j for (i, j) in zip(out_zoom, mask.shape)]",
                            "ListComp"
                        ],
                        [
                            "[i / j for (i, j) in zip(out_zoom, mask.shape)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "zeros_291": {
                "variable": {
                    "value": "full_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "image_shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_384": {
                "variable": {
                    "value": "std_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.rpn_bbox_std_dev[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_385": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_455": {
                "variable": {
                    "value": "batch_normalized_props",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_normalized_props",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_normalized_props)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_530": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pooled, dim=0)",
                            "Call"
                        ],
                        [
                            "pooled[box_to_level, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_534": {
                "variable": {
                    "value": "box_to_level",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_to_level",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(box_to_level, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_537": {
                "variable": {
                    "value": "(_, box_to_level)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_to_level",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(box_to_level, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_627": {
                "variable": {
                    "value": "class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(class_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_636": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "class_ids.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_645": {
                "variable": {
                    "value": "std_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.reshape(cf.rpn_bbox_std_dev, [1, cf.dim * 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_646": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_652": {
                "variable": {
                    "value": "refined_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refined_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_box_deltas_2D(rois, deltas_specific * std_dev) * scale if cf.dim == 2 else apply_box_deltas_3D(rois, deltas_specific * std_dev) * scale",
                            "IfExp"
                        ],
                        [
                            "clip_to_window(cf.window, refined_rois)",
                            "Call"
                        ],
                        [
                            "torch.round(refined_rois)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_705": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[refined_rois[keep], batch_ixs[keep].unsqueeze(1)]",
                            "List"
                        ],
                        [
                            "output + [regressions[keep]]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_757": {
                "variable": {
                    "value": "std_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.bbox_std_dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1081": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1116": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y1, x1, y2, x2, z1, z2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1126": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes[:, 0].clamp(float(window[0]), float(window[2])), boxes[:, 1].clamp(float(window[1]), float(window[3])), boxes[:, 2].clamp(float(window[0]), float(window[2])), boxes[:, 3].clamp(float(window[1]), float(window[3]))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1138": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes[:, 0].clamp(float(window[0]), float(window[2])), boxes[:, 1].clamp(float(window[1]), float(window[3])), boxes[:, 2].clamp(float(window[0]), float(window[2])), boxes[:, 3].clamp(float(window[1]), float(window[3])), boxes[:, 4].clamp(float(window[4]), float(window[5])), boxes[:, 5].clamp(float(window[4]), float(window[5]))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1200": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y1.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_1239": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y1.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_1494": {
                "variable": {
                    "value": "first_element",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[True]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_1497": {
                "variable": {
                    "value": "unique_bool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(first_element, unique_bool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1502": {
                "variable": {
                    "value": "aux",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor1, tensor2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1522": {
                "variable": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(poolsize * int(negative_count), order.size()[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_1522": {
                "variable": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_1525": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "pool_indices.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_246": {
                "variable": {
                    "value": "dd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_depth / depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_247": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dy, dx, dz, dh, dw, dd]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_698": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_740": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([h, w, h, w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_743": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([h, w, h, w, z, z])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_762": {
                "variable": {
                    "value": "gt_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_gt_masks[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_763": {
                "variable": {
                    "value": "gt_class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_gt_class_ids[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_775": {
                "variable": {
                    "value": "batch_element_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_proposals[:, -1] == b",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_775": {
                "variable": {
                    "value": "batch_element_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_862": {
                "variable": {
                    "value": "target_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_863": {
                "variable": {
                    "value": "target_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_864": {
                "variable": {
                    "value": "target_class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_class_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_870": {
                "tensors": {
                    "value": "sample_negative_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_871": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "cf.dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_872": {
                "variable": {
                    "value": "target_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_deltas, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_873": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "*cf.mask_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_874": {
                "variable": {
                    "value": "target_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_masks, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_875": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_876": {
                "variable": {
                    "value": "target_class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_class_ids, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_1043": {
                "input": {
                    "value": "non_nans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas == deltas",
                            "Compare"
                        ],
                        [
                            "anchors == anchors",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "height == height",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "result == result",
                            "Compare"
                        ]
                    ]
                }
            },
            "exp_1055": {
                "input": {
                    "value": "torch.clamp(deltas[:, 2], max=6.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_1056": {
                "input": {
                    "value": "torch.clamp(deltas[:, 3], max=6.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_1060": {
                "input": {
                    "value": "non_nans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas == deltas",
                            "Compare"
                        ],
                        [
                            "anchors == anchors",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "height == height",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "result == result",
                            "Compare"
                        ]
                    ]
                }
            },
            "all_1069": {
                "input": {
                    "value": "non_nans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas == deltas",
                            "Compare"
                        ],
                        [
                            "anchors == anchors",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "height == height",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "result == result",
                            "Compare"
                        ]
                    ]
                }
            },
            "all_1073": {
                "input": {
                    "value": "non_nans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas == deltas",
                            "Compare"
                        ],
                        [
                            "anchors == anchors",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "height == height",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "result == result",
                            "Compare"
                        ]
                    ]
                }
            },
            "all_1084": {
                "input": {
                    "value": "non_nans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas == deltas",
                            "Compare"
                        ],
                        [
                            "anchors == anchors",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "height == height",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "result == result",
                            "Compare"
                        ]
                    ]
                }
            },
            "exp_1106": {
                "input": {
                    "value": "deltas[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_1107": {
                "input": {
                    "value": "deltas[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_1108": {
                "input": {
                    "value": "deltas[:, 5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "all_1212": {
                "input": {
                    "value": "iou <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_1450": {
                "variable": {
                    "value": "clusters",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "clusters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unique_1451": {
                "variable": {
                    "value": "uniques",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clusters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_1452": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(clusters == unique).sum() for unique in uniques]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_1454": {
                "variable": {
                    "value": "p_components",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(clusters == ii).unsqueeze(0) for ii in keep_uniques]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_126": {
                "input": {
                    "value": "((2 * intersect + smooth) / (denom + smooth))[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "all_402": {
                "input": {
                    "value": "non_nans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas == deltas",
                            "Compare"
                        ],
                        [
                            "anchors == anchors",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "height == height",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "result == result",
                            "Compare"
                        ]
                    ]
                }
            },
            "all_405": {
                "input": {
                    "value": "non_nans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas == deltas",
                            "Compare"
                        ],
                        [
                            "anchors == anchors",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "height == height",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "result == result",
                            "Compare"
                        ]
                    ]
                }
            },
            "all_426": {
                "input": {
                    "value": "non_nans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas == deltas",
                            "Compare"
                        ],
                        [
                            "anchors == anchors",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "height == height",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "result == result",
                            "Compare"
                        ]
                    ]
                }
            },
            "zeros_438": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_pad_boxes, boxes.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_439": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_440": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_pad_boxes, rpn_scores.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_441": {
                "variable": {
                    "value": "rpn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rpn_scores, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_447": {
                "input": {
                    "value": "non_nans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas == deltas",
                            "Compare"
                        ],
                        [
                            "anchors == anchors",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "height == height",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "result == result",
                            "Compare"
                        ]
                    ]
                }
            },
            "all_450": {
                "input": {
                    "value": "where",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalized_boxes <= 1",
                            "Compare"
                        ]
                    ]
                }
            },
            "from_numpy_765": {
                "variable": {
                    "value": "gt_regressions",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_gt_regressions[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_794": {
                "variable": {
                    "value": "negative_roi_bool",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([1] * proposals.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_798": {
                "variable": {
                    "value": "positive_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positive_roi_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor().cuda()",
                            "Call"
                        ],
                        [
                            "roi_iou_max >= (0.5 if cf.dim == 2 else 0.3)",
                            "Compare"
                        ]
                    ]
                }
            },
            "squeeze_798": {
                "variable": {
                    "value": "positive_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_800": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "positive_indices.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_821": {
                "variable": {
                    "value": "box_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "roi_masks.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_821": {
                "variable": {
                    "value": "box_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_839": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roi_align.roi_align_2d(roi_masks, torch.cat((box_ids, boxes), dim=1), cf.mask_shape)",
                            "Call"
                        ],
                        [
                            "roi_align.roi_align_3d(roi_masks, torch.cat((box_ids, boxes), dim=1), cf.mask_shape)",
                            "Call"
                        ],
                        [
                            "masks.squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.round(masks)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_853": {
                "variable": {
                    "value": "negative_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "negative_roi_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array([1] * proposals.shape[0])).cuda()",
                            "Call"
                        ],
                        [
                            "roi_iou_max < (0.1 if cf.dim == 2 else 0.01)",
                            "Compare"
                        ]
                    ]
                }
            },
            "squeeze_853": {
                "variable": {
                    "value": "negative_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_866": {
                "variable": {
                    "value": "target_regressions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_regressions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_883": {
                "variable": {
                    "value": "target_regressions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_regressions, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_886": {
                "variable": {
                    "value": "sample_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_positive_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "clamp_1055": {
                "input": {
                    "value": "deltas[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_1056": {
                "input": {
                    "value": "deltas[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_1195": {
                "input": {
                    "value": "b1_y1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_1196": {
                "input": {
                    "value": "b1_x1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_1197": {
                "input": {
                    "value": "b1_y2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_1198": {
                "input": {
                    "value": "b1_x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_1203": {
                "input": {
                    "value": "y2 - y1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_1233": {
                "input": {
                    "value": "b1_y1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_1234": {
                "input": {
                    "value": "b1_x1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_1235": {
                "input": {
                    "value": "b1_y2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_1236": {
                "input": {
                    "value": "b1_x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_1237": {
                "input": {
                    "value": "b1_z1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_1238": {
                "input": {
                    "value": "b1_z2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_1242": {
                "input": {
                    "value": "y2 - y1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_1468": {
                "variable": {
                    "value": "p_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "p_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(p_coords)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_132": {
                "input": {
                    "value": "((2 * intersect + smooth) / (denom + smooth))[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "all_419": {
                "input": {
                    "value": "non_nans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas == deltas",
                            "Compare"
                        ],
                        [
                            "anchors == anchors",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "boxes == boxes",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "height == height",
                            "Compare"
                        ],
                        [
                            "width == width",
                            "Compare"
                        ],
                        [
                            "result == result",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_453": {
                "tensors": {
                    "value": "(normalized_boxes, rpn_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_453": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_503": {
                "input": {
                    "value": "ix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(batch_scores.shape[0])",
                            "Call"
                        ],
                        [
                            "roi_level == level",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(ix)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "ix + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nonzero_657": {
                "input": {
                    "value": "keep_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_scores >= cf.model_min_confidence",
                            "Compare"
                        ]
                    ]
                }
            },
            "nonzero_659": {
                "input": {
                    "value": "keep_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_scores >= cf.model_min_confidence",
                            "Compare"
                        ]
                    ]
                }
            },
            "zeros_880": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_882": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "cf.regression_n_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_888": {
                "variable": {
                    "value": "sample_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_negative_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_889": {
                "variable": {
                    "value": "target_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "cf.dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_890": {
                "variable": {
                    "value": "target_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "*cf.mask_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_891": {
                "variable": {
                    "value": "target_class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nonzero_1458": {
                "variable": {
                    "value": "mask_ixs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm.tqdm(rois[b])",
                            "Call"
                        ],
                        [
                            "p_components",
                            "variable"
                        ]
                    ]
                }
            },
            "tensor_516": {
                "data": {
                    "value": "[y_exp, x_exp, y_exp, x_exp]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_518": {
                "tensors": {
                    "value": "(ind.unsqueeze(1).float(), level_boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_522": {
                "data": {
                    "value": "[y_exp, x_exp, y_exp, x_exp, z_exp, z_exp]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_524": {
                "tensors": {
                    "value": "(ind.unsqueeze(1).float(), level_boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_667": {
                "input": {
                    "value": "pre_nms_batch_ixs == b",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_769": {
                "ndarray": {
                    "value": "batch_gt_boxes[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_787": {
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((boxes1.shape[0], boxes2.shape[0]))",
                            "Call"
                        ],
                        [
                            "np.zeros((boxes1.shape[0], boxes2.shape[0]))",
                            "Call"
                        ],
                        [
                            "bbox_overlaps_2D(proposals, gt_boxes)",
                            "Call"
                        ],
                        [
                            "bbox_overlaps_3D(proposals, gt_boxes)",
                            "Call"
                        ],
                        [
                            "iou.view(boxes2_repeat, boxes1_repeat)",
                            "Call"
                        ],
                        [
                            "iou.view(boxes2_repeat, boxes1_repeat)",
                            "Call"
                        ],
                        [
                            "compute_overlaps(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_797": {
                "input": {
                    "value": "positive_roi_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor().cuda()",
                            "Call"
                        ],
                        [
                            "roi_iou_max >= (0.5 if cf.dim == 2 else 0.3)",
                            "Compare"
                        ]
                    ]
                }
            },
            "max_807": {
                "input": {
                    "value": "positive_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "overlaps[positive_indices, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_852": {
                "input": {
                    "value": "negative_roi_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array([1] * proposals.shape[0])).cuda()",
                            "Call"
                        ],
                        [
                            "roi_iou_max < (0.1 if cf.dim == 2 else 0.01)",
                            "Compare"
                        ]
                    ]
                }
            },
            "flip_1453": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_674": {
                "input": {
                    "value": "bix_class_ids == class_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_693": {
                "tensors": {
                    "value": "(batch_keep, b_keep)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_825": {
                "data": {
                    "value": "[y_exp, x_exp, y_exp, x_exp]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_827": {
                "tensors": {
                    "value": "(box_ids, boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_831": {
                "data": {
                    "value": "[y_exp, x_exp, y_exp, x_exp, z_exp, z_exp]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_833": {
                "tensors": {
                    "value": "(box_ids, boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_894": {
                "variable": {
                    "value": "target_regressions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_896": {
                "variable": {
                    "value": "target_regressions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "cf.regression_n_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_444": {
                "tensors": {
                    "value": "(boxes, rpn_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_686": {
                "tensors": {
                    "value": "(b_keep, class_keep)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_1461": {
                "input": {
                    "value": "mask_ixs[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_1462": {
                "input": {
                    "value": "mask_ixs[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_1463": {
                "input": {
                    "value": "mask_ixs[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_1465": {
                "input": {
                    "value": "mask_ixs[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sort_1453": {
                "input": {
                    "value": "counts[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_1465": {
                "input": {
                    "value": "mask_ixs[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log2_490": {
                "input": {
                    "value": "torch.sqrt(h * w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_490": {
                "input": {
                    "value": "h * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}