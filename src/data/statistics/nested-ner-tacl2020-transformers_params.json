{
    "model/sequence_labeling.py": {
        "torch": {
            "Dropout2d_45": {
                "p": {
                    "value": "lstm_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "target_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple([target_each.label.unsqueeze(0) for target_each in target[label]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_92": {
                "mode": {
                    "value": "self.fine_tune and torch.is_grad_enabled()",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "sequence_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(sequence_output[2][-self.bert_layers:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_102": {
                "variable": {
                    "value": "input[i, j, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence_output[i, subtokens_tuple[0]:subtokens_tuple[1], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_grad_enabled_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "module/crf.py": {
        "torch": {
            "arange_143": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "indices_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.indices_bs.unsqueeze(0), self.indices_is.repeat((length - 2, 1)), self.indices_es.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_238": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_248": {
                "variable": {
                    "value": "(_, back_pointer[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "energy[:, 0, self.index_bos, :self.index_bos]",
                            "Subscript"
                        ],
                        [
                            "self.trans_matrix.data[:self.index_bos, self.index_eos].unsqueeze(0) + pi",
                            "BinOp"
                        ],
                        [
                            "pi_1.clone()",
                            "Call"
                        ],
                        [
                            "e_t + pi_1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "indices_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.indices_bs.unsqueeze(0), self.indices_is.repeat((length - 2, 1)), self.indices_es.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_298": {
                "variable": {
                    "value": "(_, back_pointer[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "energy[:, 0, self.index_bos, :self.index_bos]",
                            "Subscript"
                        ],
                        [
                            "self.trans_matrix.data[:self.index_bos, self.index_eos].unsqueeze(0) + pi",
                            "BinOp"
                        ],
                        [
                            "pi_1.clone()",
                            "Call"
                        ],
                        [
                            "e_t + pi_1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "data": {
                    "value": "Tensor(self.num_labels, self.num_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_245": {
                "variable": {
                    "value": "(pi, pointer[t])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "energy_transpose[t] + pi.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_291": {
                "variable": {
                    "value": "(pi_1, pointer_1[t])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "e_t + pi_1.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_292": {
                "variable": {
                    "value": "(pi_3, pointer_3[t, indices_3[t]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "e_t[:, indices_3[t]] + pi.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_154": {
                "variable": {
                    "value": "partition",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_energy + partition.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_201": {
                "variable": {
                    "value": "partition_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_energy + partition_1.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_202": {
                "variable": {
                    "value": "partition_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_energy[:, indices_3[t]] + partition.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_211": {
                "input": {
                    "value": "partition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "curr_energy[:, self.index_bos, :]",
                            "Subscript"
                        ],
                        [
                            "torch.logsumexp(curr_energy + partition.unsqueeze(2), dim=1)",
                            "Call"
                        ],
                        [
                            "curr_energy + partition_1",
                            "BinOp"
                        ],
                        [
                            "partition_1.clone()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_160": {
                "input": {
                    "value": "self.trans_matrix.data[:, self.index_eos].unsqueeze(0) + partition",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "module/dropout.py": {
        "torch": {
            "dropout2d_59": {
                "input": {
                    "value": "input.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_59": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "module/function/variational_rnn.py": {
        "torch": {
            "add_18": {
                "variable": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.baddbmm(b_ih.unsqueeze(1), input, w_ih)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.baddbmm(b_hh.unsqueeze(1), hx, w_hh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_22": {
                "variable": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_23": {
                "variable": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_24": {
                "variable": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_25": {
                "variable": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_27": {
                "variable": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(forgetgate, cx)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.mul(ingate, cellgate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_28": {
                "variable": {
                    "value": "hy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tanh(cy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "baddbmm_18": {
                "input": {
                    "value": "b_hh.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch1": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hx.expand(4, *hx.size()) if noise_hidden is None else hx.unsqueeze(0) * noise_hidden",
                            "IfExp"
                        ]
                    ]
                },
                "batch2": {
                    "value": "w_hh",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mul_27": {
                "input": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_28": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(torch.mul(forgetgate, cx), torch.mul(ingate, cellgate))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_83": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(all_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "input.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(next_hidden)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "next_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(next_hidden)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_171": {
                "tensors": {
                    "value": "next_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "module/variational_rnn.py": {
        "torch": {
            "Parameter_203": {
                "data": {
                    "value": "Tensor(4, input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_204": {
                "data": {
                    "value": "Tensor(4, hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_206": {
                "data": {
                    "value": "Tensor(4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_207": {
                "data": {
                    "value": "Tensor(4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "save_283": {
                "obj": {
                    "value": "best_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "this_model_path + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training/adabound.py": {
        "torch": {
            "full_like_115": {
                "variable": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_78": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_83": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_100": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "training/utils.py": {
        "torch": {
            "StepLR_42": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdaBound(parameters, lr=lr if lr is not None else 0.001, weight_decay=l2 if l2 is not None else 0.0)",
                            "Call"
                        ],
                        [
                            "optim.SGD(parameters, lr=lr if lr is not None else 0.1, weight_decay=l2 if l2 is not None else 0.0)",
                            "Call"
                        ],
                        [
                            "optim.Adam(parameters, lr=lr if lr is not None else 0.001, weight_decay=l2 if l2 is not None else 0.0)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr if lr is not None else 0.1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "l2 if l2 is not None else 0.0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_46": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdaBound(parameters, lr=lr if lr is not None else 0.001, weight_decay=l2 if l2 is not None else 0.0)",
                            "Call"
                        ],
                        [
                            "optim.SGD(parameters, lr=lr if lr is not None else 0.1, weight_decay=l2 if l2 is not None else 0.0)",
                            "Call"
                        ],
                        [
                            "optim.Adam(parameters, lr=lr if lr is not None else 0.001, weight_decay=l2 if l2 is not None else 0.0)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "lr_patience if lr_patience is not None else 5",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr if lr is not None else 0.001",
                    "type": "IfExp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "l2 if l2 is not None else 0.0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_51": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdaBound(parameters, lr=lr if lr is not None else 0.001, weight_decay=l2 if l2 is not None else 0.0)",
                            "Call"
                        ],
                        [
                            "optim.SGD(parameters, lr=lr if lr is not None else 0.1, weight_decay=l2 if l2 is not None else 0.0)",
                            "Call"
                        ],
                        [
                            "optim.Adam(parameters, lr=lr if lr is not None else 0.001, weight_decay=l2 if l2 is not None else 0.0)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "lr_patience if lr_patience is not None else 3",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    }
}