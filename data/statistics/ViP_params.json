{
    "main.py": {
        "torch": {
            "CrossEntropyLoss_291": {
                "variable": {
                    "value": "validate_loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_101": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_model(args.model, pretrained=args.pretrained, num_classes=args.num_classes, drop_rate=args.drop, drop_connect_rate=args.drop_connect, drop_path_rate=args.drop_path, drop_block_rate=args.drop_block, global_pool=args.gp, bn_tf=args.bn_tf, bn_momentum=args.bn_momentum, bn_eps=args.bn_eps, checkpoint_path=args.initial_checkpoint, **model_params)",
                            "Call"
                        ],
                        [
                            "convert_splitbn_model(model, max(num_aug_splits, 2))",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=list(range(args.num_gpu))).cuda()",
                            "Call"
                        ],
                        [
                            "model.to(memory_format=torch.channels_last)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level='O1')",
                            "Call"
                        ],
                        [
                            "ApexDDP(model, delay_allreduce=True)",
                            "Call"
                        ],
                        [
                            "NativeDDP(model, device_ids=list(range(args.num_gpu)))",
                            "Call"
                        ],
                        [
                            "convert_syncbn_model(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(args.num_gpu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "synchronize_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_477": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_290": {
                "variable": {
                    "value": "train_loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_507": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__408": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/vip.py": {
        "torch": {}
    },
    "models/vip_layers.py": {
        "torch": {
            "Parameter_32": {
                "variable": {
                    "value": "self.rel_emb_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * h - 1, dim // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.rel_emb_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * w - 1, dim // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_36": {
                "variable": {
                    "value": "coords_h",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_37": {
                "variable": {
                    "value": "coords_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_56": {
                "variable": {
                    "value": "logits_h",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h w g c, h k c -> b h w g k",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q[..., 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_57": {
                "variable": {
                    "value": "logits_w",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h w g c, w k c -> b h w g k",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q[..., 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv1d_71": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.to_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.to_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.to_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_108": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b q g c, b k g c -> b q g k",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(q, 'b (qh qw) g (n c) -> b qh qw g n c', qh=self.h, qw=self.w, n=2)",
                            "Call"
                        ],
                        [
                            "apply_pos(q, qpos, self.num_heads)",
                            "Call"
                        ],
                        [
                            "self.norm_q(q)",
                            "Call"
                        ],
                        [
                            "self.to_q(q)",
                            "Call"
                        ],
                        [
                            "self.get_qkv(q, k, v, qpos, kpos)",
                            "Call"
                        ],
                        [
                            "rearrange(q, 'b n (g c) -> b n g c', g=self.num_heads)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_114": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(attn, 'b q g (kh kw) -> b q g kh kw', kh=self.h, kw=self.w)",
                            "Call"
                        ],
                        [
                            "attn * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.einsum('b q g c, b k g c -> b q g k', q, k)",
                            "Call"
                        ],
                        [
                            "rel_pos(q, attn)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask.bool(), value=float('-inf'))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask.bool(), value=0)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_117": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b q g k, b k g c -> b q g c",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearrange(attn, 'b q g (kh kw) -> b q g kh kw', kh=self.h, kw=self.w)",
                            "Call"
                        ],
                        [
                            "attn * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.einsum('b q g c, b k g c -> b q g k', q, k)",
                            "Call"
                        ],
                        [
                            "rel_pos(q, attn)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask.bool(), value=float('-inf'))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn.masked_fill(mask.bool(), value=0)",
                            "Call"
                        ],
                        [
                            "attn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(hidden_features) or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(hidden_features) or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_133": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "test_flops.py": {
        "torch": {
            "zeros_58": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "test_throughput.py": {
        "torch": {
            "zeros_74": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(args.test_batch_size, 3, 224, 224)",
                            "Tuple"
                        ],
                        [
                            "(args.test_batch_size, 3, 384, 384)",
                            "Tuple"
                        ],
                        [
                            "(args.test_batch_size, 3, 300, 300)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/distributed_utils.py": {
        "torch": {
            "device_count_16": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_64": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.device}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "set_device_18": {
                "device": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rank % num_gpus",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_59": {
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_47": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/ext_loader.py": {
        "torch": {}
    },
    "utils/flop_count/flop_count.py": {
        "torch": {}
    },
    "utils/flop_count/jit_analysis.py": {
        "torch": {}
    },
    "utils/init.py": {
        "torch": {}
    },
    "utils/loader.py": {
        "torch": {
            "DistributedSampler_75": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/sampler.py": {
        "torch": {
            "Generator_32": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_35": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}