{
    "art/cluster.py": {
        "sklearn": {
            "AgglomerativeClustering_314": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_320": {
                "variable": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                },
                "max_leaf_nodes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_27": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "t.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "abs_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "absset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AbsData(new_lb, new_ub, new_extra)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "split_safe_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "split_safe_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(split_safe_dists, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_138": {
                "variable": {
                    "value": "other_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(wl_safe_dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "wl_safe_dist.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "std_mean_293": {
                "variable": {
                    "value": "(std, mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sampled_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_fn(sampled_pts)",
                            "Call"
                        ],
                        [
                            "sampled_outs.view(*old_shape)",
                            "Call"
                        ],
                        [
                            "(sampled_outs - mean) / std",
                            "BinOp"
                        ],
                        [
                            "sampled_outs.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_350": {
                "variable": {
                    "value": "all_lbs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_lbs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(all_lbs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_351": {
                "variable": {
                    "value": "all_ubs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_ubs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(all_ubs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "all_extras",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_extras",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if batch_extra is None else []",
                            "IfExp"
                        ],
                        [
                            "torch.cat(all_extras, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "art/acas.py": {
        "torch": {
            "ones_190": {
                "variable": {
                    "value": "self.applicable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "AcasNetID.XS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "AcasNetID.YS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "variable": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.input_bounds",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_474": {
                "variable": {
                    "value": "self.all_linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_505": {
                "tensors": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_861": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_861": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_764": {
                "input": {
                    "value": "ws1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear1.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "ws2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear2.weight.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "equal_769": {
                "input": {
                    "value": "bs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear1.bias.data",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "bs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear2.bias.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_835": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_705": {
                "data": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_715": {
                "data": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "art/acas_prepare.py": {
        "torch": {
            "tensor_150": {
                "variable": {
                    "value": "in_lbs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[bound_mins]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "in_ubs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[bound_maxs]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "empty",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_228": {
                "variable": {
                    "value": "(train_inputs, train_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(dir, f'{str(nid)}-{mid}-train.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_229": {
                "variable": {
                    "value": "(test_inputs, test_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(dir, f'{str(nid)}-{mid}-test.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "in_lbs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[bound_mins]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "in_ubs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[bound_maxs]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "in_lbs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[bound_mins]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "in_ubs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[bound_maxs]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "empty",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_50": {
                "obj": {
                    "value": "(train_inputs, train_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(dir, f'{str(nid)}-orig-train.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_51": {
                "obj": {
                    "value": "(test_inputs, test_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(dir, f'{str(nid)}-orig-test.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "train_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_inputs, cat_inputs[:trainsize_cat, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_labels, cat_labels[:trainsize_cat, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "test_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(test_inputs, cat_inputs[trainsize_cat:trainsize_cat + testsize_cat, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(test_labels, cat_labels[trainsize_cat:trainsize_cat + testsize_cat, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "res_inputs[category]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(res_inputs[category], cat_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "res_labels[category]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(res_labels[category], cat_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "train_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_inputs, cat_inputs[:pivot, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_labels, cat_labels[:pivot, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "test_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(test_inputs, cat_inputs[pivot:, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(test_labels, cat_labels[pivot:, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "train_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_inputs, cat_inputs[:trainsize_cat, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_labels, cat_labels[:trainsize_cat, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "test_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(test_inputs, cat_inputs[trainsize_cat:trainsize_cat + testsize_cat, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(test_labels, cat_labels[trainsize_cat:trainsize_cat + testsize_cat, ...])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "(train_inputs, train_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_214": {
                "obj": {
                    "value": "(test_inputs, test_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_242": {
                "input": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((train_labels, cat_labels[:trainsize_cat, ...]), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat((train_labels, cat_labels[:pivot, ...]), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat((train_labels, cat_labels[:trainsize_cat, ...]), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "(net(train_inputs) * -1).argmax(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_243": {
                "input": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((test_labels, cat_labels[trainsize_cat:trainsize_cat + testsize_cat, ...]), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat((test_labels, cat_labels[pivot:, ...]), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat((test_labels, cat_labels[trainsize_cat:trainsize_cat + testsize_cat, ...]), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "(net(test_inputs) * -1).argmax(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_248": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "res_inputs[category]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(res_inputs[category], cat_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "res_labels[category]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(res_labels[category], cat_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "(train_inputs, train_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_124": {
                "obj": {
                    "value": "(test_inputs, test_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "art/bisecter.py": {
        "torch": {
            "zeros_like_453": {
                "variable": {
                    "value": "onehot_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_458": {
                "variable": {
                    "value": "lefts_ub",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "onehot_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(lb).byte().scatter_(-1, split_idxs, 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lb + ub) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_459": {
                "variable": {
                    "value": "rights_lb",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "onehot_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(lb).byte().scatter_(-1, split_idxs, 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lb + ub) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "t.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "abs_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "absset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AbsData(new_lb, new_ub, new_extra)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "split_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "split_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(split_grads, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "split_safe_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "split_safe_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(split_safe_dists, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_144": {
                "variable": {
                    "value": "other_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(wl_safe_dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "wl_safe_dist.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_82": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_dist.sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[new_lb, new_ub]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_421": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "art/collision.py": {
        "torch": {
            "zeros_109": {
                "variable": {
                    "value": "lbs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(input_vars)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "ubs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(input_vars)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_360": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(inputs).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_361": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(labels).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "bound_mins",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bound_mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(bound_mins)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "bound_maxs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bound_maxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(bound_maxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_77": {
                "input": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.bound_maxs - self.bound_mins) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.full_like(eps, avg_eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_276": {
                "variable": {
                    "value": "_layer_ws",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_layer_ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(_layer_ws, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "variable": {
                    "value": "_layer_bs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "_layer_bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(_layer_bs)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_like_77": {
                "input": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.bound_maxs - self.bound_mins) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "avg_eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps.mean().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_168": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.keys()",
                            "Call"
                        ],
                        [
                            "d.keys()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_locate_similar(mid)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_268": {
                "variable": {
                    "value": "w_row",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(last_layer_vars)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "art/demo.py": {
        "torch": {
            "tensor_189": {
                "variable": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[4.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "pivots",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pivots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[lb]",
                            "List"
                        ],
                        [
                            "[Tensor(v) for v in pivots]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(pivots, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(pivots).t()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_320": {
                "variable": {
                    "value": "pivots",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_338": {
                "variable": {
                    "value": "lbub",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(ins)",
                            "Call"
                        ],
                        [
                            "net(ins)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_363": {
                "variable": {
                    "value": "opti",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.input_bounds",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_117": {
                "variable": {
                    "value": "self.all_linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_335": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "splitted",
                            "variable"
                        ]
                    ]
                }
            },
            "DataLoader_386": {
                "variable": {
                    "value": "trainset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AbsData(boxes_lb, boxes_ub)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_214": {
                "data": {
                    "value": "[[0.0, 0.5], [2.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "data": {
                    "value": "[[2.5, 2.5], [5.0, 2.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_223": {
                "data": {
                    "value": "[[0.0, 0.5], [0.0, 1.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "data": {
                    "value": "[[5.0, 1.5], [5.0, 2.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "data": {
                    "value": "[[0.0, 0.5], [1.25, 0.5], [2.5, 0.5], [3.75, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "data": {
                    "value": "[[1.25, 2.5], [2.5, 2.5], [3.75, 2.5], [5.0, 2.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "data": {
                    "value": "[[0.0, 0.5], [0.0, 1.0], [0.0, 1.5], [0.0, 2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_250": {
                "data": {
                    "value": "[[5.0, 1.0], [5.0, 1.5], [5.0, 2.0], [5.0, 2.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "data": {
                    "value": "[[0.0, 0.5], [0.0, 0.5], [2.5, 1.5], [2.5, 1.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "data": {
                    "value": "[[2.5, 1.5], [2.5, 1.5], [5.0, 2.5], [5.0, 2.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_318": {},
            "no_grad_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_416": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_416": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "art/exp.py": {
        "torch": {
            "manual_seed_207": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_209": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_196": {
                "optimizer": {
                    "value": "opti",
                    "type": "variable",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "art/exp_acas.py": {
        "torch": {
            "Adam_140": {
                "variable": {
                    "value": "opti",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "variable": {
                    "value": "avg_res",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_252": {
                "variable": {
                    "value": "avg_res",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "(inputs, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(acas.ACAS_DIR, fname)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Softmax_52": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_53": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_193": {
                "variable": {
                    "value": "conc_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AcasPoints.load(nid, train=True, device=device)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_197": {
                "variable": {
                    "value": "abs_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "absset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp.AbsIns(curr_abs_lb, curr_abs_ub, curr_abs_bitmap)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_293": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "L1Loss_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "art/exp_collision.py": {
        "torch": {
            "Adam_154": {
                "variable": {
                    "value": "opti",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_304": {
                "variable": {
                    "value": "serial_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[layer.export() for layer in net]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "save_305": {
                "obj": {
                    "value": "serial_net.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(RES_DIR, f'trained-{tot_certified}-{final_accu:.4f}-model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_77": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_78": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_228": {
                "variable": {
                    "value": "conc_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c.CollisionData.load(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_233": {
                "variable": {
                    "value": "abs_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "absset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp.AbsIns(curr_abs_lb, curr_abs_ub, curr_abs_bitmap)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_334": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "clip_grad_norm__257": {
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "L1Loss_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "art/exp_vnn.py": {
        "torch": {
            "is_available_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_153": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "art/external_verifier.py": {
        "torch": {
            "tensor_140": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[c.inputs_normed for c in cexs]",
                            "ListComp"
                        ],
                        [
                            "[c.inputs for c in cexs]",
                            "ListComp"
                        ],
                        [
                            "[c.inputs for c in cexs]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_283": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[c.inputs_normed for c in cexs]",
                            "ListComp"
                        ],
                        [
                            "[c.inputs for c in cexs]",
                            "ListComp"
                        ],
                        [
                            "[c.inputs for c in cexs]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_273": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "art/prop.py": {
        "torch": {
            "max_343": {
                "variable": {
                    "value": "(res_lb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack((lb1, lb2), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_344": {
                "variable": {
                    "value": "(res_ub, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack((ub1, ub2), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_139": {
                "variable": {
                    "value": "orig_label",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nprops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(props)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_224": {
                "variable": {
                    "value": "all_lbs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shared_lbs, x_lbs, y_lbs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "all_ubs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shared_ubs, x_ubs, y_ubs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shared_labels, x_labels, y_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_279": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_304": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_305": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_330": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_331": {
                "variable": {
                    "value": "(mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "prod_36": {
                "input": {
                    "value": "torch.tensor(shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_275": {
                "variable": {
                    "value": "full_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(bitmap)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "*piece_dists.size()[1:]",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "piece_dists.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_280": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_300": {
                "variable": {
                    "value": "full_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(bitmap), *piece_dists.size()[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "piece_dists.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_326": {
                "variable": {
                    "value": "full_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(bitmap), *piece_dists.size()[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "piece_dists.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_343": {
                "tensors": {
                    "value": "(lb1, lb2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_344": {
                "tensors": {
                    "value": "(ub1, ub2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_377": {
                "variable": {
                    "value": "accu_lb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(accu_lb, left_lb.unsqueeze(dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_378": {
                "variable": {
                    "value": "accu_ub",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(accu_ub, left_ub.unsqueeze(dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_386": {
                "variable": {
                    "value": "accu_lb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(accu_lb, right_lb.unsqueeze(dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_387": {
                "variable": {
                    "value": "accu_ub",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(accu_ub, right_ub.unsqueeze(dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "x_lbs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_lbs[:i], rest_x_lbs, x_lbs[i + 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "x_ubs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_ubs[:i], rest_x_ubs, x_ubs[i + 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "x_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_labels[:i], rest_x_labels, x_labels[i + 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "y_lbs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_lbs[:j], rest_y_lbs, y_lbs[j + 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "y_ubs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_lbs[:j], rest_y_ubs, y_ubs[j + 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "y_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_labels[:j], rest_y_labels, y_labels[j + 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_220": {
                "tensors": {
                    "value": "shared_lbs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(shared_lbs, dim=0) if len(shared_lbs) > 0 else Tensor()",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_221": {
                "tensors": {
                    "value": "shared_ubs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(shared_ubs, dim=0) if len(shared_ubs) > 0 else Tensor()",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_222": {
                "tensors": {
                    "value": "shared_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(shared_labels, dim=0) if len(shared_labels) > 0 else Tensor().byte()",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_257": {
                "input": {
                    "value": "bitmap",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.ones_like(bitmap)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_257": {
                "input": {
                    "value": "bitmap",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lb.shape[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_176": {
                "input": {
                    "value": "new_label | shared_label",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "shared_label",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "art/utils.py": {
        "torch": {
            "rand_like_26": {
                "variable": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lb.repeat(K, *repeat_dims)",
                            "Call"
                        ],
                        [
                            "lb.unsqueeze(dim=1).expand(*new_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_48": {
                "variable": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lb.repeat(K, *repeat_dims)",
                            "Call"
                        ],
                        [
                            "lb.unsqueeze(dim=1).expand(*new_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_72": {
                "variable": {
                    "value": "all_vtxs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_vtxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_vtxs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "lbub",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lb, ub)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cartesian_prod_70": {
                "variable": {
                    "value": "vtxs",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*list(lbub)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_available_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_allocated_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_cached_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_cached_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/demo_maxpool_instability.py": {
        "torch": {
            "tensor_74": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.12]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.12]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.101]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "fc1.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.9624], [-0.6785], [0.9087]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "fc1.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.3255, 0.7965, 0.6321]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "fc2.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.6859, -0.4253]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_23": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_134": {
                "obj": {
                    "value": "[fc1, fc2, viol_in]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "error_ctx.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/inspect_refinement_choices.py": {
        "torch": {
            "load_28": {
                "variable": {
                    "value": "(batch_lb, batch_ub, batch_extra, batch_grad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "file_dir / 'prop2-net3-3-iter100-abs.pyt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "refined_lb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lhs_lb, rhs_lb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "refined_ub",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lhs_ub, rhs_ub]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_75": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_acas.py": {
        "torch": {
            "tensor_77": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[-2, -1], [-1, 1]], [[-0.5, 0.5], [1.5, 3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[-1.5, 0]], [[-1.75, -0.5]]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "randn_114": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "min_115": {
                "variable": {
                    "value": "(inputs_lb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[r1, r2]], device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[-2, -1], [-1, 1]], [[-0.5, 0.5], [1.5, 3]]], device=device)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 2, 2, device=device)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 2, 2, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_116": {
                "variable": {
                    "value": "(inputs_ub, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[r1, r2]], device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[-2, -1], [-1, 1]], [[-0.5, 0.5], [1.5, 3]]], device=device)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 2, 2, device=device)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 2, 2, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MSELoss_119": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_144": {
                "variable": {
                    "value": "opti",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_180": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_17": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[r1, r2]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "equal_107": {
                "input": {
                    "value": "outs_lb",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "answer_lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "answer[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_108": {
                "input": {
                    "value": "outs_ub",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "answer_ub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "answer[:, :, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_124": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 - lows",
                            "BinOp"
                        ],
                        [
                            "F.relu(distances)",
                            "Call"
                        ],
                        [
                            "0 - lows",
                            "BinOp"
                        ],
                        [
                            "F.relu(distances)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_125": {
                "variable": {
                    "value": "prop",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 - lows",
                            "BinOp"
                        ],
                        [
                            "F.relu(distances)",
                            "Call"
                        ],
                        [
                            "0 - lows",
                            "BinOp"
                        ],
                        [
                            "F.relu(distances)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_187": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 - lows",
                            "BinOp"
                        ],
                        [
                            "F.relu(distances)",
                            "Call"
                        ],
                        [
                            "0 - lows",
                            "BinOp"
                        ],
                        [
                            "F.relu(distances)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_188": {
                "variable": {
                    "value": "prop",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 - lows",
                            "BinOp"
                        ],
                        [
                            "F.relu(distances)",
                            "Call"
                        ],
                        [
                            "0 - lows",
                            "BinOp"
                        ],
                        [
                            "F.relu(distances)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_196": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "min_197": {
                "variable": {
                    "value": "(inputs_lb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[r1, r2]], device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[-2, -1], [-1, 1]], [[-0.5, 0.5], [1.5, 3]]], device=device)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 2, 2, device=device)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 2, 2, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_198": {
                "variable": {
                    "value": "(inputs_ub, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[r1, r2]], device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[-2, -1], [-1, 1]], [[-0.5, 0.5], [1.5, 3]]], device=device)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 2, 2, device=device)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 2, 2, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_223": {
                "variable": {
                    "value": "opti",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[inputs_lb, inputs_ub]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_58": {
                "input": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "outs_lb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "allclose_59": {
                "input": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "outs_ub",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_229": {
                "variable": {
                    "value": "_inputs_lbub",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs_lb, inputs_ub)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_230": {
                "variable": {
                    "value": "(_inputs_lb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "_inputs_lbub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((inputs_lb, inputs_ub), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_231": {
                "variable": {
                    "value": "(_inputs_ub, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "_inputs_lbub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((inputs_lb, inputs_ub), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_42": {
                "input": {
                    "value": "lin1.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "lin2.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_43": {
                "input": {
                    "value": "lin1.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "lin2.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_collision.py": {
        "torch": {
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_15": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "allclose_20": {
                "input": {
                    "value": "dp",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_64": {
                "input": {
                    "value": "torch.stack((p1.bound_mins, p2.bound_mins), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_65": {
                "input": {
                    "value": "torch.stack((p1.bound_maxs, p2.bound_maxs), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_64": {
                "tensors": {
                    "value": "(p1.bound_mins, p2.bound_mins)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_65": {
                "tensors": {
                    "value": "(p1.bound_maxs, p2.bound_maxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_external_verifier.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[cex.inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "oi",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[cex.inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "oi",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[cex.inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "oi",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[cex.inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MSELoss_147": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_148": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prop.safe_dist(e)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_prop.py": {
        "torch": {}
    },
    "tests/test_utils.py": {
        "torch": {
            "stack_13": {
                "variable": {
                    "value": "t1t2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.randn(nrow, ncol), torch.randn(nrow, ncol))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_14": {
                "variable": {
                    "value": "(lb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "t1t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((torch.randn(nrow, ncol), torch.randn(nrow, ncol)), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_15": {
                "variable": {
                    "value": "(ub, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "t1t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((torch.randn(nrow, ncol), torch.randn(nrow, ncol)), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-10.0, -10.0], [0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0], [10.0, 10.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_13": {
                "*size": {
                    "value": "nrow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "ncol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}