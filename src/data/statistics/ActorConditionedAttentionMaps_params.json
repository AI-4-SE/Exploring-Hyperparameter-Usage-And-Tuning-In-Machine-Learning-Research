{
    "model_training/Datasets_AVA.py": {
        "sklearn": {
            "average_precision_score_689": {
                "variable": {
                    "value": "AP",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_results[cc]['truth']",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_results[cc]['pred']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "recall_score_691": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_results[cc]['truth']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.array(y_pred) > recall_th",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "precision_score_692": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_results[cc]['truth']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.array(y_pred) > recall_th",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Session_814": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_815": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_347": {
                "variable": {
                    "value": "rois_bool",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rois_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed_features['rois'], [self.MAX_ROIS, 4])",
                            "Call"
                        ],
                        [
                            "rois_np[:self.MAX_ROIS_IN_TRAINING, :]",
                            "Subscript"
                        ],
                        [
                            "np.zeros([self.MAX_ROIS, 4], np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_355": {
                "variable": {
                    "value": "features[frames]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_356": {
                "variable": {
                    "value": "features[num_frames]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_358": {
                "variable": {
                    "value": "features[movie]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_359": {
                "variable": {
                    "value": "features[segment]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_363": {
                "variable": {
                    "value": "features[no_det]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_364": {
                "variable": {
                    "value": "features[segment_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_365": {
                "variable": {
                    "value": "features[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.MAX_ROIS, self.NUM_CLASSES)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_366": {
                "variable": {
                    "value": "features[rois]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.MAX_ROIS, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_370": {
                "variable": {
                    "value": "parsed_features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_381": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda i: tf.image.decode_jpeg(parsed_features['frames'].values[i])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.range(0, parsed_features['num_frames'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_392": {
                "variable": {
                    "value": "labels_np",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parsed_features['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.MAX_ROIS, self.NUM_CLASSES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_393": {
                "variable": {
                    "value": "rois_np",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parsed_features['rois']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.MAX_ROIS, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_400": {
                "variable": {
                    "value": "no_det",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "no_det",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parsed_features['no_det']",
                            "Subscript"
                        ],
                        [
                            "tf.minimum(no_det, self.MAX_ROIS_IN_TRAINING)",
                            "Call"
                        ],
                        [
                            "len(det_boxes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.MAX_ROIS_IN_TRAINING",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_509": {
                "variable": {
                    "value": "self.input_handle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_any_348": {
                "input_tensor": {
                    "value": "rois_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(rois_np, tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordDataset_438": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfrecord_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.generate_tfrecord_list(train_detection_segments)",
                            "Call"
                        ],
                        [
                            "self.generate_tfrecord_list(val_detection_segments)",
                            "Call"
                        ]
                    ]
                },
                "num_parallel_reads": {
                    "value": "self.PREPROCESS_CORES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_484": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfrecord_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.generate_tfrecord_list(train_detection_segments)",
                            "Call"
                        ],
                        [
                            "self.generate_tfrecord_list(val_detection_segments)",
                            "Call"
                        ]
                    ]
                },
                "num_parallel_reads": {
                    "value": "self.PREPROCESS_CORES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_381": {
                "contents": {
                    "value": "parsed_features['frames'].values[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "py_func_451": {
                "func": {
                    "value": "self.get_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[seg_key, c_split]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "output_types",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.uint8, tf.int64, tf.float32, tf.int64, tf.string]",
                            "List"
                        ]
                    ]
                }
            },
            "py_func_492": {
                "func": {
                    "value": "self.get_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[seg_key, c_split]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "output_types",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.uint8, tf.int64, tf.float32, tf.int64, tf.string]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "model_training/Datasets_JHMDB.py": {
        "sklearn": {
            "average_precision_score_428": {
                "variable": {
                    "value": "AP",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_results[cc]['truth']",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_results[cc]['pred']",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "Session_510": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_511": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_152": {
                "variable": {
                    "value": "rois_bool",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rois_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([self.MAX_ROIS, 4], np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_291": {
                "variable": {
                    "value": "self.input_handle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_any_153": {
                "input_tensor": {
                    "value": "rois_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(rois_np, tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "py_func_238": {
                "func": {
                    "value": "self.get_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[seg_key, c_split]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "output_types",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.uint8, tf.int64, tf.float32, tf.int64, tf.string]",
                            "List"
                        ]
                    ]
                }
            },
            "py_func_274": {
                "func": {
                    "value": "self.get_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[seg_key, c_split]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "output_types",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.uint8, tf.int64, tf.float32, tf.int64, tf.string]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "model_training/old/dataset_jhmdb.py": {
        "sklearn": {
            "average_precision_score_333": {
                "variable": {
                    "value": "AP",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_results[cc]['truth']",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_results[cc]['pred']",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "cast_145": {
                "variable": {
                    "value": "rois_bool",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rois_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([MAX_ROIS, 4], np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_any_146": {
                "input_tensor": {
                    "value": "rois_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(rois_np, tf.bool)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_training/old/process_results.py": {
        "sklearn": {
            "average_precision_score_75": {
                "variable": {
                    "value": "AP",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_results[cc]['truth']",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_results[cc]['pred']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "recall_score_77": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_results[cc]['truth']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.array(y_pred) > recall_th",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "precision_score_78": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_results[cc]['truth']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.array(y_pred) > recall_th",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "model_training/train_multi_gpu.py": {
        "sklearn": {},
        "tensorflow": {
            "get_collection_1160": {
                "variable": {
                    "value": "global_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_1178": {
                "variable": {
                    "value": "custom_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_default_graph_166": {
                "variable": {
                    "value": "mygraph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_216": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "TrainFlag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_346": {
                "variable": {
                    "value": "self.pred_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.pred_probs_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_347": {
                "variable": {
                    "value": "self.input_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.labels_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_350": {
                "variable": {
                    "value": "self.loss_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.loss_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_356": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater_equal(pred_probs, 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_357": {
                "variable": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(input_labels, preds)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(input_labels, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_358": {
                "variable": {
                    "value": "false_positives",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(1 - input_labels, preds)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(1 - input_labels, tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_359": {
                "variable": {
                    "value": "no_false_positives",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(false_positives, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_360": {
                "variable": {
                    "value": "no_correct_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_preds, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_361": {
                "variable": {
                    "value": "no_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_labels",
                            "Attribute"
                        ],
                        [
                            "cur_labels",
                            "variable"
                        ]
                    ]
                }
            },
            "cond_387": {
                "variable": {
                    "value": "cur_input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : augmented_sequence",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : cur_input_seq",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_388": {
                "variable": {
                    "value": "cur_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : augmented_rois",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : cur_rois",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_395": {
                "variable": {
                    "value": "shifted_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : augmented_rois",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : cur_rois",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "global_variables_initializer_648": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_650": {
                "variable": {
                    "value": "model_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GPUOptions_661": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_662": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_663": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_159": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_167": {
                "seed": {
                    "value": "npy_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed_npy",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_244": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_245": {
                "variable": {
                    "value": "increment_global_step_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "global_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "GlobalStep",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_262": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Learning_Rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_263": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_432": {
                "variable": {
                    "value": "fl_input_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_labels",
                            "Attribute"
                        ],
                        [
                            "cur_labels",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_461": {
                "variable": {
                    "value": "pred_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "pred_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pred_probs",
                            "Attribute"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(pred_probs, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_540": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_628": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_630": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "Optimization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_276": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_356": {
                "x": {
                    "value": "pred_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pred_probs",
                            "Attribute"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(pred_probs, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_357": {
                "x": {
                    "value": "input_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_labels",
                            "Attribute"
                        ],
                        [
                            "cur_labels",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater_equal(pred_probs, 0.5), tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_357": {
                "x": {
                    "value": "input_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_labels",
                            "Attribute"
                        ],
                        [
                            "cur_labels",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_358": {
                "x": {
                    "value": "1 - input_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater_equal(pred_probs, 0.5), tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_358": {
                "x": {
                    "value": "1 - input_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_359": {
                "x": {
                    "value": "false_positives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.equal(1 - input_labels, preds), tf.cast(1 - input_labels, tf.bool))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_360": {
                "x": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.equal(input_labels, preds), tf.cast(input_labels, tf.bool))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_428": {
                "name_or_scope": {
                    "value": "Losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_437": {
                "variable": {
                    "value": "pred_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_layers.apply_model_inference(self.architecture_str, cur_input_seq, self.is_training, self.data_obj.NUM_CLASSES, shifted_rois, cur_b_idx)",
                            "Call"
                        ],
                        [
                            "cur_logits",
                            "variable"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_439": {
                "variable": {
                    "value": "softmax_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "fl_input_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(input_labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_layers.apply_model_inference(self.architecture_str, cur_input_seq, self.is_training, self.data_obj.NUM_CLASSES, shifted_rois, cur_b_idx)",
                            "Call"
                        ],
                        [
                            "cur_logits",
                            "variable"
                        ]
                    ]
                }
            },
            "expand_dims_618": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RunOptions_903": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "report_tensor_allocations_upon_oom": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_904": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_906": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "report_tensor_allocations_upon_oom": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_445": {
                "variable": {
                    "value": "pred_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_layers.apply_model_inference(self.architecture_str, cur_input_seq, self.is_training, self.data_obj.NUM_CLASSES, shifted_rois, cur_b_idx)",
                            "Call"
                        ],
                        [
                            "cur_logits",
                            "variable"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_447": {
                "variable": {
                    "value": "sigmoid_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "fl_input_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(input_labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_layers.apply_model_inference(self.architecture_str, cur_input_seq, self.is_training, self.data_obj.NUM_CLASSES, shifted_rois, cur_b_idx)",
                            "Call"
                        ],
                        [
                            "cur_logits",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_mean_450": {
                "variable": {
                    "value": "per_roi_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sigmoid_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=fl_input_labels, logits=logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_485": {
                "input_tensor": {
                    "value": "per_roi_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax_loss",
                            "variable"
                        ],
                        [
                            "tf.reduce_mean(sigmoid_loss, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_485": {
                "x": {
                    "value": "self.batch_size * self.no_gpus",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_566": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "append_623": {
                "arr": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars[0][1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_collection_824": {
                "key": {
                    "value": "attention_map",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_825": {
                "key": {
                    "value": "feature_activations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_826": {
                "key": {
                    "value": "final_i3d_feats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_290": {
                "device_name": {
                    "value": "'/gpu:%d' % gg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_291": {
                "name": {
                    "value": "'%s_%d' % ('GPU', gg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_827": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_293": {
                "x": {
                    "value": "cur_input_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_batch[start_index:end_index]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(cur_input_seq, tf.float32)[:, :, :, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(self.is_training, lambda : augmented_sequence, lambda : cur_input_seq)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model_training/i3d.py": {
        "tensorflow": {
            "cond_38": {
                "variable": {
                    "value": "dropout_keep",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 0.2",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 1.0",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "get_collection_62": {
                "variable": {
                    "value": "i3d_var",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "I3D_Model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_72": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_84": {
                "variable": {
                    "value": "tail_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Tail_I3D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_101": {
                "variable": {
                    "value": "head_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "RGB/inception_i3d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_102": {
                "variable": {
                    "value": "tail_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "Tail_I3D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_103": {
                "variable": {
                    "value": "cls_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "CLS_Logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_106": {
                "variable": {
                    "value": "i3d_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head_vars + tail_vars + cls_vars",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_pool3d_618": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_714": {
                "variable": {
                    "value": "pooled_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temporal_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=output_channels, kernel_shape=kernel_shape, stride=stride, padding=snt.SAME, use_bias=True)(sub_in)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, t_span, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, t_span, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name + 'pooling'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_94": {
                "variable": {
                    "value": "tail_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool3d_258": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_273": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_336": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_482": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_556": {
                "variable": {
                    "value": "averaged_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_561": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "averaged_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_648": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_677": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool3d_822": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_843": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_906": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_1052": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_1126": {
                "variable": {
                    "value": "averaged_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1131": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "averaged_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "I3D_Model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_303": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_331": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_365": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_393": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_421": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_449": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_477": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_511": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_539": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool3d_545": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 7, 7, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.VALID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_547": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_625": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_642": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_654": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_671": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_707": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'unit_3d'",
                            "Method Argument"
                        ],
                        [
                            "'unit_3d'",
                            "Method Argument"
                        ],
                        [
                            "'inception_i3d'",
                            "Method Argument"
                        ],
                        [
                            "'inception_i3d'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_873": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_901": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_935": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_963": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_991": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1019": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1047": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1081": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1109": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool3d_1115": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 7, 7, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.VALID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1117": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_279": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_296": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_308": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_325": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_359": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_387": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_398": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_415": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_426": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_443": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_454": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_471": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_488": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_505": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_516": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_533": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_544": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_555": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_626": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_629": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_635": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_641": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_655": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_658": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_664": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_670": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_849": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_866": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_878": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_895": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_912": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_929": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_940": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_957": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_968": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_985": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_996": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_1013": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1024": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_1041": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1058": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_1075": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1086": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool3d_1103": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_feats",
                            "variable"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=False, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "Unit3D(output_channels=channel_mult * 192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "net + lat",
                            "BinOp"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1114": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "str"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "str"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_3b'",
                            "str"
                        ],
                        [
                            "'Mixed_3c'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "str"
                        ],
                        [
                            "'Mixed_4b'",
                            "str"
                        ],
                        [
                            "'Mixed_4c'",
                            "str"
                        ],
                        [
                            "'Mixed_4d'",
                            "str"
                        ],
                        [
                            "'Mixed_4e'",
                            "str"
                        ],
                        [
                            "'Mixed_4f'",
                            "str"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "str"
                        ],
                        [
                            "'Mixed_5b'",
                            "str"
                        ],
                        [
                            "'Mixed_5c'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "str"
                        ],
                        [
                            "'Predictions'",
                            "str"
                        ],
                        [
                            "'Logits'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_1125": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_280": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_283": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_289": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_295": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_312": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_324": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_343": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_346": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_352": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_358": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_371": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_374": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_380": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_386": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_399": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_402": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_408": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_414": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_427": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_430": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_436": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_442": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_455": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_458": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_464": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_470": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_489": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_492": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_498": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_504": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_517": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_520": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_526": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_532": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_850": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_853": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_859": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_865": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_879": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_882": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_888": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_894": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_913": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_916": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_922": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_928": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_941": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_944": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_950": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_956": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_969": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_972": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_978": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_984": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_997": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1000": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1006": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1012": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1025": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1028": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1034": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1040": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1059": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1062": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1068": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1074": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1087": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1090": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1096": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1102": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "model_training/input_augmentation.py": {
        "tensorflow": {
            "cond_15": {
                "variable": {
                    "value": "input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "flip_mux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], minval=0, maxval=1) > 0.5",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : cur_input_seq",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : flipped_input",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_20": {
                "variable": {
                    "value": "new_left",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "flip_mux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], minval=0, maxval=1) > 0.5",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : left",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : flipped_left",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_21": {
                "variable": {
                    "value": "new_right",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "flip_mux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], minval=0, maxval=1) > 0.5",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : right",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : flipped_right",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_22": {
                "variable": {
                    "value": "augmented_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[top, new_left, bottom, new_right]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_52": {
                "variable": {
                    "value": "augmented_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[updated_top, updated_left, updated_bottom, updated_right]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_55": {
                "variable": {
                    "value": "tiled_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "left_offset",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_56": {
                "variable": {
                    "value": "tiled_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tiled_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(left_crop, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(tiled_left, [B])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_58": {
                "variable": {
                    "value": "tiled_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - right_offset",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_59": {
                "variable": {
                    "value": "tiled_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tiled_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(right_crop, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(tiled_right, [B])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "variable": {
                    "value": "tiled_top",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_offset",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_62": {
                "variable": {
                    "value": "tiled_top",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tiled_top",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(top_crop, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(tiled_top, [B])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "variable": {
                    "value": "tiled_bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - bottom_offset",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_65": {
                "variable": {
                    "value": "tiled_bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tiled_bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(bottom_crop, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(tiled_bottom, [B])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "new_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tiled_top, tiled_left, tiled_bottom, tiled_right]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_120": {
                "variable": {
                    "value": "height_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "area_augmented * ratio_augmented",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_142": {
                "variable": {
                    "value": "augmented_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[top_aug, left_aug, bottom_aug, right_aug]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_31": {
                "input": {
                    "value": "cur_input_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seq",
                            "variable"
                        ]
                    ]
                }
            },
            "shape_85": {
                "input": {
                    "value": "cur_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "augmented_rois",
                            "variable"
                        ]
                    ]
                }
            },
            "cast_102": {
                "x": {
                    "value": "area_aug_mux < 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_104": {
                "x": {
                    "value": "area_aug_mux > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model_training/model_layers.py": {
        "tensorflow": {
            "avg_pool3d_65": {
                "variable": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_box_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(slow_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, temporal_len, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "TemporalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_72": {
                "variable": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, 3, 3, 1], strides=[1, temporal_len, 3, 3, 1], padding='SAME', name='TemporalPooling')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "basic_model(final_i3d_feat)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "only_i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(relation_feats, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.concat(flattened_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "DROPOUT_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_DROP1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_75": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_Logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool3d_89": {
                "variable": {
                    "value": "temp_avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, temporal_len, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "TemporalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool3d_101": {
                "variable": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_box_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(slow_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, Hr, Wr, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, Hr, Wr, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_107": {
                "variable": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, 3, 3, 1], strides=[1, temporal_len, 3, 3, 1], padding='SAME', name='TemporalPooling')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_109": {
                "variable": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "basic_model(final_i3d_feat)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "only_i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(relation_feats, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.concat(flattened_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "DROPOUT_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_DROP1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_110": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_Logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool3d_125": {
                "variable": {
                    "value": "temp_avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, temporal_len, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "TemporalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool3d_137": {
                "variable": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_box_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(slow_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, Hr, Wr, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, Hr, Wr, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_143": {
                "variable": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, 3, 3, 1], strides=[1, temporal_len, 3, 3, 1], padding='SAME', name='TemporalPooling')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_145": {
                "variable": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "basic_model(final_i3d_feat)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "only_i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(relation_feats, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.concat(flattened_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "DROPOUT_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_DROP1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_146": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_Logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool3d_170": {
                "variable": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "GlobalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_176": {
                "variable": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, 3, 3, 1], strides=[1, temporal_len, 3, 3, 1], padding='SAME', name='TemporalPooling')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_178": {
                "variable": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "basic_model(final_i3d_feat)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "only_i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(relation_feats, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.concat(flattened_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "DROPOUT_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_DROP1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_179": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_Logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool3d_211": {
                "variable": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "GlobalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_217": {
                "variable": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, 3, 3, 1], strides=[1, temporal_len, 3, 3, 1], padding='SAME', name='TemporalPooling')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_219": {
                "variable": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "basic_model(final_i3d_feat)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "only_i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(relation_feats, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.concat(flattened_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "DROPOUT_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_DROP1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_220": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_Logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool3d_244": {
                "variable": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "GlobalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_250": {
                "variable": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, 3, 3, 1], strides=[1, temporal_len, 3, 3, 1], padding='SAME', name='TemporalPooling')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_252": {
                "variable": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "basic_model(final_i3d_feat)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "only_i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(relation_feats, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.concat(flattened_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "DROPOUT_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_DROP1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_253": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_Logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool3d_317": {
                "variable": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "GlobalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_323": {
                "variable": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, 3, 3, 1], strides=[1, temporal_len, 3, 3, 1], padding='SAME', name='TemporalPooling')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_325": {
                "variable": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "basic_model(final_i3d_feat)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "only_i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(relation_feats, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.concat(flattened_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "DROPOUT_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_DROP1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_326": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_Logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool3d_408": {
                "variable": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "GlobalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_414": {
                "variable": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, 3, 3, 1], strides=[1, temporal_len, 3, 3, 1], padding='SAME', name='TemporalPooling')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_416": {
                "variable": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "basic_model(final_i3d_feat)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "only_i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(relation_feats, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.concat(flattened_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "DROPOUT_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_DROP1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_417": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_Logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool3d_433": {
                "variable": {
                    "value": "temp_avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, temporal_len, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "TemporalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool3d_522": {
                "variable": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "GlobalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_528": {
                "variable": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, 3, 3, 1], strides=[1, temporal_len, 3, 3, 1], padding='SAME', name='TemporalPooling')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_530": {
                "variable": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "basic_model(final_i3d_feat)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "only_i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(relation_feats, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.concat(flattened_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "DROPOUT_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_DROP1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_531": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_Logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool3d_548": {
                "variable": {
                    "value": "temp_avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, temporal_len, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "TemporalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool3d_637": {
                "variable": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "GlobalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_643": {
                "variable": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, 3, 3, 1], strides=[1, temporal_len, 3, 3, 1], padding='SAME', name='TemporalPooling')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_645": {
                "variable": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "basic_model(final_i3d_feat)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "only_i3d_tail_model(soft_attention_feats, is_training)",
                            "Call"
                        ],
                        [
                            "i3d_tail_model(relation_feats, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(avg_features)",
                            "Call"
                        ],
                        [
                            "tf.concat(flattened_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "DROPOUT_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_DROP1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_646": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "class_feats_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=class_feats, rate=DROPOUT_RATE, training=is_training, name='CLS_DROP1')",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "CLS_Logits",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool3d_679": {
                "variable": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_box_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(slow_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, temporal_len, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "TemporalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_685": {
                "variable": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, 3, 3, 1], strides=[1, temporal_len, 3, 3, 1], padding='SAME', name='TemporalPooling')",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool3d_693": {
                "variable": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_box_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(slow_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len, H, W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "TemporalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_700": {
                "variable": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, 3, 3, 1], strides=[1, temporal_len, 3, 3, 1], padding='SAME', name='TemporalPooling')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_942": {
                "variable": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat_box_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features_r)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(roi_box_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model_pooled(roi_tail)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_948": {
                "variable": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[Tr, Hr, Wr], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "RoI_Dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool3d_1124": {
                "variable": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, temporal_len, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "TemporalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_1130": {
                "variable": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "avg_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(roi_box_features, ksize=[1, 1, Hr, Wr, 1], strides=[1, 1, Hr, Wr, 1], padding='VALID', name='SpatialPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='GlobalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, 1, 1, 1], strides=[1, temporal_len, 1, 1, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len, H, W, 1], strides=[1, temporal_len, H, W, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(final_i3d_feat, ksize=[1, temporal_len, 3, 3, 1], strides=[1, temporal_len, 3, 3, 1], padding='SAME', name='TemporalPooling')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_1275": {
                "variable": {
                    "value": "residual_connections",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "non_local_feats + [context_features]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Residual",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1292": {
                "variable": {
                    "value": "class_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "flattened_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[basic_model(cropfeat) for cropfeat in cropped_features]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_1360": {
                "variable": {
                    "value": "rois_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1361": {
                "variable": {
                    "value": "labels_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1366": {
                "variable": {
                    "value": "batch_range",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(B)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_1367": {
                "variable": {
                    "value": "batch_idx_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(B), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, max_rois]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1368": {
                "variable": {
                    "value": "batch_indices_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_idx_tiled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(batch_range, [1, max_rois])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_1378": {
                "variable": {
                    "value": "zero_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rois_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(rois, [-1, 4])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "logical_and_1379": {
                "variable": {
                    "value": "zero_rows",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zero_indices[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "zero_indices[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_and_1380": {
                "variable": {
                    "value": "zero_rows",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zero_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(zero_indices[:, 0], zero_indices[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.logical_and(zero_rows, zero_indices[:, 2])",
                            "Call"
                        ],
                        [
                            "tf.logical_and(zero_rows, zero_indices[:, 3])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_indices[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_and_1381": {
                "variable": {
                    "value": "zero_rows",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zero_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(zero_indices[:, 0], zero_indices[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.logical_and(zero_rows, zero_indices[:, 2])",
                            "Call"
                        ],
                        [
                            "tf.logical_and(zero_rows, zero_indices[:, 3])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_indices[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_not_1383": {
                "variable": {
                    "value": "non_zero_rows",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zero_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(zero_indices[:, 0], zero_indices[:, 1])",
                            "Call"
                        ],
                        [
                            "tf.logical_and(zero_rows, zero_indices[:, 2])",
                            "Call"
                        ],
                        [
                            "tf.logical_and(zero_rows, zero_indices[:, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_1387": {
                "variable": {
                    "value": "rois_nonzero",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rois_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(rois, [-1, 4])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "non_zero_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_not(zero_rows)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_1388": {
                "variable": {
                    "value": "labels_nonzero",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1, num_classes])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "non_zero_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_not(zero_rows)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_1389": {
                "variable": {
                    "value": "batch_indices_nonzero",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_indices_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_idx_tiled, [-1])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "non_zero_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_not(zero_rows)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1413": {
                "variable": {
                    "value": "temporal_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_1414": {
                "variable": {
                    "value": "temporal_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temporal_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(rois, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(temporal_rois, [1, T, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, T, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1423": {
                "variable": {
                    "value": "temporal_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temporal_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_indices * T",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(temporal_mapping, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(temporal_mapping, [1, T])",
                            "Call"
                        ],
                        [
                            "temporal_mapping + tf.range(T)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(temporal_mapping, [-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_1426": {
                "variable": {
                    "value": "temporal_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temporal_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_indices * T",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(temporal_mapping, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(temporal_mapping, [1, T])",
                            "Call"
                        ],
                        [
                            "temporal_mapping + tf.range(T)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(temporal_mapping, [-1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, T]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1442": {
                "variable": {
                    "value": "temporal_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "temporal_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_indices * T",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(temporal_mapping, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(temporal_mapping, [1, T])",
                            "Call"
                        ],
                        [
                            "temporal_mapping + tf.range(T)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(temporal_mapping, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1453": {
                "variable": {
                    "value": "stacked_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, H, W, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1457": {
                "variable": {
                    "value": "stacked_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "temporal_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(rois, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(temporal_rois, [1, T, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1460": {
                "variable": {
                    "value": "stacked_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "temporal_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_indices * T",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(temporal_mapping, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(temporal_mapping, [1, T])",
                            "Call"
                        ],
                        [
                            "temporal_mapping + tf.range(T)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(temporal_mapping, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "crop_and_resize_1463": {
                "variable": {
                    "value": "cropped_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "stacked_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(features, [-1, H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "stacked_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(temporal_rois, [-1, 4])",
                            "Call"
                        ]
                    ]
                },
                "box_ind": {
                    "value": "stacked_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(temporal_mapping, [-1])",
                            "Call"
                        ]
                    ]
                },
                "crop_size": {
                    "value": "crop_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_1481": {
                "variable": {
                    "value": "unrolled_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cropped_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(image=stacked_features, boxes=stacked_rois, box_ind=stacked_mapping, crop_size=crop_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_boxes, T, crop_size[0], crop_size[1], C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_278": {
                "variable": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_box_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(slow_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_279": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_281": {
                "variable": {
                    "value": "context_response",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextRepresentation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_285": {
                "variable": {
                    "value": "context_embedding_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[5, 5, 5], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_286": {
                "variable": {
                    "value": "context_response_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_response",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextResGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_290": {
                "variable": {
                    "value": "roi_emb_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[Tr, Hr, Wr], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[R, Tr * Hr * Wr, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_291": {
                "variable": {
                    "value": "context_emb_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_embedding_gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(context_embedding, batch_indices, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, batch_indices, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, batch_indices, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, batch_indices, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[R, Tc * Hc * Wc, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_292": {
                "variable": {
                    "value": "context_res_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_response_gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(context_response, batch_indices, axis=0, name='ContextResGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_response, cur_b_idx, axis=0, name='ContextResGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_response, cur_b_idx, axis=0, name='ContextResGather')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[R, Tc * Hc * Wc, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_294": {
                "variable": {
                    "value": "emb_mtx",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "roi_emb_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(roi_embedding, shape=[R, Tr * Hr * Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(roi_embedding, shape=[R, Tr * Hr * Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(roi_embedding, shape=[B, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(roi_embedding, shape=[R, Tr * Hr * Wr, feature_map_channel])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "context_emb_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(context_embedding_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_embedding_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_embedding, shape=[B, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_embedding_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_297": {
                "variable": {
                    "value": "embedding_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "emb_mtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "emb_mtx / tf.sqrt(tf.cast(feature_map_channel, tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "emb_mtx / tf.sqrt(tf.cast(feature_map_channel, tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "EmbeddingNormalization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_299": {
                "variable": {
                    "value": "attention_response",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embedding_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "context_res_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(context_response_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_response_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_response, shape=[B, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_response_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_301": {
                "variable": {
                    "value": "attention_response_org_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_response",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[R, Tr, Hr, Wr, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_304": {
                "variable": {
                    "value": "non_local_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_response_org_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention_response, [R, Tr, Hr, Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_response, [R, Tr, Hr, Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_response, [B, Tc, Hc, Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_response, [R, Tr, Hr, Wr, feature_map_channel])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "Cr",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "NonLocalFeature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool3d_352": {
                "variable": {
                    "value": "avg_features_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_box_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(slow_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, temporal_len_r, H_r, W_r, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, temporal_len_r, H_r, W_r, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "TemporalPooling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_358": {
                "variable": {
                    "value": "flat_box_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "avg_features_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool3d(roi_box_features, ksize=[1, temporal_len_r, H_r, W_r, 1], strides=[1, temporal_len_r, H_r, W_r, 1], padding='VALID', name='TemporalPooling')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_360": {
                "variable": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat_box_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features_r)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(roi_box_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model_pooled(roi_tail)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_367": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_375": {
                "input": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[Tr, Hr, Wr], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_376": {
                "variable": {
                    "value": "roi_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, Tc, Hc, Wc, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiTiling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_379": {
                "variable": {
                    "value": "context_embedding_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[5, 5, 5], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_381": {
                "variable": {
                    "value": "roi_context_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[roi_tiled, context_embedding_gathered]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiContextConcat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_383": {
                "variable": {
                    "value": "relation_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_context_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "Cc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "RelationFeats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_460": {
                "variable": {
                    "value": "flat_box_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "roi_box_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(slow_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_462": {
                "variable": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat_box_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features_r)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(roi_box_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model_pooled(roi_tail)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_467": {
                "variable": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[Tr, Hr, Wr], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "RoI_Dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_470": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_478": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[5, 5, 5], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Context_Dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_485": {
                "input": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[Tr, Hr, Wr], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_486": {
                "variable": {
                    "value": "roi_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, Tc, Hc, Wc, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiTiling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_489": {
                "variable": {
                    "value": "context_embedding_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[5, 5, 5], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_491": {
                "variable": {
                    "value": "roi_context_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[roi_tiled, context_embedding_gathered]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiContextConcat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_493": {
                "variable": {
                    "value": "relation_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_context_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "Cc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "RelationFeats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_501": {
                "variable": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relation_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=1, kernel_size=[1, 1, 1], padding='SAME', activation=None, name='RelationFeats')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "AttentionMap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_507": {
                "variable": {
                    "value": "gathered_context",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                },
                "indices": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_509": {
                "variable": {
                    "value": "soft_attention_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "gathered_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_575": {
                "variable": {
                    "value": "flat_box_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "roi_box_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(slow_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_577": {
                "variable": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat_box_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features_r)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(roi_box_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model_pooled(roi_tail)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_582": {
                "variable": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[Tr, Hr, Wr], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "RoI_Dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_585": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_593": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[5, 5, 5], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Context_Dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_600": {
                "input": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[Tr, Hr, Wr], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_601": {
                "variable": {
                    "value": "roi_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, Tc, Hc, Wc, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiTiling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_604": {
                "variable": {
                    "value": "context_embedding_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[5, 5, 5], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_606": {
                "variable": {
                    "value": "roi_context_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[roi_tiled, context_embedding_gathered]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiContextConcat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_608": {
                "variable": {
                    "value": "relation_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_context_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "Cc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "RelationFeats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_616": {
                "variable": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relation_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=1, kernel_size=[1, 1, 1], padding='SAME', activation=None, name='RelationFeats')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "AttentionMap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_622": {
                "variable": {
                    "value": "gathered_context",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                },
                "indices": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_624": {
                "variable": {
                    "value": "soft_attention_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "gathered_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_752": {
                "variable": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_box_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(slow_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_753": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_755": {
                "variable": {
                    "value": "context_response",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextRepresentation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_759": {
                "variable": {
                    "value": "context_embedding_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[5, 5, 5], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cur_b_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_760": {
                "variable": {
                    "value": "context_response_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_response",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cur_b_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextResGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_764": {
                "variable": {
                    "value": "roi_emb_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[Tr, Hr, Wr], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[R, Tr * Hr * Wr, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_765": {
                "variable": {
                    "value": "context_emb_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_embedding_gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(context_embedding, batch_indices, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, batch_indices, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, batch_indices, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, batch_indices, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[R, Tc * Hc * Wc, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_766": {
                "variable": {
                    "value": "context_res_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_response_gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(context_response, batch_indices, axis=0, name='ContextResGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_response, cur_b_idx, axis=0, name='ContextResGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_response, cur_b_idx, axis=0, name='ContextResGather')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[R, Tc * Hc * Wc, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_768": {
                "variable": {
                    "value": "emb_mtx",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "roi_emb_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(roi_embedding, shape=[R, Tr * Hr * Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(roi_embedding, shape=[R, Tr * Hr * Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(roi_embedding, shape=[B, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(roi_embedding, shape=[R, Tr * Hr * Wr, feature_map_channel])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "context_emb_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(context_embedding_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_embedding_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_embedding, shape=[B, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_embedding_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_771": {
                "variable": {
                    "value": "embedding_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "emb_mtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "emb_mtx / tf.sqrt(tf.cast(feature_map_channel, tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "emb_mtx / tf.sqrt(tf.cast(feature_map_channel, tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "EmbeddingNormalization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_773": {
                "variable": {
                    "value": "attention_response",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embedding_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "context_res_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(context_response_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_response_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_response, shape=[B, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_response_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_775": {
                "variable": {
                    "value": "attention_response_org_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_response",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[R, Tr, Hr, Wr, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_778": {
                "variable": {
                    "value": "non_local_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_response_org_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention_response, [R, Tr, Hr, Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_response, [R, Tr, Hr, Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_response, [B, Tc, Hc, Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_response, [R, Tr, Hr, Wr, feature_map_channel])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "Cr",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "NonLocalFeature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_872": {
                "variable": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat_box_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features_r)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(roi_box_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model_pooled(roi_tail)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_878": {
                "variable": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[Tr, Hr, Wr], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "RoI_Dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_881": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_889": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[5, 5, 5], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Context_Dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_896": {
                "input": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[Tr, Hr, Wr], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_897": {
                "variable": {
                    "value": "roi_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, Tc, Hc, Wc, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiTiling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_900": {
                "variable": {
                    "value": "context_embedding_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[5, 5, 5], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cur_b_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_902": {
                "variable": {
                    "value": "roi_context_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[roi_tiled, context_embedding_gathered]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiContextConcat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_904": {
                "variable": {
                    "value": "relation_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_context_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "Cc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "RelationFeats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_912": {
                "variable": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relation_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=1, kernel_size=[1, 1, 1], padding='SAME', activation=None, name='RelationFeats')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "AttentionMap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_918": {
                "variable": {
                    "value": "gathered_context",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "cur_b_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_920": {
                "variable": {
                    "value": "soft_attention_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "gathered_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_952": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_960": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[5, 5, 5], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Context_Dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_967": {
                "input": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[Tr, Hr, Wr], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_968": {
                "variable": {
                    "value": "roi_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, Tc, Hc, Wc, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiTiling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_971": {
                "variable": {
                    "value": "context_embedding_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[5, 5, 5], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cur_b_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_973": {
                "variable": {
                    "value": "roi_context_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[roi_tiled, context_embedding_gathered]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiContextConcat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_975": {
                "variable": {
                    "value": "relation_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_context_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "Cc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "RelationFeats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_983": {
                "variable": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relation_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=1, kernel_size=[1, 1, 1], padding='SAME', activation=None, name='RelationFeats')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "AttentionMap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_989": {
                "variable": {
                    "value": "gathered_context",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "cur_b_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_991": {
                "variable": {
                    "value": "soft_attention_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "gathered_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_1024": {
                "variable": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat_box_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features_r)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(roi_box_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model_pooled(roi_tail)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_1030": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_1038": {
                "input": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[Tr, Hr, Wr], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_1039": {
                "variable": {
                    "value": "roi_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, Tc, Hc, Wc, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiTiling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_1042": {
                "variable": {
                    "value": "context_embedding_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[5, 5, 5], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cur_b_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1044": {
                "variable": {
                    "value": "roi_context_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[roi_tiled, context_embedding_gathered]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiContextConcat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_1046": {
                "variable": {
                    "value": "relation_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_context_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "Cc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "RelationFeats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_1078": {
                "variable": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat_box_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(avg_features_r)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(roi_box_features)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model_pooled(roi_tail)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ],
                        [
                            "basic_model(roi_box_features)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_1084": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_1092": {
                "input": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[Tr, Hr, Wr], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_1093": {
                "variable": {
                    "value": "roi_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(tf.expand_dims(roi_embedding, axis=1), axis=1), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, Tc, Hc, Wc, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiTiling",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_1096": {
                "variable": {
                    "value": "context_embedding_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[5, 5, 5], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cur_b_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_1098": {
                "variable": {
                    "value": "roi_context_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[roi_tiled, context_embedding_gathered]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiContextConcat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_1100": {
                "variable": {
                    "value": "relation_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_context_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ],
                        [
                            "tf.concat([roi_tiled, context_embedding_gathered], 4, name='RoiContextConcat')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "RelationFeats",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_1107": {
                "variable": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "relation_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=1, kernel_size=[1, 1, 1], padding='SAME', activation=None, name='RelationFeats')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "AttentionMap",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_1113": {
                "variable": {
                    "value": "gathered_context",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "cur_b_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_1115": {
                "variable": {
                    "value": "soft_attention_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "gathered_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_1122": {
                "name": {
                    "value": "final_i3d_feats",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv3d_1243": {
                "variable": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_1244": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_1246": {
                "variable": {
                    "value": "context_response",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextRepresentation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_1250": {
                "variable": {
                    "value": "roi_emb_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[Tr, Hr, Wr], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, Tc * Hc * Wc, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1251": {
                "variable": {
                    "value": "context_emb_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[5, 5, 5], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, Tc * Hc * Wc, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1252": {
                "variable": {
                    "value": "context_res_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_response",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, Tc * Hc * Wc, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1254": {
                "variable": {
                    "value": "emb_mtx",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "roi_emb_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(roi_embedding, shape=[R, Tr * Hr * Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(roi_embedding, shape=[R, Tr * Hr * Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(roi_embedding, shape=[B, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(roi_embedding, shape=[R, Tr * Hr * Wr, feature_map_channel])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "context_emb_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(context_embedding_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_embedding_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_embedding, shape=[B, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_embedding_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_1256": {
                "variable": {
                    "value": "embedding_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "emb_mtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "emb_mtx / tf.sqrt(tf.cast(feature_map_channel, tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "emb_mtx / tf.sqrt(tf.cast(feature_map_channel, tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "EmbeddingNormalization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_1258": {
                "variable": {
                    "value": "attention_response",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embedding_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "context_res_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(context_response_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_response_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_response, shape=[B, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_response_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1260": {
                "variable": {
                    "value": "attention_response_org_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_response",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, Tc, Hc, Wc, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_1263": {
                "variable": {
                    "value": "non_local_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_response_org_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention_response, [R, Tr, Hr, Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_response, [R, Tr, Hr, Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_response, [B, Tc, Hc, Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_response, [R, Tr, Hr, Wr, feature_map_channel])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "Cc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "NonLocalFeature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_1311": {
                "variable": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_box_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(slow_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[Tr, Hr, Wr]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "RoiEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_1313": {
                "variable": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[5, 5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_1315": {
                "variable": {
                    "value": "context_response",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextRepresentation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_1319": {
                "variable": {
                    "value": "context_embedding_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=context_embedding, rate=0.5, training=is_training, name='Context_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[5, 5, 5], padding='SAME', activation=tf.nn.relu, name='ContextEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cur_b_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextEmbGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_1320": {
                "variable": {
                    "value": "context_response_gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_response",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='ContextRepresentation')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cur_b_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ContextResGather",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_1324": {
                "variable": {
                    "value": "roi_emb_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "roi_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), use_bias=True, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=roi_embedding, rate=0.5, training=is_training, name='RoI_Dropout')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(flat_box_feats, feature_map_channel, activation=tf.nn.relu, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(context_features, filters=feature_map_channel, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_box_features, filters=feature_map_channel, kernel_size=[Tr, Hr, Wr], padding='SAME', activation=tf.nn.relu, name='RoiEmbedding')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[R, Tr * Hr * Wr, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1325": {
                "variable": {
                    "value": "context_emb_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_embedding_gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(context_embedding, batch_indices, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, batch_indices, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, batch_indices, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, batch_indices, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_embedding, cur_b_idx, axis=0, name='ContextEmbGather')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[R, Tc * Hc * Wc, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1326": {
                "variable": {
                    "value": "context_res_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_response_gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(context_response, batch_indices, axis=0, name='ContextResGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_response, cur_b_idx, axis=0, name='ContextResGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_response, cur_b_idx, axis=0, name='ContextResGather')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[R, Tc * Hc * Wc, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1328": {
                "variable": {
                    "value": "emb_mtx",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "roi_emb_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(roi_embedding, shape=[R, Tr * Hr * Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(roi_embedding, shape=[R, Tr * Hr * Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(roi_embedding, shape=[B, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(roi_embedding, shape=[R, Tr * Hr * Wr, feature_map_channel])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "context_emb_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(context_embedding_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_embedding_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_embedding, shape=[B, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_embedding_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_1330": {
                "variable": {
                    "value": "embedding_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "emb_mtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "emb_mtx / tf.sqrt(tf.cast(feature_map_channel, tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "emb_mtx / tf.sqrt(tf.cast(feature_map_channel, tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(roi_emb_reshaped, context_emb_reshaped, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "EmbeddingNormalization",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_1332": {
                "variable": {
                    "value": "attention_response",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embedding_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(emb_mtx, name='EmbeddingNormalization')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "context_res_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(context_response_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_response_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_response, shape=[B, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_response_gathered, shape=[R, Tc * Hc * Wc, feature_map_channel])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1334": {
                "variable": {
                    "value": "attention_response_org_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_response",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ],
                        [
                            "tf.matmul(embedding_attention, context_res_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[R, Tr, Hr, Wr, feature_map_channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_1337": {
                "variable": {
                    "value": "non_local_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_response_org_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention_response, [R, Tr, Hr, Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_response, [R, Tr, Hr, Wr, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_response, [B, Tc, Hc, Wc, feature_map_channel])",
                            "Call"
                        ],
                        [
                            "tf.reshape(attention_response, [R, Tr, Hr, Wr, feature_map_channel])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "Cr",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "NonLocalFeature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "Tail_I3D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_167": {
                "name": {
                    "value": "final_i3d_feats",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "fast",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "Tail_I3D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_208": {
                "name": {
                    "value": "final_i3d_feats",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "Tail_I3D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_241": {
                "name": {
                    "value": "final_i3d_feats",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_269": {
                "name_or_scope": {
                    "value": "Non_Local_Block",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "Tail_I3D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_314": {
                "name": {
                    "value": "final_i3d_feats",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "Soft_Attention_Model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_396": {
                "name": {
                    "value": "feature_activations",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "relation_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=1, kernel_size=[1, 1, 1], padding='SAME', activation=None, name='RelationFeats')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_400": {
                "name_or_scope": {
                    "value": "Tail_I3D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_405": {
                "name": {
                    "value": "final_i3d_feats",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_442": {
                "name_or_scope": {
                    "value": "Soft_Attention_Model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_503": {
                "name": {
                    "value": "attention_map",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_508": {
                "name": {
                    "value": "feature_activations",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "gathered_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_514": {
                "name_or_scope": {
                    "value": "Tail_I3D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_519": {
                "name": {
                    "value": "final_i3d_feats",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_557": {
                "name_or_scope": {
                    "value": "Soft_Attention_Model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_618": {
                "name": {
                    "value": "attention_map",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_623": {
                "name": {
                    "value": "feature_activations",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "gathered_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_629": {
                "name_or_scope": {
                    "value": "Tail_I3D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_634": {
                "name": {
                    "value": "final_i3d_feats",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_706": {
                "name_or_scope": {
                    "value": "Tail_I3D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_711": {
                "name": {
                    "value": "final_i3d_feats",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_to_collection_730": {
                "name": {
                    "value": "final_i3d_feats",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "final_i3d_feat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_743": {
                "name_or_scope": {
                    "value": "Non_Local_Block",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_788": {
                "name_or_scope": {
                    "value": "Tail_I3D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_862": {
                "name_or_scope": {
                    "value": "Soft_Attention_Model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_914": {
                "name": {
                    "value": "attention_map",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_919": {
                "name": {
                    "value": "feature_activations",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "gathered_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_932": {
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_936": {
                "input": {
                    "value": "shifted_rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_938": {
                "name_or_scope": {
                    "value": "Tail_I3D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_951": {
                "name_or_scope": {
                    "value": "Soft_Attention_Model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_985": {
                "name": {
                    "value": "attention_map",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_990": {
                "name": {
                    "value": "feature_activations",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "gathered_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_994": {
                "name_or_scope": {
                    "value": "Tail_I3D",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_1015": {
                "name_or_scope": {
                    "value": "Soft_Attention_Model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_1059": {
                "name": {
                    "value": "feature_activations",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "relation_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=None, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.01), name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=Cc, kernel_size=[1, 1, 1], padding='SAME', activation=tf.nn.relu, name='RelationFeats')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv3d(roi_context_feats, filters=1, kernel_size=[1, 1, 1], padding='SAME', activation=None, name='RelationFeats')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1069": {
                "name_or_scope": {
                    "value": "Soft_Attention_Model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_1109": {
                "name": {
                    "value": "attention_map",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "attention_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(relation_feats, 'AttentionMap')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_1114": {
                "name": {
                    "value": "feature_activations",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "gathered_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(features, batch_indices, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ],
                        [
                            "tf.gather(context_features, cur_b_idx, axis=0, name='ContextGather')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1117": {
                "name_or_scope": {
                    "value": "Tail_I3D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1235": {
                "name_or_scope": {
                    "value": "Non_Local_Block",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_1302": {
                "name_or_scope": {
                    "value": "Non_Local_Block",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_1356": {
                "input": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_1399": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "shape_1401": {
                "input": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_79": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_114": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_150": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_183": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_224": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_257": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_271": {
                "input": {
                    "value": "roi_box_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(slow_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_273": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sqrt_295": {
                "x": {
                    "value": "tf.cast(feature_map_channel, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_330": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_344": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "shape_347": {
                "input": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_421": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_444": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "shape_447": {
                "input": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_535": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_559": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ],
                        [
                            "[end_points[mapid] for mapid in feature_map_ids]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "shape_562": {
                "input": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_650": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_745": {
                "input": {
                    "value": "roi_box_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(slow_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_747": {
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_769": {
                "x": {
                    "value": "tf.cast(feature_map_channel, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_864": {
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_868": {
                "input": {
                    "value": "shifted_rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_945": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_1017": {
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_1021": {
                "input": {
                    "value": "shifted_rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_1071": {
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_1075": {
                "input": {
                    "value": "shifted_rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_1239": {
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_1271": {
                "name_or_scope": {
                    "value": "'NL_%i' % ii",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_1304": {
                "input": {
                    "value": "roi_box_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(slow_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(temp_avg_features, rois, batch_indices, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ],
                        [
                            "temporal_roi_cropping(context_features, shifted_rois, cur_b_idx, BOX_CROP_SIZE)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1306": {
                "input": {
                    "value": "context_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_295": {
                "x": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_363": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_465": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_475": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_498": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_580": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_590": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_613": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_769": {
                "x": {
                    "value": "feature_map_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 4",
                            "BinOp"
                        ],
                        [
                            "Cc / 2",
                            "BinOp"
                        ],
                        [
                            "Cr / 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_875": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_886": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_909": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_957": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_980": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_1027": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_1081": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "model_training/old/dataset_ava.py": {
        "tensorflow": {
            "cast_231": {
                "variable": {
                    "value": "rois_bool",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rois_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed_features['rois'], [MAX_ROIS, 4])",
                            "Call"
                        ],
                        [
                            "rois_np[:MAX_ROIS_IN_TRAINING, :]",
                            "Subscript"
                        ],
                        [
                            "np.zeros([MAX_ROIS, 4], np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_239": {
                "variable": {
                    "value": "features[frames]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_240": {
                "variable": {
                    "value": "features[num_frames]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_242": {
                "variable": {
                    "value": "features[movie]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_243": {
                "variable": {
                    "value": "features[segment]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_247": {
                "variable": {
                    "value": "parsed_features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_258": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda i: tf.image.decode_jpeg(parsed_features['frames'].values[i])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.range(0, parsed_features['num_frames'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_266": {
                "variable": {
                    "value": "(labels_np, rois_np, no_det, segment_key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "get_labels_wrapper",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[parsed_features['movie'], parsed_features['segment']]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.int32, tf.float32, tf.int64, tf.string]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "VarLenFeature_276": {
                "variable": {
                    "value": "features[frames]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_277": {
                "variable": {
                    "value": "features[num_frames]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_279": {
                "variable": {
                    "value": "features[movie]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_280": {
                "variable": {
                    "value": "features[segment]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_284": {
                "variable": {
                    "value": "features[no_det]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_285": {
                "variable": {
                    "value": "features[segment_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_286": {
                "variable": {
                    "value": "features[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(MAX_ROIS, NUM_CLASSES)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_287": {
                "variable": {
                    "value": "features[rois]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(MAX_ROIS, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_291": {
                "variable": {
                    "value": "parsed_features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_302": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda i: tf.image.decode_jpeg(parsed_features['frames'].values[i])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.range(0, parsed_features['num_frames'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_313": {
                "variable": {
                    "value": "labels_np",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parsed_features['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[MAX_ROIS, NUM_CLASSES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_314": {
                "variable": {
                    "value": "rois_np",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parsed_features['rois']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[MAX_ROIS, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "minimum_321": {
                "variable": {
                    "value": "no_det",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "no_det",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parsed_features['no_det']",
                            "Subscript"
                        ],
                        [
                            "tf.minimum(no_det, MAX_ROIS_IN_TRAINING)",
                            "Call"
                        ],
                        [
                            "len(det_boxes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "MAX_ROIS_IN_TRAINING",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ]
                    ]
                }
            },
            "cast_808": {
                "variable": {
                    "value": "rgb_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "next_element[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_819": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_821": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_any_232": {
                "input_tensor": {
                    "value": "rois_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(rois_np, tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_259": {
                "x": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "variable"
                        ],
                        [
                            "get_video_frames(segment_key, split)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda i: tf.image.decode_jpeg(parsed_features['frames'].values[i]), tf.range(0, parsed_features['num_frames']), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(sample, tf.float32)[:, :, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize_images(sample, [INPUT_H, INPUT_W])",
                            "Call"
                        ],
                        [
                            "tf.map_fn(lambda i: tf.image.decode_jpeg(parsed_features['frames'].values[i]), tf.range(0, parsed_features['num_frames']), dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(sample, [INPUT_H, INPUT_W])",
                            "Call"
                        ],
                        [
                            "np.zeros([f_timesteps, f_H, f_W, f_C], np.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_258": {
                "contents": {
                    "value": "parsed_features['frames'].values[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "decode_jpeg_302": {
                "contents": {
                    "value": "parsed_features['frames'].values[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "py_func_801": {
                "func": {
                    "value": "get_data",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[seg_key, c_split]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "output_types",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.uint8, tf.int32, tf.float32, tf.int64, tf.string]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "model_training/perf_benchmark.py": {
        "tensorflow": {
            "TFRecordDataset_28": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfrecord_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_ava.generate_tfrecord_list(val_detection_segments)",
                            "Call"
                        ]
                    ]
                },
                "num_parallel_reads": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "input_handle",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_66": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GPUOptions_75": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_76": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_77": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_88": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "prefetch_to_device_39": {
                "device": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_69": {
                "x": {
                    "value": "input_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(input_batch, tf.float32)[:, :, :, ::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/jhmdb_detect_objects.py": {
        "tensorflow": {
            "ConfigProto_176": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_179": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "detection_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "object_detection_wrapper.generate_graph(OBJ_DETECT_GRAPH_PATH)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/old_tf_03_keyframe_detect_objects.py": {
        "tensorflow": {
            "ConfigProto_163": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_166": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "detection_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "object_detection_wrapper.generate_graph(OBJ_DETECT_GRAPH_PATH)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/tfrecord_video_test/convert_ava_vids.py": {
        "tensorflow": {
            "Feature_13": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_17": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_21": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_93": {
                "variable": {
                    "value": "tfrecord_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_13": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_17": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_21": {
                "value": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TFRecordWriter_43": {
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, movie, '%s.tfrecord' % segment_no_ext)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_85": {
                "bytes_or_text": {
                    "value": "movie",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_bytes_86": {
                "bytes_or_text": {
                    "value": "segment_no_ext",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segment.split('.')[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_bytes_89": {
                "bytes_or_text": {
                    "value": "cv2.imencode('.jpg', frame)[1].tobytes()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_93": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/tfrecord_video_test/convert_ava_vids_keep_ratio.py": {
        "tensorflow": {
            "Feature_12": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_16": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_20": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_102": {
                "variable": {
                    "value": "tfrecord_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_12": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_16": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_20": {
                "value": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TFRecordWriter_42": {
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, movie, '%s.tfrecord' % segment_no_ext)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_94": {
                "bytes_or_text": {
                    "value": "movie",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_bytes_95": {
                "bytes_or_text": {
                    "value": "segment_no_ext",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segment.split('.')[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_bytes_98": {
                "bytes_or_text": {
                    "value": "cv2.imencode('.jpg', frame)[1].tobytes()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_102": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/tfrecord_video_test/convert_ava_vids_with_labels.py": {
        "tensorflow": {
            "Feature_14": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_20": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_24": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_28": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_345": {
                "variable": {
                    "value": "tfrecord_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_14": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "FloatList_20": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_24": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_28": {
                "value": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TFRecordWriter_281": {
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, movie, '%s.tfrecord' % segment_no_ext)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_331": {
                "bytes_or_text": {
                    "value": "movie",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_bytes_332": {
                "bytes_or_text": {
                    "value": "segment_no_ext",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segment.split('.')[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_bytes_335": {
                "bytes_or_text": {
                    "value": "cv2.imencode('.jpg', frame)[1].tobytes()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_345": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/tfrecord_video_test/convert_ava_vids_with_labels_COMBINED_RECORDS.py": {
        "tensorflow": {
            "Example_353": {
                "variable": {
                    "value": "tfrecord_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_13": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_19": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_23": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_27": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_338": {
                "bytes_or_text": {
                    "value": "movie",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_bytes_339": {
                "bytes_or_text": {
                    "value": "str(segment_no_ext)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_342": {
                "bytes_or_text": {
                    "value": "cv2.imencode('.jpg', frame)[1].tobytes()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_13": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "FloatList_19": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_23": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_27": {
                "value": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Features_353": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "TFRecordWriter_375": {
                "path": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/tfrecord_video_test/convert_jhmdb_vids.py": {
        "tensorflow": {
            "Feature_13": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_17": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_21": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_105": {
                "variable": {
                    "value": "tfrecord_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_13": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_17": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_21": {
                "value": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TFRecordWriter_53": {
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, movie, '%s.tfrecord' % segment_no_ext)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_bytes_97": {
                "bytes_or_text": {
                    "value": "movie",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_bytes_98": {
                "bytes_or_text": {
                    "value": "segment_no_ext",
                    "type": "variable",
                    "possible_values": [
                        [
                            "segment.split('.')[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "as_bytes_101": {
                "bytes_or_text": {
                    "value": "cv2.imencode('.jpg', frame)[1].tobytes()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_105": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/tfrecord_video_test/convert_vid_to_record.py": {
        "tensorflow": {
            "Example_49": {
                "variable": {
                    "value": "tfrecord_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_10": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_14": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_18": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_22": {
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s.tfrecord' % fname",
                            "BinOp"
                        ]
                    ]
                }
            },
            "as_bytes_42": {
                "bytes_or_text": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'0903'",
                            "str"
                        ]
                    ]
                }
            },
            "as_bytes_45": {
                "bytes_or_text": {
                    "value": "cv2.imencode('.jpg', frame)[1].tobytes()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_10": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_14": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_18": {
                "value": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Features_49": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/tfrecord_video_test/decode_record_to_vid.py": {
        "tensorflow": {
            "Session_38": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_39": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordDataset_42": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfrecord_files",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['0902.tfrecord', '0903.tfrecord']",
                            "List"
                        ]
                    ]
                }
            },
            "VarLenFeature_9": {
                "variable": {
                    "value": "features[frames]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_10": {
                "variable": {
                    "value": "features[num_frames]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_11": {
                "variable": {
                    "value": "features[filename]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_14": {
                "variable": {
                    "value": "parsed_features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "map_fn_25": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "lambda i: tf.image.decode_jpeg(parsed_features['frames'].values[i])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.range(0, parsed_features['num_frames'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "py_func_29": {
                "func": {
                    "value": "get_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[parsed_features['filename']]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.string]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_jpeg_25": {
                "contents": {
                    "value": "parsed_features['frames'].values[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/AVA_scripts/03_keyframe_detect_objects.py": {
        "torch": {
            "tensor_122": {
                "data": {
                    "value": "[W, H, W, H]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/AVA_scripts/predictor.py": {
        "torch": {
            "device_111": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "self.palette",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[2 ** 25 - 1, 2 ** 15 - 1, 2 ** 21 - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_127": {
                "variable": {
                    "value": "self.cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nonzero_239": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores > self.confidence_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_239": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "kps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kps[:, :, 0:2], scores[:, :, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_335": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(masks_per_dim * height, masks_per_dim * width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_331": {
                "variable": {
                    "value": "masks_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks_per_dim ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/AVA_scripts/run_on_folder.py": {
        "torch": {
            "tensor_78": {
                "data": {
                    "value": "[W, H, W, H]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/demo/predictor.py": {
        "torch": {
            "device_111": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "self.palette",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[2 ** 25 - 1, 2 ** 15 - 1, 2 ** 21 - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_127": {
                "variable": {
                    "value": "self.cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nonzero_239": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores > self.confidence_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_239": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "kps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(kps[:, :, 0:2], scores[:, :, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_335": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(masks_per_dim * height, masks_per_dim * width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_331": {
                "variable": {
                    "value": "masks_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks_per_dim ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/data/build.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/data/datasets/coco.py": {
        "torch": {
            "as_tensor_74": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "[self.json_category_id_to_contiguous_id[c] for c in classes]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/data/datasets/concat_dataset.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/data/datasets/evaluation/coco/coco_eval.py": {
        "torch": {
            "cat_284": {
                "variable": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_285": {
                "variable": {
                    "value": "(gt_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_290": {
                "variable": {
                    "value": "recalls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0.5, 0.95 + 1e-05, step, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_239": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno if obj['iscrowd'] == 0]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(gt_boxes).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "BoxList(gt_boxes, (image_width, image_height), mode='xywh').convert('xyxy')",
                            "Call"
                        ],
                        [
                            "gt_boxes[valid_gt_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_243": {
                "variable": {
                    "value": "gt_areas",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno if obj['iscrowd'] == 0]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_264": {
                "variable": {
                    "value": "_gt_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt_boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_289": {
                "variable": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0.95 + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "float"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "COCOResults(*iou_types)",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'coco_results.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_38": {
                "obj": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "COCOResults('box_proposal')",
                            "Call"
                        ],
                        [
                            "evaluate_predictions_on_coco(dataset.coco, coco_results[iou_type], file_path, iou_type)",
                            "Call"
                        ],
                        [
                            "self.results[iou_type]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'box_proposals.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/data/datasets/voc.py": {
        "torch": {
            "tensor_119": {
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "gt_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_121": {
                "data": {
                    "value": "difficult_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/data/samplers/distributed.py": {
        "torch": {
            "Generator_45": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_47": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_49": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/data/samplers/grouped_batch_sampler.py": {
        "torch": {
            "as_tensor_31": {
                "variable": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "group_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_43": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.sampler)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_51": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(dataset_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_52": {
                "variable": {
                    "value": "order[sampled_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "len(sampled_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_84": {
                "variable": {
                    "value": "first_index_of_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[inv_sampled_ids_map[s] for s in first_element_of_batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unique_36": {
                "input": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_36": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/data/samplers/iteration_based_batch_sampler.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/data/transforms/transforms.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/engine/inference.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_71": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_103": {
                "obj": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[predictions[i] for i in image_ids]",
                            "ListComp"
                        ],
                        [
                            "compute_on_dataset(model, data_loader, device, inference_timer)",
                            "Call"
                        ],
                        [
                            "_accumulate_predictions_from_multiple_gpus(predictions)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'predictions.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/engine/trainer.py": {
        "torch": {
            "stack_28": {
                "variable": {
                    "value": "all_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_losses, dim=0)",
                            "Call"
                        ],
                        [
                            "all_losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/layers/__init__.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/layers/_utils.py": {
        "torch": {
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/layers/batch_norm.py": {
        "torch": {
            "ones_14": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/layers/misc.py": {
        "torch": {
            "interpolate_79": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/layers/roi_align.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/layers/roi_pool.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/layers/sigmoid_focal_loss.py": {
        "torch": {
            "arange_46": {
                "variable": {
                    "value": "class_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.device",
                            "Attribute"
                        ],
                        [
                            "logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_46": {
                "variable": {
                    "value": "class_range",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_50": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_51": {
                "input": {
                    "value": "1 - p",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/layers/smooth_l1_loss.py": {
        "torch": {
            "abs_11": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_13": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n < beta",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "0.5 * n ** 2 / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "n - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/backbone/backbone.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/backbone/fbnet.py": {
        "torch": {
            "Sequential_101": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "*args": {
                    "value": "rpn_feature",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('blocks', blocks), ('last', last)])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/backbone/fbnet_builder.py": {
        "torch": {
            "zeros_245": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(C, 1, kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_267": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((C, 1, kernel_size, kernel_size), dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "stage_info[2]",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_406": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_751": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "modules",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_490": {
                "variable": {
                    "value": "self.dw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_227": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_271": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stage_cfg",
                            "variable"
                        ],
                        [
                            "stage_cfgs",
                            "variable"
                        ],
                        [
                            "arch_def['stages']",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "(self.stride, self.stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_306": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GroupNorm_387": {
                "variable": {
                    "value": "bn_op",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "gn_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn_type[1]",
                            "Subscript"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "output_depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_407": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_407": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_514": {
                "variable": {
                    "value": "self.dw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('dw1', dw1), ('dw2', dw2)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_545": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_763": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_775": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_394": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/backbone/fpn.py": {
        "torch": {
            "Conv2d_88": {
                "variable": {
                    "value": "self.p6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.p7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_59": {
                "variable": {
                    "value": "inner_top_down",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, self.inner_blocks[-1])(x[-1])",
                            "Call"
                        ],
                        [
                            "inner_lateral + inner_top_down",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_79": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p5 if self.use_P5 else c5",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_98": {
                "input": {
                    "value": "p6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p6(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/backbone/resnet.py": {
        "torch": {
            "Sequential_225": {
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu__300": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out0)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__304": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out0)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__313": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out0)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__335": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_336": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, kernel_size=1, stride=down_stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/balanced_positive_negative_sampler.py": {
        "torch": {
            "nonzero_38": {
                "variable": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_38": {
                "variable": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_39": {
                "variable": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "variable": {
                    "value": "pos_idx_per_image_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_59": {
                "variable": {
                    "value": "neg_idx_per_image_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_49": {
                "n": {
                    "value": "positive.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "positive.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_50": {
                "n": {
                    "value": "negative.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "negative.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/box_coder.py": {
        "torch": {
            "stack_49": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_77": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.bbox_xform_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_78": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.bbox_xform_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_codes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_46": {
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_47": {
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_82": {
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_83": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/detector/generalized_rcnn.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/make_layers.py": {
        "torch": {
            "Linear_89": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GroupNorm_36": {
                "num_groups": {
                    "value": "get_group_gn(out_channels, dim_per_gp, num_groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // divisor",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.GROUP_NORM.EPSILON",
                            "Attribute"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "*args": {
                    "value": "*module",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "*args": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "*args": {
                    "value": "*module",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/matcher.py": {
        "torch": {
            "nonzero_94": {
                "variable": {
                    "value": "gt_pred_pairs_of_highest_quality",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix == highest_quality_foreach_gt[:, None]",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/poolers.py": {
        "torch": {
            "sqrt_37": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cat([boxlist.area() for boxlist in boxlists])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_40": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lvl0 + torch.log2(s / self.s0 + self.eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(self.lvl0 + torch.log2(s / self.s0 + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.clamp(target_lvls, min=self.k_min, max=self.k_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.k_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.k_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.poolers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "poolers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_88": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ids, concat_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_rois, num_channels, output_size, output_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nonzero_117": {
                "variable": {
                    "value": "idx_in_level",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "levels == level",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "variable": {
                    "value": "idx_in_level",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log2_74": {
                "input": {
                    "value": "torch.tensor(scales[0], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_75": {
                "input": {
                    "value": "torch.tensor(scales[-1], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_40": {
                "input": {
                    "value": "s / self.s0 + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_83": {
                "size": {
                    "value": "(len(b), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "scales[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "scales[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/box_head/box_head.py": {
        "torch": {
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/box_head/inference.py": {
        "torch": {
            "softmax_56": {
                "variable": {
                    "value": "class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "concat_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in boxes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kthvalue_140": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.detections_per_img + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_144": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_130": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/box_head/loss.py": {
        "torch": {
            "cross_entropy_146": {
                "variable": {
                    "value": "classification_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(class_logits, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat([proposal.get_field('labels') for proposal in proposals], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_151": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_151": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_111": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_inds_img | neg_inds_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_111": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "map_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[4, 5, 6, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_156": {
                "data": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/box_head/roi_box_feature_extractors.py": {
        "torch": {
            "relu_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "*xconvs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_head_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_head_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False if use_gn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/box_head/roi_box_predictors.py": {
        "torch": {
            "AdaptiveAvgPool2d_15": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bbox_reg_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/keypoint_head/inference.py": {
        "torch": {
            "from_numpy_119": {
                "ndarray": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_119": {
                "data": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "scores.split(boxes_per_image, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "masks.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/keypoint_head/keypoint_head.py": {
        "torch": {
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/keypoint_head/loss.py": {
        "torch": {
            "nonzero_158": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat(valid, dim=0).to(dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(valid).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_158": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_168": {
                "variable": {
                    "value": "keypoint_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keypoint_logits[valid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "keypoint_targets[valid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_138": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_inds_img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/keypoint_head/roi_keypoint_feature_extractors.py": {
        "torch": {
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, layer_name)(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/keypoint_head/roi_keypoint_predictors.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/mask_head/inference.py": {
        "torch": {
            "zeros_like_100": {
                "variable": {
                    "value": "boxes_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.convert('xyxy')",
                            "Call"
                        ],
                        [
                            "[boxes]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "im_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(im_h, im_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox.get_field('labels') for bbox in boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_44": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_175": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[paste_mask_in_image(mask[0], box, im_h, im_w, self.threshold, self.padding) for (mask, box) in zip(masks, boxes.bbox)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(res, dim=0)[:, None]",
                            "Subscript"
                        ],
                        [
                            "masks.new_empty((0, 1, masks.shape[-2], masks.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/mask_head/loss.py": {
        "torch": {
            "stack_42": {
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_117": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_125": {
                "variable": {
                    "value": "mask_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_logits[positive_inds, labels_pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(mask_targets, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_32": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_41": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_86": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_per_image > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/mask_head/mask_head.py": {
        "torch": {
            "cat_68": {
                "tensors": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/mask_head/roi_mask_feature_extractors.py": {
        "torch": {
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, layer_name)(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/mask_head/roi_mask_predictors.py": {
        "torch": {
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_mask(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/roi_heads/roi_heads.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/anchor_generator.py": {
        "torch": {
            "from_numpy_243": {
                "ndarray": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_ratio_enum(anchor, aspect_ratios)",
                            "Call"
                        ],
                        [
                            "np.vstack([_scale_enum(anchors[i, :], scales) for i in range(anchors.shape[0])])",
                            "Call"
                        ],
                        [
                            "np.hstack((x_ctr - 0.5 * (ws - 1), y_ctr - 0.5 * (hs - 1), x_ctr + 0.5 * (ws - 1), y_ctr + 0.5 * (hs - 1)))",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "boxlist.bbox",
                            "Attribute"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "arange_80": {
                "variable": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_width * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_83": {
                "variable": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_height * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_86": {
                "variable": {
                    "value": "(shift_y, shift_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_height * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_width * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_89": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y, shift_x, shift_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_109": {
                "variable": {
                    "value": "inds_inside",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "anchors.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/inference.py": {
        "torch": {
            "cat_99": {
                "variable": {
                    "value": "concat_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist.get_field('objectness') for boxlist in boxlists]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_165": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_166": {
                "variable": {
                    "value": "inds_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_95": {
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "topk_175": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "permute_and_flatten(objectness, N, A, 1, H, W).view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_65": {
                "*size": {
                    "value": "len(gt_box)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/loss.py": {
        "torch": {
            "nonzero_107": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_pos_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_107": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_108": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_neg_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_pos_inds, sampled_neg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_127": {
                "variable": {
                    "value": "objectness_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness[sampled_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[sampled_inds]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_107": {
                "tensors": {
                    "value": "sampled_pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.cat(sampled_pos_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "sampled_neg_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.cat(sampled_neg_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/retinanet/inference.py": {
        "torch": {
            "kthvalue_166": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.fpn_post_nms_top_n + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_171": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_171": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_154": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/retinanet/loss.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "labels.int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_64": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/retinanet/retinanet.py": {
        "torch": {
            "Conv2d_56": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "*args": {
                    "value": "*cls_tower",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "*bbox_tower",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/rpn.py": {
        "torch": {
            "Conv2d_27": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "input": {
                    "value": "self.conv(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/rpn/utils.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/modeling/utils.py": {
        "torch": {
            "cat_16": {
                "tensors": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/solver/build.py": {
        "torch": {
            "SGD_19": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.SOLVER.BASE_LR",
                            "Attribute"
                        ],
                        [
                            "cfg.SOLVER.BASE_LR * cfg.SOLVER.BIAS_LR_FACTOR",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/solver/lr_scheduler.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/structures/bounding_box.py": {
        "torch": {
            "as_tensor_21": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BoxList([[0, 0, 10, 10], [0, 0, 5, 5]], (10, 10))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(bbox, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax, ymax), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(transposed_boxes, self.size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(cropped_box, (w, h), mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox.to(device), self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox[item], self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox, self.size, self.mode)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox.device if isinstance(bbox, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "scaled_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scaled_xmin, scaled_ymin, scaled_xmax, scaled_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "transposed_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(transposed_xmin, transposed_ymin, transposed_xmax, transposed_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "cropped_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cropped_xmin, cropped_ymin, cropped_xmax, cropped_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax, ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_20": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/structures/boxlist_ops.py": {
        "torch": {
            "max_79": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_80": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_99": {
                "tensors": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/structures/image_list.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/structures/keypoint.py": {
        "torch": {
            "as_tensor_13": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(keypoints, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "keypoints.view(num_keypoints, -1, 3)",
                            "Call"
                        ],
                        [
                            "type(self)(resized_data, size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(flipped_data, self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(self.keypoints.to(*args, **kwargs), self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "type(self)(self.keypoints[item], self.size, self.mode)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints.device if isinstance(keypoints, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_94": {
                "data": {
                    "value": "flip_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[names.index(i) for i in flipped_names]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "device_12": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/structures/segmentation_mask.py": {
        "torch": {
            "from_numpy_301": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks",
                            "variable"
                        ],
                        [
                            "cv2.UMat(mask)",
                            "Call"
                        ],
                        [
                            "mask_utils.decode(rle)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_403": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.convert_to_binarymask() for p in self.polygons]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "empty_406": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, size[1], size[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_195": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "polygons",
                            "variable"
                        ],
                        [
                            "torch.as_tensor(p, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "polygons",
                            "variable"
                        ],
                        [
                            "PolygonInstance(p, size)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.clone()",
                            "Call"
                        ],
                        [
                            "masks[None]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(masks, dim=2).clone()",
                            "Call"
                        ],
                        [
                            "masks.masks.clone()",
                            "Call"
                        ],
                        [
                            "mask_utils.decode(masks)",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.masks.detach().numpy()",
                            "Call"
                        ],
                        [
                            "self.masks[index].clone()",
                            "Call"
                        ],
                        [
                            "torch.stack([p.convert_to_binarymask() for p in self.polygons])",
                            "Call"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]], dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_56": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.clone()",
                            "Call"
                        ],
                        [
                            "masks[None]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(masks, dim=2).clone()",
                            "Call"
                        ],
                        [
                            "masks.masks.clone()",
                            "Call"
                        ],
                        [
                            "mask_utils.decode(masks)",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.masks.detach().numpy()",
                            "Call"
                        ],
                        [
                            "self.masks[index].clone()",
                            "Call"
                        ],
                        [
                            "torch.stack([p.convert_to_binarymask() for p in self.polygons])",
                            "Call"
                        ],
                        [
                            "torch.empty([0, size[1], size[0]], dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_63": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_125": {
                "input": {
                    "value": "self.masks[None].float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/utils/c2_model_loading.py": {
        "torch": {
            "from_numpy_124": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[k]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/utils/checkpoint.py": {
        "torch": {
            "save_49": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, '{}.pth'.format(name))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_95": {
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_checkpoint_file()",
                            "Call"
                        ],
                        [
                            "catalog_f",
                            "variable"
                        ],
                        [
                            "cached_f",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_95": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/utils/collect_env.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/utils/comm.py": {
        "torch": {
            "cat_80": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/utils/imports.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/utils/metric_logger.py": {
        "torch": {
            "tensor_27": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/utils/model_serialization.py": {
        "torch": {
            "as_tensor_32": {
                "variable": {
                    "value": "match_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "match_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(j) if i.endswith(j) else 0 for i in current_keys for j in loaded_keys]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(match_matrix).view(len(current_keys), len(loaded_keys))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/maskrcnn_benchmark/utils/model_zoo.py": {
        "torch": {}
    },
    "obj_detection/maskrcnn-benchmark/setup.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/tests/checkpoint.py": {
        "torch": {
            "Module_19": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Module_20": {
                "variable": {
                    "value": "m.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "m.block1.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "m.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Module_23": {
                "variable": {
                    "value": "m.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "m.res.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_27": {
                "variable": {
                    "value": "state_dict[layer1.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_28": {
                "variable": {
                    "value": "state_dict[layer1.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_29": {
                "variable": {
                    "value": "state_dict[layer2.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_30": {
                "variable": {
                    "value": "state_dict[layer2.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_31": {
                "variable": {
                    "value": "state_dict[res.layer2.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_32": {
                "variable": {
                    "value": "state_dict[res.layer2.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "nn.Linear(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_107": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_40": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_41": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_43": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_44": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_75": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_76": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_78": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_79": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/tests/test_backbones.py": {
        "torch": {
            "rand_45": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/tests/test_box_coder.py": {
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([175.62031555, 20.91103172, 253.352005, 155.0145874, 169.24636841, 4.85241556, 228.8605957, 105.02092743, 181.77426147, 199.82876587, 192.88427734, 214.0255127, 174.36262512, 186.75761414, 296.19091797, 231.27906799, 22.73153877, 92.02596283, 135.5695343, 208.80291748]).astype(np.float32).reshape(-1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0.47861834, 0.13992102, 0.14961673, 0.71495209, 0.29915856, -0.35664671, 0.89018666, 0.70815367, -0.03852064, 0.44466892, 0.49492538, 0.71409376, 0.28052918, 0.02184832, 0.65289006, 1.05060139, -0.38172557, -0.08533806, -0.60335309, 0.79052375]).astype(np.float32).reshape(-1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/tests/test_data_samplers.py": {
        "torch": {
            "SequentialSampler_31": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_44": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_64": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "RandomSampler_116": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_136": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "BatchSampler_137": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SubsetSampler([0, 3, 5, 6, 7, 8])",
                            "Call"
                        ],
                        [
                            "SubsetSampler([5, 0, 6, 1, 3, 8])",
                            "Call"
                        ],
                        [
                            "SubsetSampler([5, 0, 6, 1, 3, 8])",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3, 5, 6]",
                            "List"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "[2, 3, 4]",
                            "List"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[False, True]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/tests/test_detectors.py": {
        "torch": {
            "is_available_49": {
                "variable": {
                    "value": "TEST_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_80": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.INPUT.MIN_SIZE_TRAIN",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(x * 1.2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/tests/test_fbnet.py": {
        "torch": {
            "is_available_10": {
                "variable": {
                    "value": "TEST_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_15": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, 7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_26": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[10, 20, 7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_31": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[10, 20, 7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/tests/test_feature_extractors.py": {
        "torch": {
            "rand_52": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/tests/test_nms.py": {
        "torch": {
            "from_numpy_50": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[350.9821, 161.82, 369.9685, 205.2372], [250.5236, 154.2844, 274.1773, 204.981], [471.492, 160.4118, 496.0094, 213.4244], [352.0421, 164.5933, 366.4458, 205.9624], [166.0765, 169.7707, 183.0102, 232.6606], [252.3, 183.1449, 269.6541, 210.6747], [469.7862, 162.0192, 482.1673, 187.0053], [168.4862, 174.2567, 181.7437, 232.9379], [470.329, 162.3442, 496.4272, 214.6296], [251.045, 155.5911, 272.2693, 203.3675], [252.0326, 154.795, 273.7404, 195.3671], [351.7479, 161.9567, 370.6432, 204.3047], [496.3306, 161.7157, 515.0573, 210.72], [471.0749, 162.6143, 485.3374, 207.3448], [250.9745, 160.7633, 264.1924, 206.835], [470.4792, 169.0351, 487.1934, 220.2984], [474.4227, 161.9546, 513.1018, 215.5193], [251.9428, 184.195, 262.6937, 207.6416], [252.6623, 175.0252, 269.8806, 213.7584], [260.9884, 157.0351, 288.3554, 206.6027], [251.3629, 164.5101, 263.2179, 202.4203], [471.8361, 190.8142, 485.6812, 220.8586], [248.6243, 156.9628, 264.3355, 199.2767], [495.1643, 158.0483, 512.6261, 184.4192], [376.8718, 168.0144, 387.3584, 201.321], [122.9191, 160.7433, 172.5612, 231.3837], [350.3857, 175.8806, 366.25, 205.4329], [115.2958, 162.7822, 161.9776, 229.6147], [168.4375, 177.4041, 180.8028, 232.4551], [169.7939, 184.433, 181.4767, 232.122], [347.7536, 175.9356, 355.8637, 197.5586], [495.5434, 164.6059, 516.4031, 207.7053], [172.1216, 194.6033, 183.1217, 235.2653], [264.2654, 181.554, 288.4626, 214.017], [111.7971, 183.7748, 137.3745, 225.9724], [253.4919, 186.3945, 280.8694, 210.0731], [165.5334, 169.7344, 185.9159, 232.8514], [348.3662, 184.5187, 354.9081, 201.4038], [164.6562, 162.5724, 186.3108, 233.501], [113.2999, 186.841, 135.8841, 219.7642], [117.0282, 179.8009, 142.5375, 221.0736], [462.1312, 161.1004, 495.3576, 217.2208], [462.58, 159.931, 501.2937, 224.1655], [503.5242, 170.0733, 518.3792, 209.0113], [250.3658, 195.5925, 260.6523, 212.4679], [108.8287, 163.6994, 146.3642, 229.7261], [256.7617, 187.3123, 288.8407, 211.2013], [161.2781, 167.4801, 186.3751, 232.7133], [115.376, 177.5859, 163.3512, 236.966], [248.9077, 188.0919, 264.8579, 207.9718], [108.1349, 160.7851, 143.637, 229.6243], [465.09, 156.7555, 490.3561, 213.5704], [107.5338, 173.4323, 141.0704, 235.291]]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0.1919, 0.3293, 0.086, 0.16, 0.1885, 0.4297, 0.0974, 0.2711, 0.1483, 0.1173, 0.1034, 0.2915, 0.1993, 0.0677, 0.3217, 0.0966, 0.0526, 0.5675, 0.313, 0.1592, 0.1353, 0.0634, 0.1557, 0.1512, 0.0699, 0.0545, 0.2692, 0.1143, 0.0572, 0.199, 0.0558, 0.15, 0.2214, 0.1878, 0.2501, 0.1343, 0.0809, 0.1266, 0.0743, 0.0896, 0.0781, 0.0983, 0.0557, 0.0623, 0.5808, 0.309, 0.105, 0.0524, 0.0513, 0.4501, 0.4167, 0.0623, 0.1749]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/tests/test_predictors.py": {
        "torch": {
            "rand_47": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/tests/test_rpn_heads.py": {
        "torch": {
            "rand_39": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[N, C_in, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/tests/test_segmentation_mask.py": {
        "torch": {
            "sum_26": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(diff.float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_26": {
                "input": {
                    "value": "diff.float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/tools/test_net.py": {
        "torch": {
            "set_device_43": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "obj_detection/maskrcnn-benchmark/tools/train_net.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_38": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_detection_model(cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], output_device=local_rank, broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "train(cfg, args.local_rank, args.distributed)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_140": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}