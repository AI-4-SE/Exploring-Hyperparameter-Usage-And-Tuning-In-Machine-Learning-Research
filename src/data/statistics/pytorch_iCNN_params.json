{
    "icnn_torch/icnn.py": {
        "torch": {
            "MSELoss_47": {
                "variable": {
                    "value": "loss_fun",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "input_stim",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_stim[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_152": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "masked_select_192": {
                "variable": {
                    "value": "masked_act_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "act_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fw[target_layer_id].clone()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(mask_j).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_193": {
                "variable": {
                    "value": "masked_feat_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[target_layer].clone()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(mask_j).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_206": {
                "variable": {
                    "value": "grad_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_stim.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_206": {
                "variable": {
                    "value": "grad_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_154": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "momentum_start + t * (momentum_end - momentum_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adadelta_156": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adagrad_158": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamW_160": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SparseAdam_162": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MSELoss_55": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adamax_164": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MSELoss_57": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ASGD_166": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "RMSprop_169": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Rprop_171": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "icnn_torch/icnn_DGN.py": {
        "torch": {
            "MSELoss_41": {
                "variable": {
                    "value": "loss_fun",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "feat_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feat_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_gen_feat.copy()",
                            "Call"
                        ],
                        [
                            "torch.tensor(feat_gen).requires_grad_()",
                            "Call"
                        ],
                        [
                            "feat_gen.detach().numpy()",
                            "Call"
                        ],
                        [
                            "(1 - decay) * feat_gen",
                            "BinOp"
                        ],
                        [
                            "np.maximum(feat_gen, feat_lower_bound)",
                            "Call"
                        ],
                        [
                            "np.minimum(feat_gen, feat_upper_bound)",
                            "Call"
                        ],
                        [
                            "feat_gen.astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_181": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_gen(feat_gen).requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(img_mask).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_111": {
                "variable": {
                    "value": "feat_gen.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_gen_feat.copy()",
                            "Call"
                        ],
                        [
                            "torch.tensor(feat_gen).requires_grad_()",
                            "Call"
                        ],
                        [
                            "feat_gen.detach().numpy()",
                            "Call"
                        ],
                        [
                            "(1 - decay) * feat_gen",
                            "BinOp"
                        ],
                        [
                            "np.maximum(feat_gen, feat_lower_bound)",
                            "Call"
                        ],
                        [
                            "np.minimum(feat_gen, feat_upper_bound)",
                            "Call"
                        ],
                        [
                            "feat_gen.astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_184": {
                "variable": {
                    "value": "input.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.detach().numpy()[0]",
                            "Subscript"
                        ],
                        [
                            "torch.masked_select(img0, torch.FloatTensor(img_mask).bool()).view(img_size).requires_grad_()",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_209": {
                "variable": {
                    "value": "masked_act_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "act_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fw[target_layer_id].clone()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(mask_j).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_210": {
                "variable": {
                    "value": "masked_feat_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[target_layer].clone()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(mask_j).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_223": {
                "variable": {
                    "value": "grad_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_gen.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_223": {
                "variable": {
                    "value": "grad_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_124": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "momentum_start + t * (momentum_end - momentum_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adadelta_127": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adagrad_129": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "AdamW_131": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SparseAdam_133": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MSELoss_49": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adamax_135": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MSELoss_51": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ASGD_137": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MSELoss_53": {
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RMSprop_140": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Rprop_142": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "icnn_torch/icnn_DGN_vid.py": {
        "torch": {
            "tensor_17": {
                "data": {
                    "value": "[1.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MSELoss_46": {
                "variable": {
                    "value": "loss_fun",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "feat_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feat_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_gen_feat.copy()",
                            "Call"
                        ],
                        [
                            "torch.tensor(feat_gen).requires_grad_()",
                            "Call"
                        ],
                        [
                            "feat_gen.detach().numpy()",
                            "Call"
                        ],
                        [
                            "(1 - decay) * feat_gen",
                            "BinOp"
                        ],
                        [
                            "np.maximum(feat_gen, feat_lower_bound)",
                            "Call"
                        ],
                        [
                            "np.minimum(feat_gen, feat_upper_bound)",
                            "Call"
                        ],
                        [
                            "feat_gen.astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_130": {
                "variable": {
                    "value": "feat_gen.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_gen_feat.copy()",
                            "Call"
                        ],
                        [
                            "torch.tensor(feat_gen).requires_grad_()",
                            "Call"
                        ],
                        [
                            "feat_gen.detach().numpy()",
                            "Call"
                        ],
                        [
                            "(1 - decay) * feat_gen",
                            "BinOp"
                        ],
                        [
                            "np.maximum(feat_gen, feat_lower_bound)",
                            "Call"
                        ],
                        [
                            "np.minimum(feat_gen, feat_upper_bound)",
                            "Call"
                        ],
                        [
                            "feat_gen.astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_141": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_173": {
                "variable": {
                    "value": "input.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.detach().numpy()[0]",
                            "Subscript"
                        ],
                        [
                            "dgn.generate(feat_gen).requires_grad_()",
                            "Call"
                        ],
                        [
                            "torch_vid_preprocess(input, img_mean, img_std, norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_198": {
                "variable": {
                    "value": "masked_act_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "act_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fw[target_layer_id].clone()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(mask_j).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_199": {
                "variable": {
                    "value": "masked_feat_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[target_layer].clone()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(mask_j).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_209": {
                "variable": {
                    "value": "grad_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_gen.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_209": {
                "variable": {
                    "value": "grad_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "initial_feat_gen",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_143": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "momentum_start + t * (momentum_end - momentum_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adadelta_146": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adagrad_148": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "AdamW_150": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SparseAdam_152": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adamax_154": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ASGD_156": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RMSprop_159": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Rprop_161": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_gen]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "icnn_torch/icnn_flow_model.py": {
        "torch": {
            "MSELoss_45": {
                "variable": {
                    "value": "loss_fun",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "input_stim",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_stim[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "masked_select_180": {
                "variable": {
                    "value": "masked_act_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "act_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fw[target_layer_id].clone()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(mask_j).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_181": {
                "variable": {
                    "value": "masked_feat_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[target_layer].clone()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(mask_j).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_191": {
                "variable": {
                    "value": "grad_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_stim.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_191": {
                "variable": {
                    "value": "grad_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_142": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "momentum_start + t * (momentum_end - momentum_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adadelta_144": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adagrad_146": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamW_148": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SparseAdam_150": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adamax_152": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ASGD_154": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "RMSprop_157": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Rprop_159": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_stim]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "icnn_torch/icnn_lbfgs.py": {
        "torch": {
            "MSELoss_37": {
                "variable": {
                    "value": "loss_fun",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input[np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LBFGS_129": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "masked_select_144": {
                "variable": {
                    "value": "masked_act_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "act_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fw[target_layer_id].clone()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(mask_j).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_145": {
                "variable": {
                    "value": "masked_feat_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[target_layer].clone()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(mask_j).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "icnn_torch/loss.py": {
        "torch": {
            "mean_73": {
                "variable": {
                    "value": "m_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((m, y), dim=0)",
                            "Call"
                        ],
                        [
                            "m",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_16": {
                "variable": {
                    "value": "self.loss_fun",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "masked_select_29": {
                "variable": {
                    "value": "diff_masked",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vid - torch.roll(vid, 1, 0)",
                            "BinOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(img_mask).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_88": {
                "variable": {
                    "value": "self.loss_fun",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_77": {
                "equation": {
                    "value": "bnm,bmk->bnk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.permute(0, 2, 1) - m_exp[:, None]",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "act_flat",
                            "variable"
                        ],
                        [
                            "convert_for_corrmat(act)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_78": {
                "equation": {
                    "value": "bn,bm->bnm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x.std(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_116": {
                "variable": {
                    "value": "self.weight_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(loss_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roll_28": {
                "input": {
                    "value": "vid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.vid",
                            "Attribute"
                        ],
                        [
                            "vid",
                            "Method Argument"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "diff_masked ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_56": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.permute(0, 2, 1) - m_exp[:, None]",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "act_flat",
                            "variable"
                        ],
                        [
                            "convert_for_corrmat(act)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_57": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_flat",
                            "variable"
                        ],
                        [
                            "convert_for_corrmat(feat)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_59": {
                "input": {
                    "value": "vy ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_59": {
                "input": {
                    "value": "torch.sum(vy ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "data": {
                    "value": "len(self.weight_list)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "icnn_torch/utils.py": {
        "torch": {
            "Tensor_345": {
                "variable": {
                    "value": "tmp_input",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "icnn_torch/utils_hts.py": {
        "torch": {
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "*args": {
                    "value": "nn.ConvTranspose2d(in_planes, out_planes, kernel_size=4, stride=2, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_9": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=(kernel_size - 1) // 2, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_36": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_37": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "weight.data[i, j, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bilinear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([heigh, width])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_12": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_17": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "icnn_torch_ME/icnn_ME.py": {
        "torch": {
            "MSELoss_40": {
                "variable": {
                    "value": "loss_fun",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_input.copy().astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(input, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "np.roll(np.roll(input, ox, -1), oy, -2)",
                            "Call"
                        ],
                        [
                            "input.detach().numpy()",
                            "Call"
                        ],
                        [
                            "clip_extreme_value(input, e_pct)",
                            "Call"
                        ],
                        [
                            "clip_small_norm_value(input, n_pct)",
                            "Call"
                        ],
                        [
                            "np.roll(np.roll(input, -ox, -1), -oy, -2)",
                            "Call"
                        ],
                        [
                            "(1 - decay) * input",
                            "BinOp"
                        ],
                        [
                            "gaussian_blur_ME(input, sigma)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "masked_select_158": {
                "variable": {
                    "value": "masked_act_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "act_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fw.clone()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(mask_j).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_159": {
                "variable": {
                    "value": "masked_feat_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[target_layer].clone()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(mask_j).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_116": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_169": {
                "variable": {
                    "value": "grad_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_169": {
                "variable": {
                    "value": "grad_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_118": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "momentum_start + t * (momentum_end - momentum_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adadelta_121": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adagrad_123": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "AdamW_125": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SparseAdam_127": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adamax_129": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ASGD_131": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RMSprop_134": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Rprop_136": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "icnn_torch_ME/utils_ME.py": {
        "torch": {
            "Tensor_267": {
                "variable": {
                    "value": "tmp_input",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "icnn_torch_merge/icnn_combine.py": {
        "torch": {
            "MSELoss_53": {
                "variable": {
                    "value": "loss_fun",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_input.copy().astype(np.float32)",
                            "Call"
                        ],
                        [
                            "input.detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_119": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "img_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_mean_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "variable": {
                    "value": "img_std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_std_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_121": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "momentum_start + t * (momentum_end - momentum_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adadelta_124": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_173": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "inp.mean(0)",
                            "Call"
                        ],
                        [
                            "torch_img_preprocess(inp, img_mean, img_std, norm)",
                            "Call"
                        ],
                        [
                            "torch_vid_preprocess(inp, img_mean, img_std, norm)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "inp.view([1] + list(inp.shape))",
                            "Call"
                        ],
                        [
                            "F.interpolate(inp, (56, 56), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(56, 56)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adagrad_126": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "AdamW_128": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SparseAdam_130": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adamax_132": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ASGD_134": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RMSprop_136": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Rprop_138": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "icnn_torch_merge/icnn_combine_ME.py": {
        "torch": {
            "MSELoss_55": {
                "variable": {
                    "value": "loss_fun",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_input.copy().astype(np.float32)",
                            "Call"
                        ],
                        [
                            "input.detach().numpy().copy()",
                            "Call"
                        ],
                        [
                            "clip_extreme_value(input_, e_pct)",
                            "Call"
                        ],
                        [
                            "clip_small_norm_value(input_, n_pct)",
                            "Call"
                        ],
                        [
                            "np.roll(np.roll(input_, -ox, -1), -oy, -2)",
                            "Call"
                        ],
                        [
                            "(1 - decay) * input_",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_126": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "img_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_mean_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "img_std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_std_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_128": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "momentum_start + t * (momentum_end - momentum_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adadelta_131": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adagrad_133": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_177": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(56, 56)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamW_135": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_208": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.clone()",
                            "Call"
                        ],
                        [
                            "inp.permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "inp.mean(0)",
                            "Call"
                        ],
                        [
                            "torch_img_preprocess(inp, img_mean, img_std, norm)",
                            "Call"
                        ],
                        [
                            "torch_vid_preprocess(inp, img_mean, img_std, norm)",
                            "Call"
                        ],
                        [
                            "inp.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "rgb2gray(inp)",
                            "Call"
                        ],
                        [
                            "inp - rgb2gray(img_mean)",
                            "BinOp"
                        ],
                        [
                            "inp.view([1] + list(inp.shape))",
                            "Call"
                        ],
                        [
                            "m(inp)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(inp, (224, 224), mode='bicubic', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SparseAdam_137": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adamax_139": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ASGD_141": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RMSprop_143": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Rprop_145": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "icnn_torch_merge/icnn_combine_ME_DGN.py": {
        "torch": {
            "MSELoss_59": {
                "variable": {
                    "value": "loss_fun",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "feat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feat_input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_feat_gen.copy()",
                            "Call"
                        ],
                        [
                            "feat_input.detach().numpy().copy()",
                            "Call"
                        ],
                        [
                            "np.maximum(feat_input_, feat_lower_bound).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.minimum(feat_input_, feat_upper_bound).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_139": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "img_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_mean_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "img_std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_std_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "initial_feat_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1, feat_size_gen).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_141": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "momentum_start + t * (momentum_end - momentum_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adadelta_144": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adagrad_146": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_193": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(56, 56)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamW_148": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_224": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.clone()",
                            "Call"
                        ],
                        [
                            "inp.permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "inp.mean(0)",
                            "Call"
                        ],
                        [
                            "torch_img_preprocess(inp, img_mean, img_std, norm)",
                            "Call"
                        ],
                        [
                            "torch_vid_preprocess(inp, img_mean, img_std, norm)",
                            "Call"
                        ],
                        [
                            "inp.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "rgb2gray(inp)",
                            "Call"
                        ],
                        [
                            "inp - rgb2gray(img_mean)",
                            "BinOp"
                        ],
                        [
                            "inp.view([1] + list(inp.shape))",
                            "Call"
                        ],
                        [
                            "m(inp)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(inp, (224, 224), mode='bicubic', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SparseAdam_150": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adamax_152": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ASGD_154": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RMSprop_156": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Rprop_158": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[feat_input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "icnn_torch_merge/icnn_combine_ME_MoCoGan.py": {
        "torch": {
            "tensor_127": {
                "variable": {
                    "value": "eps_input_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, d_E).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(eps_input_, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "z_C_input_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "z_C_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, d_C).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(z_C_input_, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MSELoss_59": {
                "variable": {
                    "value": "loss_fun",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_84": {
                "variable": {
                    "value": "initial_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dgn.generate(torch.tensor(eps_init), torch.tensor(z_C_init))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input_size[1:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_84": {
                "variable": {
                    "value": "initial_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "variable": {
                    "value": "eps_init",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps_input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eps_init)",
                            "Call"
                        ],
                        [
                            "eps_init.detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.maximum(eps_input_, feat_lower_bound)",
                            "Call"
                        ],
                        [
                            "np.minimum(eps_input_, feat_upper_bound)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "z_C_init",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "z_C_input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(z_C_init)",
                            "Call"
                        ],
                        [
                            "z_C_init.detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.maximum(z_C_input_, feat_lower_bound)",
                            "Call"
                        ],
                        [
                            "np.minimum(z_C_input_, feat_upper_bound)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_168": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dgn.generate(eps_init, z_C_init)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input_size[1:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_168": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_145": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[eps_init, z_C_init]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "img_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_mean_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "img_std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_std_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "z_C_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(batch_size, d_C).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(z_C_input_, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_147": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[eps_init, z_C_init]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "momentum_start + t * (momentum_end - momentum_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adadelta_150": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[eps_init, z_C_init]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adagrad_152": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[eps_init, z_C_init]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_198": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(56, 56)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamW_154": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[eps_init, z_C_init]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_229": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.clone()",
                            "Call"
                        ],
                        [
                            "inp.permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "inp.mean(0)",
                            "Call"
                        ],
                        [
                            "torch_img_preprocess(inp, img_mean, img_std, norm)",
                            "Call"
                        ],
                        [
                            "torch_vid_preprocess(inp, img_mean, img_std, norm)",
                            "Call"
                        ],
                        [
                            "inp.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "rgb2gray(inp)",
                            "Call"
                        ],
                        [
                            "inp - rgb2gray(img_mean)",
                            "BinOp"
                        ],
                        [
                            "inp.view([1] + list(inp.shape))",
                            "Call"
                        ],
                        [
                            "m(inp)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(inp, (224, 224), mode='bicubic', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SparseAdam_156": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[eps_init, z_C_init]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adamax_158": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[eps_init, z_C_init]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ASGD_160": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[eps_init, z_C_init]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RMSprop_162": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[eps_init, z_C_init]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Rprop_164": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[eps_init, z_C_init]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "icnn_torch_merge/icnn_combine_motionnet.py": {
        "torch": {
            "MSELoss_53": {
                "variable": {
                    "value": "loss_fun",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_input.copy().astype(np.float32)",
                            "Call"
                        ],
                        [
                            "input.detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_119": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "img_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_mean_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "variable": {
                    "value": "img_std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_std_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_121": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "momentum_start + t * (momentum_end - momentum_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adadelta_124": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adagrad_126": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_174": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "inp.view([1] + list(inp.shape))",
                            "Call"
                        ],
                        [
                            "inp.mean(0)",
                            "Call"
                        ],
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "torch_img_preprocess(inp, img_mean, img_std, norm)",
                            "Call"
                        ],
                        [
                            "F.interpolate(inp, (56, 56), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch_vid2flow(inp)",
                            "Call"
                        ],
                        [
                            "torch_flow_preprocess(inp, img_mean, img_std, norm)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(56, 56)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamW_128": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SparseAdam_130": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adamax_132": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ASGD_134": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RMSprop_136": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Rprop_138": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_start + t * (lr_end - lr_start) / iter_n",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "icnn_torch_merge/merge_utils.py": {
        "torch": {
            "tensor_5": {
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_6": {
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "data": {
                    "value": "[1.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "masked_select_63": {
                "variable": {
                    "value": "masked_act_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "act_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fw[target_layer_id].clone()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(mask_j).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_64": {
                "variable": {
                    "value": "masked_feat_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[target_layer].clone()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.FloatTensor(mask_j).bool()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}