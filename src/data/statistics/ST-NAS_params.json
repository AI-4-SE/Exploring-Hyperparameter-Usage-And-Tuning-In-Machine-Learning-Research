{
    "ASR/scripts/ArchSearch.py": {
        "torch": {
            "DataLoader_95": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tr_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "PadCollate()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset([test_set, test_originset])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "PadCollate()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConcatDataset_91": {
                "variable": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[test_set, test_originset]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_109": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tr_originset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SpeechDataset('{}{}/tr.{}'.format(dir_dataset, data_format, data_format))",
                            "Call"
                        ],
                        [
                            "SpeechDatasetMem('{}{}/tr.{}'.format(dir_dataset, data_format, data_format), args.debug)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "PadCollate()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_originset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SpeechDataset('{}{}/cv.{}'.format(dir_dataset, data_format, data_format))",
                            "Call"
                        ],
                        [
                            "SpeechDatasetMem('{}{}/cv.{}'.format(dir_dataset, data_format, data_format), args.debug)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "PadCollate()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_131": {
                "input": {
                    "value": "torch.sum(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_192": {
                "seed": {
                    "value": "SEED",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_all_193": {
                "seed": {
                    "value": "SEED",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_131": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ASR/scripts/calculate_logits.py": {
        "torch": {
            "load_37": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feature[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ASR/scripts/toolkit/NASTop.py": {
        "torch": {
            "device_635": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_636": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "NasModel(supernet, lossfn, args.lamb, net_configs)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "nasmanager.net",
                            "Attribute"
                        ],
                        [
                            "build_model(args, candidates=selected_op)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "self.arch_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "archList",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Adam_277": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lrRetrain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_495": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "PATH",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "PATH + '/'",
                            "BinOp"
                        ],
                        [
                            "PATH + '/'",
                            "BinOp"
                        ],
                        [
                            "PATH + '/'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sort_681": {
                "variable": {
                    "value": "(input_lengths, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_683": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(logits, 0, indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_684": {
                "variable": {
                    "value": "labels_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_padded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.index_select(labels_padded, 0, indices)",
                            "Call"
                        ],
                        [
                            "labels_padded.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_685": {
                "variable": {
                    "value": "label_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_lengths",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.index_select(label_lengths, 0, indices)",
                            "Call"
                        ],
                        [
                            "label_lengths.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_692": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[labels_padded[i, :x] for (i, x) in enumerate(label_lengths)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "log_softmax_695": {
                "variable": {
                    "value": "netout",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "netout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(netout, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_725": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path_weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "self.net_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "netList",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "lrNet",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "self.net_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "fixed_list + netList",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lrNet",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_cache_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_283": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resumeRetrain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_721": {
                "variable": {
                    "value": "partial_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_801": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path_weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_cache_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_481": {
                "obj": {
                    "value": "{'model': self.net.state_dict(), 'net_lr_scheduler': self.net_lr_scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "PATH + name + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_486": {
                "obj": {
                    "value": "{'model': self.net.state_dict(), 'net_lr_scheduler': self.net_lr_scheduler.state_dict(), 'arch_lr_scheduler': self.arch_lr_scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "PATH + name + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_697": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_698": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(logits, labels_padded, input_lengths, label_lengths)",
                            "Call"
                        ],
                        [
                            "model(logits, labels_padded, input_lengths, label_lengths)",
                            "Call"
                        ],
                        [
                            "model(logits, labels_padded, input_lengths, label_lengths)",
                            "Call"
                        ],
                        [
                            "model(logits, labels_padded, input_lengths, label_lengths)",
                            "Call"
                        ],
                        [
                            "model(logits, labels_padded, input_lengths, label_lengths)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.net(logits.cuda(), labels_padded.cuda(), input_lengths.cuda(), label_lengths.cuda())",
                            "Call"
                        ],
                        [
                            "self.net(logits.cuda(), labels_padded.cuda(), input_lengths.cuda(), label_lengths.cuda())",
                            "Call"
                        ],
                        [
                            "self.loss_fn(netout, labels, lens_o.to(torch.int32).cpu(), label_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_716": {
                "variable": {
                    "value": "partial_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_760": {
                "variable": {
                    "value": "partial_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_761": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path_weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_798": {
                "variable": {
                    "value": "partial_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_821": {
                "obj": {
                    "value": "{'model': model.state_dict(), 'lr_scheduler': lr_scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_path + '/model.epoch.{:02d}.pt'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_125": {
                "variable": {
                    "value": "partial_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_126": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path_weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_219": {
                "variable": {
                    "value": "partial_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_220": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path_weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_715": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_718": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_759": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_789": {
                "variable": {
                    "value": "partial_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_793": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_827": {
                "obj": {
                    "value": "{'model': model.state_dict(), 'lr_scheduler': lr_scheduler.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_path + '/model.epoch.{:02d}.pt'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_833": {
                "obj": {
                    "value": "model.module.infer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_path + '/model.bestforinfer.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_429": {
                "variable": {
                    "value": "node.idx_involved",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "node.raiseArchProbs()",
                            "Call"
                        ],
                        [
                            "node.raiseArchProbs()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_788": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_795": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ASR/scripts/toolkit/dataset_pickle.py": {
        "torch": {
            "cat_55": {
                "tensors": {
                    "value": "[t, torch.zeros(*pad_size).type_as(t)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_80": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "map(lambda x: pad_tensor(x[0], max_input_length, 0), batch)",
                            "Call"
                        ],
                        [
                            "list(input_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_81": {
                "variable": {
                    "value": "label_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "map(lambda x: pad_tensor(x[1], max_label_length, 0), batch)",
                            "Call"
                        ],
                        [
                            "list(label_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "*pad_size",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "ASR/scripts/toolkit/modules/Block.py": {
        "torch": {
            "max_23": {
                "variable": {
                    "value": "(_, idx_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "node.raiseArchProbs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(orderOut, flipreverse)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ASR/scripts/toolkit/modules/Edge.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.arch_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "arch_init()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiheadAttention_33": {
                "variable": {
                    "value": "self.self_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "dim_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_heads": {
                    "value": "nhead",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_36": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_39": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim_i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_40": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim_i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_42": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_81": {
                "variable": {
                    "value": "packed_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kwargs['features']",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "kwargs['lens']",
                            "Subscript"
                        ],
                        [
                            "kwargs['lens']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_83": {
                "variable": {
                    "value": "(rnn_out, lens_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "total_length": {
                    "value": "len_total",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_94": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "idim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_106": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "idim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_118": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "idim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_132": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "idim",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_147": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2 * half_context + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "half_context * dilation",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_update('(?<=S)\\\\d+', 1)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_update('(?<=D)\\\\d+', 1)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_163": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tdnn_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv(tdnn_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_221": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_153": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim_o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_205": {
                "*size": {
                    "value": "[features.size(0), features.size(1), self.out]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "features.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "features.layout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ASR/scripts/toolkit/modules/Node.py": {
        "torch": {
            "ModuleList_38": {
                "variable": {
                    "value": "self.candidates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_46": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "archs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.raiseArchProbs()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_68": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_raiseArchWeights(idxList, requires_grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "arch_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "arch_weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.zeros(len(idxList))",
                            "Call"
                        ],
                        [
                            "torch.cat(arch_weight, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "arch_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(idxList)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ASR/scripts/toolkit/modules/maskedbatchnorm1d.py": {
        "torch": {
            "as_tensor_27": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(max_len, device=lengths.device, dtype=lengths.dtype).expand(len(lengths), max_len) < lengths.unsqueeze(1)",
                            "Compare"
                        ],
                        [
                            "torch.as_tensor(mask, dtype=dtype, device=lengths.device)",
                            "Call"
                        ],
                        [
                            "lengths_to_mask(lengths, max_len=inp.shape[-1], dtype=inp.dtype)",
                            "Call"
                        ],
                        [
                            "mask / n",
                            "BinOp"
                        ],
                        [
                            "mask.unsqueeze(1).expand(inp.shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_21": {
                "start": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_len or lengths.max().item()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "lengths.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_93": {
                "input": {
                    "value": "var[None, :, None] + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ASR/scripts/toolkit/modules/superNet.py": {
        "torch": {
            "Linear_159": {
                "in_features": {
                    "value": "odims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}