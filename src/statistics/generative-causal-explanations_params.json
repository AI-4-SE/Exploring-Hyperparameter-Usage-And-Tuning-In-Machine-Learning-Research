{
    "make_fig4_left.py": {
        "tensorflow": {
            "expand_dims_175": {
                "variable": {
                    "value": "threshold",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.top_k(logits, self.k, sorted=True)[0][:, -1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cast_176": {
                "variable": {
                    "value": "discrete_logits",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater_equal(logits, threshold)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "shape_163": {
                "input": {
                    "value": "logits_",
                    "possible_values": [
                        [
                            "keras.backend.expand_dims(logits, -2)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_164": {
                "input": {
                    "value": "logits_",
                    "possible_values": [
                        [
                            "keras.backend.expand_dims(logits, -2)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_176": {
                "x": {
                    "value": "logits",
                    "possible_values": []
                },
                "y": {
                    "value": "threshold",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.nn.top_k(logits, self.k, sorted=True)[0][:, -1], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_175": {
                "input": {
                    "value": "logits",
                    "possible_values": []
                },
                "k": {
                    "value": "self.k",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "sample_inputs_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sample_inputs",
                    "possible_values": [
                        [
                            "vaX[0:test_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_55": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "classifier_save_dir",
                    "possible_values": [
                        [
                            "'./pretrained_models/mnist_38_classifier/model.pt'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_292": {
                "variable": {
                    "value": "trX_sample_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "trX_sample",
                    "possible_values": [
                        [
                            "trX[np.random.choice(trX.shape[0], 1000, replace=False)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_292": {
                "variable": {
                    "value": "trX_sample_torch",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "from_numpy_294": {
                "variable": {
                    "value": "x3_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.expand_dims(x3, 0)",
                    "possible_values": []
                }
            },
            "permute_294": {
                "variable": {
                    "value": "x3_torch",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "from_numpy_295": {
                "variable": {
                    "value": "x8_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.expand_dims(x8, 0)",
                    "possible_values": []
                }
            },
            "permute_295": {
                "variable": {
                    "value": "x8_torch",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "xs_scaled",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xs_scaled",
                    "possible_values": [
                        [
                            "np.zeros((parameters['ig']['steps'] + 1, *x.shape))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(xs_scaled).permute(0, 3, 1, 2).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_79": {
                "variable": {
                    "value": "xs_scaled",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_82": {
                "variable": {
                    "value": "ce_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_108": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "from_numpy_109": {
                "variable": {
                    "value": "X_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "possible_values": [
                        [
                            "X[:, :, :, 0:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_109": {
                "variable": {
                    "value": "X_torch",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "ndarray": {
                    "value": "i_class * np.ones(parameters['ig']['steps'] + 1)",
                    "possible_values": []
                }
            },
            "is_available_108": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "trX",
                    "possible_values": []
                }
            },
            "permute_58": {
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "ndarray": {
                    "value": "vaX",
                    "possible_values": []
                }
            },
            "permute_59": {
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    },
    "GCE.py": {
        "torch": {
            "from_numpy_76": {
                "variable": {
                    "value": "sample_input",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X[0]",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "sample_input",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "permute_76": {
                "variable": {
                    "value": "sample_input",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Adam_108": {
                "variable": {
                    "value": "self.opt",
                    "possible_values": []
                },
                "params": {
                    "value": "opt_params",
                    "possible_values": [
                        [
                            "list(self.decoder.parameters()) + list(self.encoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(b1, b2)",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "Xbatch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X[randIdx]",
                    "possible_values": []
                }
            },
            "permute_119": {
                "variable": {
                    "value": "Xbatch",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "save_156": {
                "obj": {
                    "value": "{'step': k, 'model_state_dict_classifier': self.classifier.state_dict(), 'model_state_dict_encoder': self.encoder.state_dict(), 'model_state_dict_decoder': self.decoder.state_dict(), 'optimizer_state_dict': self.opt.state_dict(), 'loss': loss}",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s_batch_%d.pt' % (self.params['save_dir'], self.params['batch_size'])",
                    "possible_values": []
                }
            },
            "unsqueeze_196": {
                "input": {
                    "value": "torch.from_numpy(ztilde)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_196": {
                "ndarray": {
                    "value": "ztilde",
                    "possible_values": [
                        [
                            "z.copy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "causaleffect.py": {
        "torch": {
            "zeros_24": {
                "variable": {
                    "value": "q",
                    "possible_values": []
                },
                "*size": {
                    "value": "params['M']",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "q",
                    "possible_values": []
                },
                "*size": {
                    "value": "params['M']",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "torch.mul(q, torch.log(q + eps))",
                    "possible_values": []
                }
            },
            "sum_84": {
                "input": {
                    "value": "torch.mul(q, torch.log(q + eps))",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "ndarray": {
                    "value": "zs",
                    "possible_values": [
                        [
                            "np.zeros((params['Nalpha'] * params['Nbeta'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Nbeta'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Nalpha'] * params['Nbeta'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Nbeta'], params['z_dim']))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_36": {
                "input": {
                    "value": "yhat",
                    "possible_values": [
                        [
                            "classifier(xhat)[0]",
                            "Subscript"
                        ],
                        [
                            "classifier(xhat)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "mul_39": {
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "torch.zeros(params['M']).to(device)",
                            "Call"
                        ],
                        [
                            "q + 1.0 / float(params['Nalpha']) * p",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(params['M']).to(device)",
                            "Call"
                        ],
                        [
                            "q + 1.0 / float(params['Nalpha']) * p",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(q + eps)",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "ndarray": {
                    "value": "zs",
                    "possible_values": [
                        [
                            "np.zeros((params['Nalpha'] * params['Nbeta'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Nbeta'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Nalpha'] * params['Nbeta'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Nbeta'], params['z_dim']))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_81": {
                "input": {
                    "value": "yhat",
                    "possible_values": [
                        [
                            "classifier(xhat)[0]",
                            "Subscript"
                        ],
                        [
                            "classifier(xhat)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "mul_84": {
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "torch.zeros(params['M']).to(device)",
                            "Call"
                        ],
                        [
                            "q + 1.0 / float(params['Nalpha']) * p",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(params['M']).to(device)",
                            "Call"
                        ],
                        [
                            "q + 1.0 / float(params['Nalpha']) * p",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(q + eps)",
                    "possible_values": []
                }
            },
            "sum_37": {
                "input": {
                    "value": "torch.mul(p, torch.log(p + eps))",
                    "possible_values": []
                }
            },
            "log_39": {
                "input": {
                    "value": "q + eps",
                    "possible_values": []
                }
            },
            "sum_82": {
                "input": {
                    "value": "torch.mul(p, torch.log(p + eps))",
                    "possible_values": []
                }
            },
            "log_84": {
                "input": {
                    "value": "q + eps",
                    "possible_values": []
                }
            },
            "mul_37": {
                "input": {
                    "value": "p",
                    "possible_values": [
                        [
                            "1.0 / float(params['Nbeta']) * torch.sum(yhat, 0)",
                            "BinOp"
                        ],
                        [
                            "1.0 / float(params['Nbeta']) * torch.sum(yhat, 0)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(p + eps)",
                    "possible_values": []
                }
            },
            "mul_82": {
                "input": {
                    "value": "p",
                    "possible_values": [
                        [
                            "1.0 / float(params['Nbeta']) * torch.sum(yhat, 0)",
                            "BinOp"
                        ],
                        [
                            "1.0 / float(params['Nbeta']) * torch.sum(yhat, 0)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(p + eps)",
                    "possible_values": []
                }
            },
            "log_37": {
                "input": {
                    "value": "p + eps",
                    "possible_values": []
                }
            },
            "log_82": {
                "input": {
                    "value": "p + eps",
                    "possible_values": []
                }
            }
        }
    },
    "causaleffect_lingauss_decoder.py": {
        "torch": {
            "zeros_207": {
                "variable": {
                    "value": "qo_vec",
                    "possible_values": []
                },
                "*size": {
                    "value": "params['y_dim']",
                    "possible_values": []
                }
            },
            "log_233": {
                "variable": {
                    "value": "qo_log",
                    "possible_values": []
                },
                "input": {
                    "value": "qo_vec + eps_add * torch.ones_like(qo_vec)",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "latent_vec_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "latent_vec",
                    "possible_values": [
                        [
                            "np.zeros((params['alpha_dim'] * params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['alpha_dim'] * params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "qo_vec",
                    "possible_values": []
                },
                "*size": {
                    "value": "yhat.shape[1]",
                    "possible_values": []
                }
            },
            "log_79": {
                "variable": {
                    "value": "qo_log",
                    "possible_values": []
                },
                "input": {
                    "value": "qo_vec + eps_add * torch.ones_like(qo_vec)",
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "variable": {
                    "value": "latent_vec_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "latent_vec",
                    "possible_values": [
                        [
                            "np.zeros((params['alpha_dim'] * params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['alpha_dim'] * params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_218": {
                "variable": {
                    "value": "latent_vec_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "latent_vec",
                    "possible_values": [
                        [
                            "np.zeros((params['alpha_dim'] * params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['alpha_dim'] * params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_230": {
                "variable": {
                    "value": "q_log",
                    "possible_values": []
                },
                "input": {
                    "value": "q_vec + eps_add * torch.ones_like(q_vec)",
                    "possible_values": []
                }
            },
            "from_numpy_288": {
                "variable": {
                    "value": "latent_vec_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "latent_vec",
                    "possible_values": [
                        [
                            "np.zeros((params['alpha_dim'] * params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['alpha_dim'] * params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_304": {
                "variable": {
                    "value": "y_log",
                    "possible_values": []
                },
                "input": {
                    "value": "y_use + eps_add * torch.ones_like(y_use)",
                    "possible_values": []
                }
            },
            "log_307": {
                "variable": {
                    "value": "q_log",
                    "possible_values": []
                },
                "input": {
                    "value": "q_vec + eps_add * torch.ones_like(q_vec)",
                    "possible_values": []
                }
            },
            "log_75": {
                "variable": {
                    "value": "q_log",
                    "possible_values": []
                },
                "input": {
                    "value": "q_vec + eps_add * torch.ones_like(q_vec)",
                    "possible_values": []
                }
            },
            "sum_80": {
                "input": {
                    "value": "torch.mul(qo_vec, qo_log)",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "torch.mul(qo_vec, qo_log)",
                    "possible_values": []
                }
            },
            "log_162": {
                "variable": {
                    "value": "y_log",
                    "possible_values": []
                },
                "input": {
                    "value": "y_use + eps_add * torch.ones_like(y_use)",
                    "possible_values": []
                }
            },
            "log_166": {
                "variable": {
                    "value": "q_log",
                    "possible_values": []
                },
                "input": {
                    "value": "q_vec + eps_add * torch.ones_like(q_vec)",
                    "possible_values": []
                }
            },
            "sum_234": {
                "input": {
                    "value": "torch.mul(qo_vec, qo_log)",
                    "possible_values": []
                }
            },
            "from_numpy_278": {
                "variable": {
                    "value": "latent_vec_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "latent_vec",
                    "possible_values": [
                        [
                            "np.zeros((params['alpha_dim'] * params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['alpha_dim'] * params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "latent_vec_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "latent_vec",
                    "possible_values": [
                        [
                            "np.zeros((params['alpha_dim'] * params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['alpha_dim'] * params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_80": {
                "input": {
                    "value": "qo_vec",
                    "possible_values": [
                        [
                            "torch.zeros(yhat.shape[1]).to(device)",
                            "Call"
                        ],
                        [
                            "qo_vec + 1 / float(params['No']) * q_vec",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(params['y_dim']).to(device)",
                            "Call"
                        ],
                        [
                            "qo_vec + 1 / float(params['No']) * q_vec",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "qo_log",
                    "possible_values": [
                        [
                            "torch.log(qo_vec + eps_add * torch.ones_like(qo_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(qo_vec + eps_add * torch.ones_like(qo_vec))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_81": {
                "input": {
                    "value": "qo_vec",
                    "possible_values": [
                        [
                            "torch.zeros(yhat.shape[1]).to(device)",
                            "Call"
                        ],
                        [
                            "qo_vec + 1 / float(params['No']) * q_vec",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(params['y_dim']).to(device)",
                            "Call"
                        ],
                        [
                            "qo_vec + 1 / float(params['No']) * q_vec",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "qo_log",
                    "possible_values": [
                        [
                            "torch.log(qo_vec + eps_add * torch.ones_like(qo_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(qo_vec + eps_add * torch.ones_like(qo_vec))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "latent_vec_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "latent_vec",
                    "possible_values": [
                        [
                            "np.zeros((params['alpha_dim'] * params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['alpha_dim'] * params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['No'] * params['Ni'], params['z_dim']))",
                            "Call"
                        ],
                        [
                            "np.zeros((params['Ni'], params['z_dim']))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_229": {
                "input": {
                    "value": "yhat",
                    "possible_values": [
                        [
                            "classifier(Xhat)[0]",
                            "Subscript"
                        ],
                        [
                            "yhat_single",
                            "Name"
                        ],
                        [
                            "torch.cat((yhat, yhat_single), 0)",
                            "Call"
                        ],
                        [
                            "classifier(Xhat)[0]",
                            "Subscript"
                        ],
                        [
                            "yhat_single",
                            "Name"
                        ],
                        [
                            "torch.cat((yhat, yhat_single), 0)",
                            "Call"
                        ],
                        [
                            "classifier(Xhat)[0]",
                            "Subscript"
                        ],
                        [
                            "classifier(Xhat)[0]",
                            "Subscript"
                        ],
                        [
                            "yhat_single",
                            "Name"
                        ],
                        [
                            "torch.cat((yhat, yhat_single), 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "mul_234": {
                "input": {
                    "value": "qo_vec",
                    "possible_values": [
                        [
                            "torch.zeros(yhat.shape[1]).to(device)",
                            "Call"
                        ],
                        [
                            "qo_vec + 1 / float(params['No']) * q_vec",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(params['y_dim']).to(device)",
                            "Call"
                        ],
                        [
                            "qo_vec + 1 / float(params['No']) * q_vec",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "qo_log",
                    "possible_values": [
                        [
                            "torch.log(qo_vec + eps_add * torch.ones_like(qo_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(qo_vec + eps_add * torch.ones_like(qo_vec))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_286": {
                "variable": {
                    "value": "yhat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(yhat, yhat_single)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_305": {
                "input": {
                    "value": "torch.mul(y_use, y_log)",
                    "possible_values": []
                }
            },
            "sum_306": {
                "input": {
                    "value": "y_use",
                    "possible_values": [
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int(m * params['Ni']):int((m + 1) * params['Ni']), :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_308": {
                "input": {
                    "value": "torch.mul(q_vec, q_log)",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "yhat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(yhat, yhat_single)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_74": {
                "input": {
                    "value": "y_use",
                    "possible_values": [
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int(m * params['Ni']):int((m + 1) * params['Ni']), :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_76": {
                "input": {
                    "value": "torch.mul(q_vec, q_log)",
                    "possible_values": []
                }
            },
            "sum_77": {
                "input": {
                    "value": "torch.mul(q_vec, q_log)",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "yhat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(yhat, yhat_single)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_163": {
                "input": {
                    "value": "torch.mul(y_use, y_log)",
                    "possible_values": []
                }
            },
            "sum_164": {
                "input": {
                    "value": "torch.mul(y_use, y_log)",
                    "possible_values": []
                }
            },
            "sum_165": {
                "input": {
                    "value": "y_use",
                    "possible_values": [
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int(m * params['Ni']):int((m + 1) * params['Ni']), :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_167": {
                "input": {
                    "value": "torch.mul(q_vec, q_log)",
                    "possible_values": []
                }
            },
            "sum_168": {
                "input": {
                    "value": "torch.mul(q_vec, q_log)",
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "torch.mul(q_vec, q_log)",
                    "possible_values": []
                }
            },
            "ones_like_233": {
                "input": {
                    "value": "qo_vec",
                    "possible_values": [
                        [
                            "torch.zeros(yhat.shape[1]).to(device)",
                            "Call"
                        ],
                        [
                            "qo_vec + 1 / float(params['No']) * q_vec",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(params['y_dim']).to(device)",
                            "Call"
                        ],
                        [
                            "qo_vec + 1 / float(params['No']) * q_vec",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_305": {
                "input": {
                    "value": "y_use",
                    "possible_values": [
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int(m * params['Ni']):int((m + 1) * params['Ni']), :]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "y_log",
                    "possible_values": [
                        [
                            "torch.log(y_use + eps_add * torch.ones_like(y_use))",
                            "Call"
                        ],
                        [
                            "torch.log(y_use + eps_add * torch.ones_like(y_use))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_308": {
                "input": {
                    "value": "q_vec",
                    "possible_values": [
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(yhat, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "q_log",
                    "possible_values": [
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_76": {
                "input": {
                    "value": "q_vec",
                    "possible_values": [
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(yhat, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "q_log",
                    "possible_values": [
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_77": {
                "input": {
                    "value": "q_vec",
                    "possible_values": [
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(yhat, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "q_log",
                    "possible_values": [
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_79": {
                "input": {
                    "value": "qo_vec",
                    "possible_values": [
                        [
                            "torch.zeros(yhat.shape[1]).to(device)",
                            "Call"
                        ],
                        [
                            "qo_vec + 1 / float(params['No']) * q_vec",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(params['y_dim']).to(device)",
                            "Call"
                        ],
                        [
                            "qo_vec + 1 / float(params['No']) * q_vec",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_163": {
                "input": {
                    "value": "y_use",
                    "possible_values": [
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int(m * params['Ni']):int((m + 1) * params['Ni']), :]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "y_log",
                    "possible_values": [
                        [
                            "torch.log(y_use + eps_add * torch.ones_like(y_use))",
                            "Call"
                        ],
                        [
                            "torch.log(y_use + eps_add * torch.ones_like(y_use))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_164": {
                "input": {
                    "value": "y_use",
                    "possible_values": [
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int(m * params['Ni']):int((m + 1) * params['Ni']), :]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "y_log",
                    "possible_values": [
                        [
                            "torch.log(y_use + eps_add * torch.ones_like(y_use))",
                            "Call"
                        ],
                        [
                            "torch.log(y_use + eps_add * torch.ones_like(y_use))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_167": {
                "input": {
                    "value": "q_vec",
                    "possible_values": [
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(yhat, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "q_log",
                    "possible_values": [
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_168": {
                "input": {
                    "value": "q_vec",
                    "possible_values": [
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(yhat, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "q_log",
                    "possible_values": [
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_230": {
                "input": {
                    "value": "q_vec",
                    "possible_values": [
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(yhat, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_231": {
                "input": {
                    "value": "q_vec",
                    "possible_values": [
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(yhat, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "q_log",
                    "possible_values": [
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ],
                        [
                            "torch.log(q_vec + eps_add * torch.ones_like(q_vec))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_304": {
                "input": {
                    "value": "y_use",
                    "possible_values": [
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int(m * params['Ni']):int((m + 1) * params['Ni']), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_307": {
                "input": {
                    "value": "q_vec",
                    "possible_values": [
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(yhat, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_75": {
                "input": {
                    "value": "q_vec",
                    "possible_values": [
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(yhat, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_162": {
                "input": {
                    "value": "y_use",
                    "possible_values": [
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int((p * params['No'] + m) * params['Ni']):int((p * params['No'] + m + 1) * params['Ni']), :]",
                            "Subscript"
                        ],
                        [
                            "yhat[int(m * params['Ni']):int((m + 1) * params['Ni']), :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_166": {
                "input": {
                    "value": "q_vec",
                    "possible_values": [
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(yhat, 0)",
                            "BinOp"
                        ],
                        [
                            "1 / float(params['Ni']) * torch.sum(y_use, 0)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "device_40": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "load_58": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/model.pt' % classifier_path",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vaX[sample_ind]",
                    "possible_values": []
                }
            },
            "load_87": {
                "variable": {
                    "value": "gce",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(gce_path, 'model.pt')",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_43": {
                "seed": {
                    "value": "randseed",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "gce",
                    "possible_values": [
                        [
                            "GenerativeCausalExplainer(classifier, decoder, encoder, device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(gce_path, 'model.pt'), map_location=device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(gce_path, 'model.pt')",
                    "possible_values": []
                }
            }
        }
    },
    "loss_functions.py": {
        "torch": {
            "inverse_9": {
                "variable": {
                    "value": "Sigmainvhat",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(What, torch.t(What)) + gamma * torch.eye(x_dim)",
                    "possible_values": []
                }
            },
            "log_11": {
                "variable": {
                    "value": "nll_logdet",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.det(Sigmahat)",
                    "possible_values": []
                }
            },
            "matmul_15": {
                "input": {
                    "value": "Sigmainvhat",
                    "possible_values": [
                        [
                            "torch.inverse(torch.matmul(What, torch.t(What)) + gamma * torch.eye(x_dim))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(Xbatch)",
                    "possible_values": []
                }
            },
            "diag_embed_25": {
                "variable": {
                    "value": "Xcov",
                    "possible_values": []
                },
                "input": {
                    "value": "Xcov_vec",
                    "possible_values": []
                }
            },
            "inverse_26": {
                "variable": {
                    "value": "covInv",
                    "possible_values": []
                },
                "input": {
                    "value": "Xcov",
                    "possible_values": [
                        [
                            "torch.diag_embed(Xcov_vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_37": {
                "variable": {
                    "value": "sse_loss",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                }
            },
            "matmul_7": {
                "input": {
                    "value": "What",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(What)",
                    "possible_values": []
                }
            },
            "det_11": {
                "input": {
                    "value": "Sigmahat",
                    "possible_values": [
                        [
                            "torch.matmul(What, torch.t(What)) + gamma * torch.eye(x_dim)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_16": {
                "input": {
                    "value": "torch.diag(XSigmainvhatXT)",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "possible_values": []
                }
            },
            "t_7": {
                "input": {
                    "value": "What",
                    "possible_values": []
                }
            },
            "eye_7": {
                "n": {
                    "value": "x_dim",
                    "possible_values": [
                        [
                            "What.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_9": {
                "input": {
                    "value": "What",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(What)",
                    "possible_values": []
                }
            },
            "t_15": {
                "input": {
                    "value": "Xbatch",
                    "possible_values": []
                }
            },
            "diag_16": {
                "input": {
                    "value": "XSigmainvhatXT",
                    "possible_values": [
                        [
                            "torch.matmul(Xbatch, torch.matmul(Sigmainvhat, torch.t(Xbatch)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_30": {
                "input": {
                    "value": "torch.mul(torch.pow(torch.prod(Xcov_vec, 1), -0.5), torch.exp(expPow))",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "likelihood",
                    "possible_values": [
                        [
                            "1 / float(num_samp) * torch.sum(torch.mul(torch.pow(torch.prod(Xcov_vec, 1), -0.5), torch.exp(expPow)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_9": {
                "input": {
                    "value": "What",
                    "possible_values": []
                }
            },
            "eye_9": {
                "n": {
                    "value": "x_dim",
                    "possible_values": [
                        [
                            "What.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_29": {
                "input": {
                    "value": "torch.unsqueeze(meanDiff, 1)",
                    "possible_values": []
                },
                "other": {
                    "value": "covInv",
                    "possible_values": [
                        [
                            "torch.inverse(Xcov)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_30": {
                "input": {
                    "value": "torch.pow(torch.prod(Xcov_vec, 1), -0.5)",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.exp(expPow)",
                    "possible_values": []
                }
            },
            "unsqueeze_29": {
                "input": {
                    "value": "meanDiff",
                    "possible_values": [
                        [
                            "Xbatch[k, :] - Xmu",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "pow_30": {
                "input": {
                    "value": "torch.prod(Xcov_vec, 1)",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-0.5",
                    "possible_values": []
                }
            },
            "exp_30": {
                "input": {
                    "value": "expPow",
                    "possible_values": [
                        [
                            "-0.5 * torch.matmul(torch.matmul(torch.unsqueeze(meanDiff, 1), covInv), torch.unsqueeze(meanDiff, 2))[:, 0, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "prod_30": {
                "input": {
                    "value": "Xcov_vec",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "make_fig13.py": {
        "torch": {
            "device_40": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "load_58": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/model.pt' % classifier_path",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vaX[sample_ind]",
                    "possible_values": []
                }
            },
            "load_87": {
                "variable": {
                    "value": "gce",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(gce_path, 'model.pt')",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_43": {
                "seed": {
                    "value": "randseed",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "gce",
                    "possible_values": [
                        [
                            "GenerativeCausalExplainer(classifier, decoder, encoder, device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(gce_path, 'model.pt'), map_location=device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(gce_path, 'model.pt')",
                    "possible_values": []
                }
            }
        }
    },
    "make_fig14.py": {
        "torch": {
            "device_39": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "load_57": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/model.pt' % classifier_path",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vaX[sample_ind]",
                    "possible_values": []
                }
            },
            "load_86": {
                "variable": {
                    "value": "gce",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(gce_path, 'model.pt')",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_42": {
                "seed": {
                    "value": "randseed",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "gce",
                    "possible_values": [
                        [
                            "GenerativeCausalExplainer(classifier, decoder, encoder, device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(gce_path, 'model.pt'), map_location=device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(gce_path, 'model.pt')",
                    "possible_values": []
                }
            }
        }
    },
    "make_fig18_fig19.py": {
        "torch": {
            "device_46": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "load_65": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/model.pt' % classifier_path",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "randseed",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vaX[sample_ind]",
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_105": {
                "variable": {
                    "value": "(gce, traininfo)",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(gce_path, filename)",
                    "possible_values": []
                }
            },
            "empty_cache_109": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_103": {
                "obj": {
                    "value": "(gce, traininfo)",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(gce_path, filename)",
                    "possible_values": []
                }
            }
        }
    },
    "make_fig3.py": {
        "torch": {
            "device_40": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "load_58": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/model.pt' % classifier_path",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vaX[sample_ind]",
                    "possible_values": []
                }
            },
            "load_87": {
                "variable": {
                    "value": "gce",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(gce_path, 'model.pt')",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_43": {
                "seed": {
                    "value": "randseed",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "gce",
                    "possible_values": [
                        [
                            "GenerativeCausalExplainer(classifier, decoder, encoder, device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(gce_path, 'model.pt'), map_location=device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(gce_path, 'model.pt')",
                    "possible_values": []
                }
            }
        }
    },
    "make_fig5ab.py": {
        "torch": {
            "device_48": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "checkpoint_model",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(classifier_path, 'model.pt')",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_96": {
                "variable": {
                    "value": "gce",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(gce_path, 'model.pt')",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vaX[i_samp:i_samp + 1, :, :, :]",
                    "possible_values": []
                }
            },
            "permute_124": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "randn_131": {
                "variable": {
                    "value": "z[0, i_latent]",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_89": {
                "obj": {
                    "value": "gce",
                    "possible_values": [
                        [
                            "GenerativeCausalExplainer(classifier, decoder, encoder, device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(gce_path, 'model.pt'), map_location=device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(gce_path, 'model.pt')",
                    "possible_values": []
                }
            }
        }
    },
    "make_fig5cd.py": {
        "torch": {
            "device_48": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "checkpoint_model",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(classifier_path, 'model.pt')",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_96": {
                "variable": {
                    "value": "gce",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(gce_path, 'model.pt')",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.expand_dims(vaX[sample_ind[isamp]], 0)",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_89": {
                "obj": {
                    "value": "gce",
                    "possible_values": [
                        [
                            "GenerativeCausalExplainer(classifier, decoder, encoder, device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(gce_path, 'model.pt'), map_location=device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(gce_path, 'model.pt')",
                    "possible_values": []
                }
            },
            "unsqueeze_119": {
                "input": {
                    "value": "torch.from_numpy(ztilde)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "ndarray": {
                    "value": "ztilde",
                    "possible_values": [
                        [
                            "z.copy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "make_fig8.py": {
        "torch": {
            "device_42": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "PW_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "PW",
                    "possible_values": [
                        [
                            "util.formProjMat(W)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "PWa_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "PWa",
                    "possible_values": [
                        [
                            "util.formProjMat(Wa)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "PWb_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "PWb",
                    "possible_values": [
                        [
                            "util.formProjMat(Wb)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_72": {
                "input": {
                    "value": "torch.randn(params['x_dim'], params['z_dim'], dtype=torch.float)",
                    "possible_values": []
                },
                "other": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "What",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.hstack((what1, what2))",
                    "possible_values": []
                }
            },
            "randn_72": {
                "*size": {
                    "value": "params['x_dim']",
                    "possible_values": []
                },
                "out": {
                    "value": "params['z_dim']",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            }
        }
    },
    "make_fig9_fig10.py": {
        "torch": {
            "device_42": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "PW_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "PW",
                    "possible_values": [
                        [
                            "util.formProjMat(W)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "Pw1_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Pw1",
                    "possible_values": [
                        [
                            "util.formProjMat(w1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "Pw2_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Pw2",
                    "possible_values": [
                        [
                            "util.formProjMat(w2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_93": {
                "input": {
                    "value": "torch.randn(params['x_dim'], params['z_dim'], dtype=torch.float)",
                    "possible_values": []
                },
                "other": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "What",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.hstack((what1, what2))",
                    "possible_values": []
                }
            },
            "randn_93": {
                "*size": {
                    "value": "params['x_dim']",
                    "possible_values": []
                },
                "out": {
                    "value": "params['z_dim']",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "xhat",
                    "possible_values": []
                },
                "data": {
                    "value": "[x, y]",
                    "possible_values": []
                }
            },
            "unsqueeze_105": {
                "variable": {
                    "value": "xhat",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "ndarray": {
                    "value": "X",
                    "possible_values": [
                        [
                            "np.matmul(Z, W.T)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/CNN_classifier.py": {
        "torch": {
            "CNN_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_15": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "1",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "32",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Conv2d_16": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "32",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "64",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Dropout2d_17": {
                    "variable": {
                        "value": "self.dropout1",
                        "possible_values": []
                    },
                    "p": {
                        "value": "0.25",
                        "possible_values": []
                    }
                },
                "Dropout2d_18": {
                    "variable": {
                        "value": "self.dropout2",
                        "possible_values": []
                    },
                    "p": {
                        "value": "0.5",
                        "possible_values": []
                    }
                },
                "Linear_19": {
                    "variable": {
                        "value": "self.fc1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "9216",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "128",
                        "possible_values": []
                    }
                },
                "Linear_20": {
                    "variable": {
                        "value": "self.fc2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "128",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "y_dim",
                        "possible_values": []
                    }
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "possible_values": []
                }
            },
            "max_pool2d_35": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "flatten_37": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "possible_values": []
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "prob_out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/CVAE.py": {
        "torch": {
            "Encoder_9": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_14": {
                    "variable": {
                        "value": "self.model",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(int(c_dim), filt_per_layer, 4, stride=2, padding=1)",
                        "possible_values": []
                    }
                },
                "Linear_23": {
                    "variable": {
                        "value": "self.fc_mu",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "int(filt_per_layer * x_dim / 16)",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "z_dim",
                        "possible_values": []
                    }
                },
                "Linear_24": {
                    "variable": {
                        "value": "self.fc_logvar",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "int(filt_per_layer * x_dim / 16)",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "z_dim",
                        "possible_values": []
                    }
                }
            },
            "Decoder_42": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.z_dim": {
                    "value": "z_dim",
                    "possible_values": []
                },
                "self.c_dim": {
                    "value": "c_dim",
                    "possible_values": []
                },
                "self.x_dim": {
                    "value": "x_dim",
                    "possible_values": []
                },
                "Sequential_50": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(z_dim, int(filt_per_layer * self.x_dim / 16))",
                        "possible_values": []
                    }
                },
                "Sequential_54": {
                    "variable": {
                        "value": "self.model",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.ConvTranspose2d(filt_per_layer, filt_per_layer, 4, stride=1, padding=1)",
                        "possible_values": []
                    }
                }
            },
            "exp_32": {
                "variable": {
                    "value": "std",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "possible_values": []
                }
            },
            "randn_like_33": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "int(c_dim)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filt_per_layer",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "filt_per_layer",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filt_per_layer",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ZeroPad2d_19": {
                "padding": {
                    "value": "(1, 2, 1, 2)",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "filt_per_layer",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filt_per_layer",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "z_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(filt_per_layer * self.x_dim / 16)",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_55": {
                "in_channels": {
                    "value": "filt_per_layer",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filt_per_layer",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_57": {
                "in_channels": {
                    "value": "filt_per_layer",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filt_per_layer",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_59": {
                "in_channels": {
                    "value": "filt_per_layer",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "int(c_dim)",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sigmoid_60": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/CVAEImageNet.py": {
        "torch": {
            "Encoder_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_16": {
                    "variable": {
                        "value": "self.model_enc",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(int(c_dim), 64, 4, stride=2, padding=1)",
                        "possible_values": []
                    }
                },
                "Linear_29": {
                    "variable": {
                        "value": "self.fc_mu",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "int(64 * img_size * img_size / 16)",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "z_dim",
                        "possible_values": []
                    }
                },
                "Linear_30": {
                    "variable": {
                        "value": "self.fc_var",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "int(64 * img_size * img_size / 16)",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "z_dim",
                        "possible_values": []
                    }
                }
            },
            "Decoder_47": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_52": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(z_dim, int(self.img_4 * self.img_4 * 64))",
                        "possible_values": []
                    }
                },
                "Sequential_57": {
                    "variable": {
                        "value": "self.model",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.ConvTranspose2d(64, 64, 4, stride=1, padding=1)",
                        "possible_values": []
                    }
                }
            },
            "exp_39": {
                "variable": {
                    "value": "std",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "possible_values": []
                }
            },
            "randn_like_40": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "int(c_dim)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ZeroPad2d_23": {
                "padding": {
                    "value": "(1, 2, 1, 2)",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "z_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.img_4 * self.img_4 * 64)",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_58": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_61": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_64": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(c_dim)",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "int(c_dim)",
                    "possible_values": []
                }
            },
            "Sigmoid_66": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/VAE.py": {
        "torch": {
            "Encoder_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_10": {
                    "variable": {
                        "value": "self.model",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(int(x_dim), 512)",
                        "possible_values": []
                    }
                },
                "Linear_15": {
                    "variable": {
                        "value": "self.f_mu",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "z_dim",
                        "possible_values": []
                    }
                },
                "Linear_16": {
                    "variable": {
                        "value": "self.f_var",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "z_dim",
                        "possible_values": []
                    }
                }
            },
            "Decoder_samp_33": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_38": {
                    "variable": {
                        "value": "self.model",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(z_dim, 512)",
                        "possible_values": []
                    }
                },
                "Linear_42": {
                    "variable": {
                        "value": "self.f_mu",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "x_dim",
                        "possible_values": []
                    }
                },
                "Linear_43": {
                    "variable": {
                        "value": "self.f_std",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "x_dim",
                        "possible_values": []
                    }
                },
                "self.x_dim": {
                    "value": "x_dim",
                    "possible_values": []
                }
            },
            "Decoder_60": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_65": {
                    "variable": {
                        "value": "self.model",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(z_dim, 512)",
                        "possible_values": []
                    }
                }
            },
            "exp_24": {
                "variable": {
                    "value": "std",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "possible_values": []
                }
            },
            "randn_like_25": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ],
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_50": {
                "variable": {
                    "value": "std",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "possible_values": []
                }
            },
            "randn_like_51": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ],
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "int(x_dim)",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "z_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "z_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "x_dim",
                    "possible_values": []
                }
            }
        }
    },
    "models/linearGaussian.py": {
        "torch": {
            "Decoder_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_14": {
                    "variable": {
                        "value": "self.model_enc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "int(z_dim)",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "int(x_dim)",
                        "possible_values": []
                    }
                }
            },
            "randn_like_17": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "possible_values": []
                }
            },
            "linear_22": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "weight": {
                    "value": "What",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                }
            }
        }
    },
    "models/toy_classifiers.py": {
        "torch": {
            "OneHyperplaneClassifier_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.ksig": {
                    "value": "ksig",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TwoHyperplaneClassifier_59": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.ksig": {
                    "value": "ksig",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "XORHyperplaneClassifier_126": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.ksig": {
                    "value": "ksig",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_51": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.a",
                    "possible_values": []
                },
                "bias": {
                    "value": "-1 * self.b",
                    "possible_values": []
                }
            },
            "sigmoid_53": {
                "variable": {
                    "value": "yhat_class0",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ksig * z",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "yhat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(yhat_class0, yhat_class1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "linear_117": {
                "variable": {
                    "value": "z1",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.a1",
                    "possible_values": []
                },
                "bias": {
                    "value": "-1 * self.b1",
                    "possible_values": []
                }
            },
            "linear_118": {
                "variable": {
                    "value": "z2",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.a2",
                    "possible_values": []
                },
                "bias": {
                    "value": "-1 * self.b2",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "yhat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(yhat_class0, yhat_class1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "linear_185": {
                "variable": {
                    "value": "z1",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.a1",
                    "possible_values": []
                },
                "bias": {
                    "value": "-1 * self.b1",
                    "possible_values": []
                }
            },
            "linear_186": {
                "variable": {
                    "value": "z2",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.a2",
                    "possible_values": []
                },
                "bias": {
                    "value": "-1 * self.b2",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "yhat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(yhat_class0, yhat_class1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.a",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.matmul(torch.randn(int(y_dim), int(x_dim)), torch.t(P))",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.a",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.matmul(torch.Tensor(a), torch.t(P))",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.b",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(int(y_dim))",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.b",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(b)",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.a1",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.matmul(torch.randn(1, int(x_dim)), torch.t(P1))",
                    "possible_values": []
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "self.a1",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.matmul(torch.Tensor(a1), torch.t(P1))",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.a2",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.matmul(torch.randn(1, int(x_dim)), torch.t(P2))",
                    "possible_values": []
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.a2",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.matmul(torch.Tensor(a2), torch.t(P2))",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.b1",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "self.b1",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(b1)",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "variable": {
                    "value": "self.b2",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self.b2",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(b2)",
                    "possible_values": []
                }
            },
            "Parameter_146": {
                "variable": {
                    "value": "self.a1",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.matmul(torch.randn(int(y_dim), int(x_dim)), torch.t(P1))",
                    "possible_values": []
                }
            },
            "Parameter_149": {
                "variable": {
                    "value": "self.a1",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.matmul(torch.Tensor(a1), torch.t(P1))",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.a2",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.matmul(torch.randn(int(y_dim), int(x_dim)), torch.t(P2))",
                    "possible_values": []
                }
            },
            "Parameter_155": {
                "variable": {
                    "value": "self.a2",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.matmul(torch.Tensor(a2), torch.t(P2))",
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.b1",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(int(y_dim))",
                    "possible_values": []
                }
            },
            "Parameter_162": {
                "variable": {
                    "value": "self.b1",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(b1)",
                    "possible_values": []
                }
            },
            "Parameter_165": {
                "variable": {
                    "value": "self.b2",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(int(y_dim))",
                    "possible_values": []
                }
            },
            "Parameter_169": {
                "variable": {
                    "value": "self.b2",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(b2)",
                    "possible_values": []
                }
            },
            "sigmoid_120": {
                "input": {
                    "value": "self.ksig * z2",
                    "possible_values": []
                }
            },
            "matmul_24": {
                "input": {
                    "value": "torch.randn(int(y_dim), int(x_dim))",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(P)",
                    "possible_values": []
                }
            },
            "matmul_27": {
                "input": {
                    "value": "torch.Tensor(a)",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(P)",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "input": {
                    "value": "torch.randn(1, int(x_dim))",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(P1)",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "input": {
                    "value": "torch.Tensor(a1)",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(P1)",
                    "possible_values": []
                }
            },
            "matmul_85": {
                "input": {
                    "value": "torch.randn(1, int(x_dim))",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(P2)",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "input": {
                    "value": "torch.Tensor(a2)",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(P2)",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "input": {
                    "value": "torch.randn(int(y_dim), int(x_dim))",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(P1)",
                    "possible_values": []
                }
            },
            "matmul_149": {
                "input": {
                    "value": "torch.Tensor(a1)",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(P1)",
                    "possible_values": []
                }
            },
            "matmul_152": {
                "input": {
                    "value": "torch.randn(int(y_dim), int(x_dim))",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(P2)",
                    "possible_values": []
                }
            },
            "matmul_155": {
                "input": {
                    "value": "torch.Tensor(a2)",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(P2)",
                    "possible_values": []
                }
            },
            "randn_24": {
                "*size": {
                    "value": "int(y_dim)",
                    "possible_values": []
                },
                "out": {
                    "value": "int(x_dim)",
                    "possible_values": []
                }
            },
            "t_24": {
                "input": {
                    "value": "P",
                    "possible_values": []
                }
            },
            "t_27": {
                "input": {
                    "value": "P",
                    "possible_values": []
                }
            },
            "randn_80": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "int(x_dim)",
                    "possible_values": []
                }
            },
            "t_80": {
                "input": {
                    "value": "P1",
                    "possible_values": []
                }
            },
            "t_82": {
                "input": {
                    "value": "P1",
                    "possible_values": []
                }
            },
            "randn_85": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "int(x_dim)",
                    "possible_values": []
                }
            },
            "t_85": {
                "input": {
                    "value": "P2",
                    "possible_values": []
                }
            },
            "t_87": {
                "input": {
                    "value": "P2",
                    "possible_values": []
                }
            },
            "randn_146": {
                "*size": {
                    "value": "int(y_dim)",
                    "possible_values": []
                },
                "out": {
                    "value": "int(x_dim)",
                    "possible_values": []
                }
            },
            "t_146": {
                "input": {
                    "value": "P1",
                    "possible_values": []
                }
            },
            "t_149": {
                "input": {
                    "value": "P1",
                    "possible_values": []
                }
            },
            "randn_152": {
                "*size": {
                    "value": "int(y_dim)",
                    "possible_values": []
                },
                "out": {
                    "value": "int(x_dim)",
                    "possible_values": []
                }
            },
            "t_152": {
                "input": {
                    "value": "P2",
                    "possible_values": []
                }
            },
            "t_155": {
                "input": {
                    "value": "P2",
                    "possible_values": []
                }
            }
        }
    },
    "train_mnist_classifier.py": {
        "torch": {
            "device_38": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_54": {
                "variable": {
                    "value": "ce_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SGD_58": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "StepLR_59": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "torch.optim.SGD(classifier.parameters(), lr=lr, momentum=momentum)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "possible_values": []
                },
                "gamma": {
                    "value": "gamma",
                    "possible_values": [
                        [
                            "0.7",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "batch_labels",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "trY[idx * batch_size:(idx + 1) * batch_size]",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "batch_images_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_images",
                    "possible_values": [
                        [
                            "trX[idx * batch_size:(idx + 1) * batch_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "val_labels",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vaY[idx * test_size:(idx + 1) * test_size]",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "val_images_torch",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "val_images",
                    "possible_values": [
                        [
                            "vaX[idx * test_size:(idx + 1) * test_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_105": {
                "obj": {
                    "value": "{'step': counter, 'epoch': epoch, 'batch': idx, 'model_state_dict_classifier': classifier.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss_total}",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_folder, 'model.pt')",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {}
    }
}