{
    "M3P/src/data/MILD_finetune.py": {
        "torch": {
            "normalize_192": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor([att_feat]).float()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[att_feat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "variable": {
                    "value": "img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[img_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "variable": {
                    "value": "box_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[box_feat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_484": {
                "variable": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_485": {
                "variable": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_486": {
                "variable": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_487": {
                "variable": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(obj_labels).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(obj_labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_536": {
                "variable": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_537": {
                "variable": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_538": {
                "variable": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_539": {
                "variable": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(obj_labels).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(obj_labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_675": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor([att_feat]).float()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_701": {
                "variable": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_702": {
                "variable": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_703": {
                "variable": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_891": {
                "variable": {
                    "value": "self.all_test_obj_cache",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(self.obj_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_892": {
                "variable": {
                    "value": "self.all_test_box_cache",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_box_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_429": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor([att_feat]).float()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_945": {
                "variable": {
                    "value": "pos_cap_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.all_caps_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_965": {
                "variable": {
                    "value": "pos_cap_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_914": {
                "ndarray": {
                    "value": "s.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/data/MT_finetune.py": {
        "torch": {
            "normalize_243": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor([att_feat]).float()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_268": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[att_feat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_269": {
                "variable": {
                    "value": "img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[img_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "variable": {
                    "value": "box_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[box_feat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normalize_436": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor([att_feat]).float()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_466": {
                "variable": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_467": {
                "variable": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_468": {
                "variable": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "M3P/src/data/NTG_finetune.py": {
        "torch": {}
    },
    "M3P/src/data/NTG_xlm_based.py": {
        "torch": {
            "from_numpy_111": {
                "ndarray": {
                    "value": "s.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/data/SLIDE_finetune.py": {
        "torch": {
            "normalize_179": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor([att_feat]).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_204": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[att_feat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_205": {
                "variable": {
                    "value": "img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[img_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "variable": {
                    "value": "box_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[box_feat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "variable": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_254": {
                "variable": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_255": {
                "variable": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "M3P/src/data/dataset_finetune.py": {
        "torch": {
            "normalize_269": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor([att_feat]).float()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[att_feat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_293": {
                "variable": {
                    "value": "img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[img_mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_294": {
                "variable": {
                    "value": "box_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[box_feat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_631": {
                "variable": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_632": {
                "variable": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_633": {
                "variable": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_634": {
                "variable": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(obj_labels).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(obj_labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_683": {
                "variable": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_684": {
                "variable": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_685": {
                "variable": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_686": {
                "variable": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(obj_labels).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(obj_labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_896": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor([att_feat]).float()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_922": {
                "variable": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_923": {
                "variable": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_924": {
                "variable": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_1068": {
                "variable": {
                    "value": "self.all_test_obj_cache",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(self.obj_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1069": {
                "variable": {
                    "value": "self.all_test_box_cache",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_box_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_1170": {
                "variable": {
                    "value": "self.all_test_obj_cache",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(self.obj_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1171": {
                "variable": {
                    "value": "self.all_test_box_cache",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_box_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1224": {
                "variable": {
                    "value": "pos_cap_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.all_caps_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_584": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor([att_feat]).float()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_1193": {
                "ndarray": {
                    "value": "s.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/data/dataset_pretrain.py": {
        "torch": {
            "full_235": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "mlm_probability",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bernoulli_241": {
                "variable": {
                    "value": "masked_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, mlm_probability)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_252": {
                "variable": {
                    "value": "random_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "high": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_287": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_object_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(masked_object_features, 0)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(np.stack(masked_object_features, 0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_401": {
                "variable": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_402": {
                "variable": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_403": {
                "variable": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_404": {
                "variable": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(obj_labels).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(obj_labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_405": {
                "variable": {
                    "value": "ori_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ori_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ori_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ori_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_488": {
                "variable": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_489": {
                "variable": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_490": {
                "variable": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_491": {
                "variable": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(obj_labels).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(obj_labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_492": {
                "variable": {
                    "value": "ori_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ori_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ori_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ori_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_493": {
                "variable": {
                    "value": "clcm_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "clcm_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(clcm_labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_779": {
                "variable": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_780": {
                "variable": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_781": {
                "variable": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_129": {
                "data": {
                    "value": "indexed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tokenizer.encode(s)",
                            "Call"
                        ],
                        [
                            "indexed[:self.max_len if not half else self.max_len // 2]",
                            "Subscript"
                        ],
                        [
                            "np.int32(indexed)",
                            "Call"
                        ],
                        [
                            "self.tokenizer.encode(s)",
                            "Call"
                        ],
                        [
                            "indexed[:self.max_len]",
                            "Subscript"
                        ],
                        [
                            "np.int32(indexed)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_326": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(masked_object_features, dim=-1)",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_456": {
                "variable": {
                    "value": "concated_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[true_tokens, cur_cap_tokens_half]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_734": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(masked_object_features, dim=-1)",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ],
                        [
                            "object_features.astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(att_feat)",
                            "Call"
                        ],
                        [
                            "F.normalize(att_feat, dim=-1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bernoulli_247": {
                "input": {
                    "value": "torch.full(labels.shape, 0.8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_379": {
                "variable": {
                    "value": "object_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(att_feat)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_461": {
                "variable": {
                    "value": "object_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(att_feat)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bernoulli_251": {
                "input": {
                    "value": "torch.full(labels.shape, 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_247": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_887": {
                "ndarray": {
                    "value": "self.langs[a:b].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_890": {
                "ndarray": {
                    "value": "self.data[a:b].astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_251": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/data/dictionary.py": {
        "torch": {
            "load_172": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "bin_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_226": {
                "obj": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(bin_path)",
                            "Call"
                        ],
                        [
                            "{'dico': dico, 'positions': positions, 'sentences': sentences, 'unk_words': unk_words}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "bin_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "pickle_protocol": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/data/loader.py": {
        "torch": {
            "load_378": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "path.replace('train', 'valid')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_575": {
                "variable": {
                    "value": "_bin_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(params.data_path, 'NTG', 'NTG.en.train.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/dataset_utils.py": {
        "torch": {
            "RandomSampler_55": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.batch_size if mode == 'train ' else eval_bs",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler if mode == 'train' else eval_sampler",
                    "type": "IfExp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "retrieval_pretrain_collate if params.is_understanding else caption_collate",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "params.num_workers if mode == 'train' else 4",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_160": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_161": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "x_obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_164": {
                "variable": {
                    "value": "x_img_ori",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ori_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_198": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_199": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_200": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_201": {
                "variable": {
                    "value": "x_obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_202": {
                "variable": {
                    "value": "x_img_ori",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ori_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_203": {
                "variable": {
                    "value": "x_clcm_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "clcm_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_253": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_254": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_255": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_298": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_299": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_300": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_327": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_328": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_329": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_356": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_357": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_358": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_383": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_384": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_385": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_413": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_414": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_415": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_282": {
                "tensors": {
                    "value": "segmentt_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_283": {
                "tensors": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_284": {
                "tensors": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(box_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "img_loc.view([-1] + list(tuple(img_loc.size()[2:])))",
                            "Call"
                        ],
                        [
                            "torch.stack(box_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "img_loc.view([-1] + list(tuple(img_loc.size()[2:])))",
                            "Call"
                        ],
                        [
                            "torch.stack(box_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "img_loc.view([-1] + list(tuple(img_loc.size()[2:])))",
                            "Call"
                        ],
                        [
                            "torch.stack(box_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "img_loc.view([-1] + list(tuple(img_loc.size()[2:])))",
                            "Call"
                        ],
                        [
                            "torch.stack(box_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "img_loc.view([-1] + list(tuple(img_loc.size()[2:])))",
                            "Call"
                        ],
                        [
                            "torch.stack(box_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "img_loc.view([-1] + list(tuple(img_loc.size()[2:])))",
                            "Call"
                        ],
                        [
                            "torch.stack(box_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "img_loc.view([-1] + list(tuple(img_loc.size()[2:])))",
                            "Call"
                        ],
                        [
                            "torch.stack(box_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "img_loc.view([-1] + list(tuple(img_loc.size()[2:])))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_285": {
                "tensors": {
                    "value": "_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomSampler_54": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_54": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_35": {
                "ndarray": {
                    "value": "s.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SequentialSampler_65": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_67": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.batch_size if mode != 'test' else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "mt_caption_collate if mode != 'test' else mt_caption_eval_collate",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.batch_size if mode != 'test' else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "caption_collate if mode != 'test' else caption_eval_collate",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "retrieval_eval_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "retrieval_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.batch_size if mode != 'test' else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "caption_collate if mode != 'test' else caption_eval_collate",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "ndarray": {
                    "value": "lm.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomSampler_63": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_63": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_94": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_96": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_104": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "retrieval_eval_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_109": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "retrieval_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_136": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "slide_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_92": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_92": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_117": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_119": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_123": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.batch_size if mode != 'test' else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "ntg_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_115": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_115": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_132": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_134": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RandomSampler_130": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_130": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/evaluate_collate.py": {
        "torch": {
            "RandomSampler_58": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.batch_size if mode == 'train ' else eval_bs",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler if mode == 'train' else eval_sampler",
                    "type": "IfExp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "retrieval_pretrain_collate if params.is_understanding else caption_collate",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "params.num_workers if mode == 'train' else 4",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_152": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_153": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_154": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_155": {
                "variable": {
                    "value": "x_obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_156": {
                "variable": {
                    "value": "x_img_ori",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ori_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_204": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_205": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_206": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_249": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_250": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_251": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_278": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_279": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_280": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_307": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_308": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_309": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_335": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_336": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_337": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_233": {
                "tensors": {
                    "value": "segmentt_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_234": {
                "tensors": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_235": {
                "tensors": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(box_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "img_loc.view([-1] + list(tuple(img_loc.size()[2:])))",
                            "Call"
                        ],
                        [
                            "torch.stack(box_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "img_loc.view([-1] + list(tuple(img_loc.size()[2:])))",
                            "Call"
                        ],
                        [
                            "torch.stack(box_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "img_loc.view([-1] + list(tuple(img_loc.size()[2:])))",
                            "Call"
                        ],
                        [
                            "torch.stack(box_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "img_loc.view([-1] + list(tuple(img_loc.size()[2:])))",
                            "Call"
                        ],
                        [
                            "torch.stack(box_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "img_loc.view([-1] + list(tuple(img_loc.size()[2:])))",
                            "Call"
                        ],
                        [
                            "torch.stack(box_feats, dim=0)",
                            "Call"
                        ],
                        [
                            "img_loc.view([-1] + list(tuple(img_loc.size()[2:])))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_236": {
                "tensors": {
                    "value": "_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomSampler_57": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_57": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "ndarray": {
                    "value": "s.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SequentialSampler_68": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_70": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.batch_size if mode != 'test' else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "mt_caption_collate if mode != 'test' else mt_caption_eval_collate",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.batch_size if mode != 'test' else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "caption_collate if mode != 'test' else caption_eval_collate",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "retrieval_eval_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "retrieval_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.batch_size if mode != 'test' else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "caption_collate if mode != 'test' else caption_eval_collate",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "ndarray": {
                    "value": "lm.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomSampler_66": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_66": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_97": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_99": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_107": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "retrieval_eval_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "retrieval_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomSampler_95": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_95": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_120": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_122": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "params.batch_size if mode != 'test' else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset) if params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "ntg_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_118": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_118": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/evaluation/eval_utils.py": {
        "torch": {
            "tensor_27": {
                "variable": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(att_feats).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(img_masks).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(box_feats).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "M3P/src/evaluation/evaluator.py": {
        "torch": {
            "from_numpy_220": {
                "variable": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "to_predict.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_557": {
                "variable": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "slen * bs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1084": {
                "variable": {
                    "value": "all_matching_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_matching_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_matching_labels, 0)",
                            "Call"
                        ],
                        [
                            "all_matching_labels.view(-1, 5000)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1085": {
                "variable": {
                    "value": "all_matching_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_matching_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_matching_scores, 0)",
                            "Call"
                        ],
                        [
                            "all_matching_scores.view(-1, 5000)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SequentialSampler_1163": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ],
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_1164": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ],
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "test_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_187": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ],
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_188": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ],
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "valid_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_591": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len2.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "len2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_674": {
                "variable": {
                    "value": "img_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_img_mask.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.add(img_len, len1)",
                            "Call"
                        ],
                        [
                            "x_img_mask.sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "len1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x1_mask.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "text_len",
                            "Name"
                        ],
                        [
                            "text_len",
                            "Name"
                        ],
                        [
                            "torch.add(len_img - 64, lengths)",
                            "Call"
                        ],
                        [
                            "torch.add(len_img - 64, lengths)",
                            "Call"
                        ],
                        [
                            "torch.add(len_img - 64, lengths)",
                            "Call"
                        ],
                        [
                            "torch.add(len_img - 64, lengths)",
                            "Call"
                        ],
                        [
                            "x1_mask.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_57": {
                "tensors": {
                    "value": "cap_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_59": {
                "tensors": {
                    "value": "img_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_60": {
                "tensors": {
                    "value": "img_coords_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_61": {
                "tensors": {
                    "value": "img_mask_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_62": {
                "tensors": {
                    "value": "img_label_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_63": {
                "tensors": {
                    "value": "obj_feat_ori",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_64": {
                "tensors": {
                    "value": "mask_img_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_105": {
                "tensors": {
                    "value": "cap_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_107": {
                "tensors": {
                    "value": "img_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_108": {
                "tensors": {
                    "value": "img_coords_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_109": {
                "tensors": {
                    "value": "img_mask_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_110": {
                "tensors": {
                    "value": "img_label_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_111": {
                "tensors": {
                    "value": "obj_feat_ori",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_112": {
                "tensors": {
                    "value": "mask_img_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_143": {
                "tensors": {
                    "value": "cap_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_145": {
                "tensors": {
                    "value": "img_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_146": {
                "tensors": {
                    "value": "img_coords_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_147": {
                "tensors": {
                    "value": "img_mask_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_148": {
                "tensors": {
                    "value": "img_label_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_149": {
                "tensors": {
                    "value": "obj_feat_ori",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_150": {
                "tensors": {
                    "value": "mask_img_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SequentialSampler_191": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ],
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ],
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "retrieval_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_195": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ],
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_196": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ],
                        [
                            "self.data['cross_modal'][lang1, lang2][data_set]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "test_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_843": {
                "variable": {
                    "value": "len2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "len_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_img_mask.sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_852": {
                "variable": {
                    "value": "matching_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t2i_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(_outputs[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_1071": {
                "variable": {
                    "value": "len2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "len_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_img_mask.sum(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_835": {
                "variable": {
                    "value": "len1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "len_img - 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_911": {
                "variable": {
                    "value": "len1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "len_img - 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_997": {
                "variable": {
                    "value": "len1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "len_img - 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_1063": {
                "variable": {
                    "value": "len1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "len_img - 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_1081": {
                "ndarray": {
                    "value": "np.array(pos_cap_label).reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/evaluation/xevaluator.py": {
        "torch": {
            "from_numpy_105": {
                "variable": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "to_predict.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1355": {
                "variable": {
                    "value": "matching_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(pos_labels)",
                            "Call"
                        ],
                        [
                            "np.array(pos_labels)",
                            "Call"
                        ],
                        [
                            "np.array(pos_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_1410": {
                "variable": {
                    "value": "matching_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(pos_labels)",
                            "Call"
                        ],
                        [
                            "np.array(pos_labels)",
                            "Call"
                        ],
                        [
                            "np.array(pos_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1421": {
                "variable": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "slen * bs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1614": {
                "variable": {
                    "value": "all_matching_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_matching_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_matching_labels, 0)",
                            "Call"
                        ],
                        [
                            "all_matching_labels.t()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1615": {
                "variable": {
                    "value": "all_matching_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_matching_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_matching_scores, 0)",
                            "Call"
                        ],
                        [
                            "all_matching_scores.t()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_matching_scores, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1705": {
                "variable": {
                    "value": "all_matching_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_matching_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_matching_scores, 0)",
                            "Call"
                        ],
                        [
                            "all_matching_scores.t()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_matching_scores, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_362": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "lengths.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_637": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len2.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "len2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_727": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len2.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "len2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_828": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len2.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "len2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1148": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len2.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "len2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1212": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len2.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "len2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1325": {
                "variable": {
                    "value": "langs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lang_img, lang_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1380": {
                "variable": {
                    "value": "langs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lang_img, lang_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_1565": {
                "variable": {
                    "value": "img_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ones(img_input.size()[0]) * params.max_region_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_1694": {
                "variable": {
                    "value": "matching_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(pos_labels)",
                            "Call"
                        ],
                        [
                            "np.array(pos_labels)",
                            "Call"
                        ],
                        [
                            "np.array(pos_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_1576": {
                "variable": {
                    "value": "concat_input_ids_splits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "concat_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "split_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "total_len // test_splits",
                            "BinOp"
                        ],
                        [
                            "concat_input_ids.size(1) // test_splits",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_1577": {
                "variable": {
                    "value": "concat_segment_ids_splits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "concat_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "split_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "total_len // test_splits",
                            "BinOp"
                        ],
                        [
                            "concat_input_ids.size(1) // test_splits",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_1578": {
                "variable": {
                    "value": "concat_input_lengths_splits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "concat_input_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "split_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "total_len // test_splits",
                            "BinOp"
                        ],
                        [
                            "concat_input_ids.size(1) // test_splits",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1606": {
                "variable": {
                    "value": "matching_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "splits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_1572": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/fp16.py": {
        "torch": {}
    },
    "M3P/src/fp16_trainer.py": {
        "torch": {
            "multinomial_460": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params.pred_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "len(_x_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_538": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.params.dump_path, 'checkpoint.pth')",
                            "Call"
                        ],
                        [
                            "self.params.reload_checkpoint",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_673": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "lengths.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_756": {
                "variable": {
                    "value": "idx_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len1.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_774": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model('fwd', x=x, lengths=lengths, positions=positions, langs=langs, causal=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "emb[CLF_ID1].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "emb[CLF_ID2, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_775": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y.to(pred.device).type_as(pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_842": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len2.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "len2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_917": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len1.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "len1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_433": {
                "variable": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pred_mask.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_438": {
                "variable": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "slen * bs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_524": {
                "obj": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': self.epoch, 'n_total_iter': self.n_total_iter, 'best_metrics': self.best_metrics, 'best_stopping_criterion': self.best_stopping_criterion}",
                            "Dict"
                        ],
                        [
                            "torch.load(checkpoint_path, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.params.dump_path, '%s.pth' % name)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_646": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, torch.LongTensor(pad, bs2).fill_(params.pad_index)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_648": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positions, torch.arange(pad)[:, None] + positions[-1][None] + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_650": {
                "variable": {
                    "value": "langs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[langs, langs[-1][None].expand(pad, bs2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_893": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_632": {
                "n": {
                    "value": "bs1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_63": {
                "module": {
                    "value": "getattr(self, name)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[params.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "params.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_grad_norm__217": {
                "parameters": {
                    "value": "self.parameters[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_347": {
                "ndarray": {
                    "value": "permutation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores.argsort()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__231": {
                "parameters": {
                    "value": "apex.amp.master_params(self.optimizers[name])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_452": {
                "input": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.rand(slen, bs) <= params.word_pred",
                            "Compare"
                        ],
                        [
                            "torch.from_numpy(pred_mask.astype(np.uint8))",
                            "Call"
                        ],
                        [
                            "torch.zeros(slen * bs, dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(slen, bs)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(-1)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(slen, bs)",
                            "Call"
                        ],
                        [
                            "alen[:, None] < lengths[None] - 1",
                            "Compare"
                        ],
                        [
                            "alen[:, None] < len2[None] - 1",
                            "Compare"
                        ],
                        [
                            "alen[:, None] < len1[None] - 1",
                            "Compare"
                        ]
                    ]
                }
            },
            "arange_648": {
                "start": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8 - ml1 % 8",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "M3P/src/model/__init__.py": {
        "torch": {
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_144": {
                "variable": {
                    "value": "enc_reload",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "enc_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(params.local_rank)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_156": {
                "variable": {
                    "value": "dec_reload",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dec_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(params.local_rank)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_98": {
                "f": {
                    "value": "params.reload_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(params.local_rank)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_109": {
                "f": {
                    "value": "params.multi_reload_model[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(params.local_rank)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_115": {
                "f": {
                    "value": "ens_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.multi_reload_model[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(params.local_rank)",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/model/basebert.py": {
        "torch": {
            "Embedding_284": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_285": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_286": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_291": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_295": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ],
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_314": {
                "variable": {
                    "value": "self.image_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_316": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_317": {
                "variable": {
                    "value": "self.image_location_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_322": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_355": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_356": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_357": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_359": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_376": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_388": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_398": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_400": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_424": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_439": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_441": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_468": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_484": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_485": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_499": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_520": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_524": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_545": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_554": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_575": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_579": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_593": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1601",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_606": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_683": {
                "variable": {
                    "value": "image_token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_imgs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "input_imgs.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_712": {
                "variable": {
                    "value": "embedding_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding_output, img_embeding_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_713": {
                "variable": {
                    "value": "extended_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[extended_attention_mask, extended_image_attention_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KLDivLoss_781": {
                "variable": {
                    "value": "self.vis_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_782": {
                "variable": {
                    "value": "self.loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_840": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_846": {
                "variable": {
                    "value": "self.vil_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_847": {
                "variable": {
                    "value": "self.vision_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_848": {
                "variable": {
                    "value": "self.linguisic_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_901": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_53": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_203": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, WEIGHTS_NAME)",
                            "Call"
                        ],
                        [
                            "os.path.join(serialization_dir, TF_WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_298": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_329": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_675": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_txt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_677": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_txt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_679": {
                "variable": {
                    "value": "image_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_imgs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "input_imgs.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "erf_49": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_382": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_524": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_579": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_896": {
                "module": {
                    "value": "nn.Linear(in_dim, hid_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_897": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_898": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "weight_norm_899": {
                "module": {
                    "value": "nn.Linear(hid_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "log_softmax_816": {
                "input": {
                    "value": "prediction_scores_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prediction_scores_v[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_818": {
                "input": {
                    "value": "img_loss * (image_label == 1).unsqueeze(2).float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_896": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_899": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_74": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_820": {
                "input": {
                    "value": "image_label == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/model/transformer.py": {
        "torch": {
            "Embedding_22": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_65": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_281": {
                "variable": {
                    "value": "p_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -float('inf'))",
                            "Call"
                        ],
                        [
                            "self.proj(x).view(-1, self.n_words)",
                            "Call"
                        ],
                        [
                            "self.proj.log_prob(x) if get_scores else None",
                            "IfExp"
                        ],
                        [
                            "torch.matmul(q, k.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "self.proj(x).view(-1, self.n_objs)",
                            "Call"
                        ],
                        [
                            "self.pred_layer.get_scores(tensor)",
                            "Call"
                        ],
                        [
                            "self.pred_layer.get_scores(tensor)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_202": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_203": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_204": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.v_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v_lin(v))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_226": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.aoa_layer(self.dropout_aoa(torch.cat([x, query], -1)))",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.sublayer[0](x, lambda x: self.self_attn(x, x, x, mask))",
                            "Call"
                        ],
                        [
                            "layer(x, mask)",
                            "Call"
                        ],
                        [
                            "c2q_att",
                            "Name"
                        ],
                        [
                            "self.align_output(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_237": {
                "variable": {
                    "value": "self.image_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.image_distbution_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1600",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.image_location_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_244": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_245": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "hidden_dropout_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_307": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_325": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_378": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_389": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_390": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_417": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.emb_dim",
                            "Attribute"
                        ],
                        [
                            "params.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_433": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_448": {
                "variable": {
                    "value": "cq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(cq, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_455": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(s, threshold)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_463": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.att_weight_c(c).expand(-1, -1, q_len) + self.att_weight_q(q).permute(0, 2, 1).expand(-1, c_len, -1) + cq",
                            "BinOp"
                        ],
                        [
                            "torch.max(torch.min(s, threshold), -threshold)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_465": {
                "variable": {
                    "value": "c2q_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(s, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_479": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_480": {
                "variable": {
                    "value": "self.image_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_481": {
                "variable": {
                    "value": "self.out_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_482": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_483": {
                "variable": {
                    "value": "self.cls_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_489": {
                "variable": {
                    "value": "first_token_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.activation(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states.to(dtype=self.LayerNorm.weight.dtype))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_492": {
                "variable": {
                    "value": "concat_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pooled_output, org_img_pooled]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_503": {
                "variable": {
                    "value": "self.x_to_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_504": {
                "variable": {
                    "value": "self.x_to_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_505": {
                "variable": {
                    "value": "self.out_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_531": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_532": {
                "variable": {
                    "value": "self.dense_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_533": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_534": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_549": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_550": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_582": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -float('inf'))",
                            "Call"
                        ],
                        [
                            "self.proj(x).view(-1, self.n_words)",
                            "Call"
                        ],
                        [
                            "self.proj.log_prob(x) if get_scores else None",
                            "IfExp"
                        ],
                        [
                            "torch.matmul(q, k.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "self.proj(x).view(-1, self.n_objs)",
                            "Call"
                        ],
                        [
                            "self.pred_layer.get_scores(tensor)",
                            "Call"
                        ],
                        [
                            "self.pred_layer.get_scores(tensor)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_598": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_600": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_659": {
                "variable": {
                    "value": "self.layer_norm_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_669": {
                "variable": {
                    "value": "self.attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_670": {
                "variable": {
                    "value": "self.layer_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_671": {
                "variable": {
                    "value": "self.ffns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_672": {
                "variable": {
                    "value": "self.layer_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_683": {
                "variable": {
                    "value": "self.latent_transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_687": {
                "variable": {
                    "value": "self.original_transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_713": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_716": {
                "variable": {
                    "value": "self.seq_relationship2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_718": {
                "variable": {
                    "value": "self.mrfr_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_917": {
                "variable": {
                    "value": "cat_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_929": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_tensor, tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_933": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "c_slen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img_tensor.size()[1] + slen",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.new(slen).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(slen, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "positions.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "positions[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "x.new(c_slen).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(c_slen, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.new(slen).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(slen, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "positions.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "positions[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "src_len.new(max_len).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(max_len, out=positions).unsqueeze(1).expand(max_len, bs)",
                            "Call"
                        ],
                        [
                            "src_len.new(max_len).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(max_len, out=positions).unsqueeze(1).expand_as(generated)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_933": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_943": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.image_embeddings(x, image_loc.transpose(0, 1), image_dist)",
                            "Call"
                        ],
                        [
                            "self.embeddings(x)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).to(tensor.dtype)",
                            "BinOp"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "self.cross_alignment(tensor, image_enc, attn_mask, image_mask)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm15[i](tensor)",
                            "Call"
                        ],
                        [
                            "text_embed",
                            "Name"
                        ],
                        [
                            "self.embeddings(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([img_tensor, tensor], dim=1)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.image_embeddings(x, image_loc.transpose(0, 1), image_dist)",
                            "Call"
                        ],
                        [
                            "tensor + self.cross_lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "text_embed",
                            "Name"
                        ],
                        [
                            "self.embeddings(x)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "tensor + self.cross_lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.cross_alignment(tensor, image_enc, attn_mask, image_mask)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm15[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.image_embeddings(x, image_loc.transpose(0, 1), image_dist)",
                            "Call"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "self.transformer_obj(tensor)",
                            "Call"
                        ],
                        [
                            "self.forward('crossfwd', x=generated[:cur_len], lengths=gen_len, positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "self.forward('fwd', x=generated[:cur_len], lengths=gen_len, positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "tensor.data[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.forward('crossfwd', x=generated[:cur_len], lengths=src_len.new(bs * beam_size).fill_(cur_len), positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "self.forward('fwd', x=generated[:cur_len], lengths=src_len.new(bs * beam_size).fill_(cur_len), positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "tensor.data[-1, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_1165": {
                "variable": {
                    "value": "mm_text",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "self.aoa_layer(self.dropout_aoa(torch.cat([x, query], -1)))",
                            "Call"
                        ],
                        [
                            "self.output_layer(x)",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.sublayer[0](x, lambda x: self.self_attn(x, x, x, mask))",
                            "Call"
                        ],
                        [
                            "layer(x, mask)",
                            "Call"
                        ],
                        [
                            "c2q_att",
                            "Name"
                        ],
                        [
                            "self.align_output(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_1245": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ],
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.new(slen).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(slen, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "positions.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "positions[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "x.new(c_slen).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(c_slen, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.new(slen).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(slen, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "positions.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "positions[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "src_len.new(max_len).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(max_len, out=positions).unsqueeze(1).expand(max_len, bs)",
                            "Call"
                        ],
                        [
                            "src_len.new(max_len).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(max_len, out=positions).unsqueeze(1).expand_as(generated)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_1245": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_1362": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ],
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.new(slen).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(slen, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "positions.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "positions[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "x.new(c_slen).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(c_slen, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.new(slen).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(slen, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "positions.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "positions[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "src_len.new(max_len).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(max_len, out=positions).unsqueeze(1).expand(max_len, bs)",
                            "Call"
                        ],
                        [
                            "src_len.new(max_len).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(max_len, out=positions).unsqueeze(1).expand_as(generated)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_1362": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveLogSoftmaxWithLoss_96": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params.emb_dim",
                            "Attribute"
                        ],
                        [
                            "params.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "params.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cutoffs": {
                    "value": "params.asm_cutoffs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "div_value": {
                    "value": "params.asm_div_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "head_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_112": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -float('inf'))",
                            "Call"
                        ],
                        [
                            "self.proj(x).view(-1, self.n_words)",
                            "Call"
                        ],
                        [
                            "self.proj.log_prob(x) if get_scores else None",
                            "IfExp"
                        ],
                        [
                            "torch.matmul(q, k.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "self.proj(x).view(-1, self.n_objs)",
                            "Call"
                        ],
                        [
                            "self.pred_layer.get_scores(tensor)",
                            "Call"
                        ],
                        [
                            "self.pred_layer.get_scores(tensor)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ModuleList_145": {
                "variable": {
                    "value": "self.out_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_253": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_255": {
                "variable": {
                    "value": "input_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "np.zeros(bs, seq_length, 5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_277": {
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.norm(query)",
                            "Call"
                        ],
                        [
                            "query.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_284": {
                "input": {
                    "value": "p_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(p_attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_301": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_312": {
                "variable": {
                    "value": "self.aoa_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear((1 + scale) * d_model, 2 * d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_511": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mu.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_516": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_521": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mu, c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_674": {
                "variable": {
                    "value": "self.layer_norm15",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_675": {
                "variable": {
                    "value": "self.encoder_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_800": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.new(slen).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(slen, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "positions.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "positions[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "x.new(c_slen).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(c_slen, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.new(slen).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(slen, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "positions.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "positions[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "src_len.new(max_len).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(max_len, out=positions).unsqueeze(1).expand(max_len, bs)",
                            "Call"
                        ],
                        [
                            "src_len.new(max_len).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(max_len, out=positions).unsqueeze(1).expand_as(generated)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_800": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_828": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.image_embeddings(x, image_loc.transpose(0, 1), image_dist)",
                            "Call"
                        ],
                        [
                            "self.embeddings(x)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).to(tensor.dtype)",
                            "BinOp"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "self.cross_alignment(tensor, image_enc, attn_mask, image_mask)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm15[i](tensor)",
                            "Call"
                        ],
                        [
                            "text_embed",
                            "Name"
                        ],
                        [
                            "self.embeddings(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([img_tensor, tensor], dim=1)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.image_embeddings(x, image_loc.transpose(0, 1), image_dist)",
                            "Call"
                        ],
                        [
                            "tensor + self.cross_lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "text_embed",
                            "Name"
                        ],
                        [
                            "self.embeddings(x)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "tensor + self.cross_lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.cross_alignment(tensor, image_enc, attn_mask, image_mask)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm15[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.image_embeddings(x, image_loc.transpose(0, 1), image_dist)",
                            "Call"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "self.transformer_obj(tensor)",
                            "Call"
                        ],
                        [
                            "self.forward('crossfwd', x=generated[:cur_len], lengths=gen_len, positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "self.forward('fwd', x=generated[:cur_len], lengths=gen_len, positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "tensor.data[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.forward('crossfwd', x=generated[:cur_len], lengths=src_len.new(bs * beam_size).fill_(cur_len), positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "self.forward('fwd', x=generated[:cur_len], lengths=src_len.new(bs * beam_size).fill_(cur_len), positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "tensor.data[-1, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_845": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MultiHeadedDotAttention(num_heads, dim, project_k_v=1, scale=1, do_aoa=1, norm_q=0, dropout_aoa=dropout)",
                            "Call"
                        ],
                        [
                            "self.attentions[i](tensor, attn_mask, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache, segment_label=lang_id)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i][lang_id](tensor, src_mask, kv=src_enc, cache=cache)",
                            "Call"
                        ],
                        [
                            "self.attentions[i](tensor, self_attn_masks, cache=None)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.attentions[i](tensor, attn_mask, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_951": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MultiHeadedDotAttention(num_heads, dim, project_k_v=1, scale=1, do_aoa=1, norm_q=0, dropout_aoa=dropout)",
                            "Call"
                        ],
                        [
                            "self.attentions[i](tensor, attn_mask, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache, segment_label=lang_id)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i][lang_id](tensor, src_mask, kv=src_enc, cache=cache)",
                            "Call"
                        ],
                        [
                            "self.attentions[i](tensor, self_attn_masks, cache=None)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.attentions[i](tensor, attn_mask, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1022": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.new(slen).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(slen, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "positions.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "positions[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "x.new(c_slen).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(c_slen, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.new(slen).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(slen, out=positions).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "positions.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "positions[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "src_len.new(max_len).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(max_len, out=positions).unsqueeze(1).expand(max_len, bs)",
                            "Call"
                        ],
                        [
                            "src_len.new(max_len).long()",
                            "Call"
                        ],
                        [
                            "torch.arange(max_len, out=positions).unsqueeze(1).expand_as(generated)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_1022": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_1049": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.image_embeddings(x, image_loc.transpose(0, 1), image_dist)",
                            "Call"
                        ],
                        [
                            "self.embeddings(x)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).to(tensor.dtype)",
                            "BinOp"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "self.cross_alignment(tensor, image_enc, attn_mask, image_mask)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm15[i](tensor)",
                            "Call"
                        ],
                        [
                            "text_embed",
                            "Name"
                        ],
                        [
                            "self.embeddings(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([img_tensor, tensor], dim=1)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.image_embeddings(x, image_loc.transpose(0, 1), image_dist)",
                            "Call"
                        ],
                        [
                            "tensor + self.cross_lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "text_embed",
                            "Name"
                        ],
                        [
                            "self.embeddings(x)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "tensor + self.cross_lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.cross_alignment(tensor, image_enc, attn_mask, image_mask)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm15[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.image_embeddings(x, image_loc.transpose(0, 1), image_dist)",
                            "Call"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "self.transformer_obj(tensor)",
                            "Call"
                        ],
                        [
                            "self.forward('crossfwd', x=generated[:cur_len], lengths=gen_len, positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "self.forward('fwd', x=generated[:cur_len], lengths=gen_len, positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "tensor.data[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.forward('crossfwd', x=generated[:cur_len], lengths=src_len.new(bs * beam_size).fill_(cur_len), positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "self.forward('fwd', x=generated[:cur_len], lengths=src_len.new(bs * beam_size).fill_(cur_len), positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "tensor.data[-1, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1059": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.image_embeddings(x, image_loc.transpose(0, 1), image_dist)",
                            "Call"
                        ],
                        [
                            "self.embeddings(x)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).to(tensor.dtype)",
                            "BinOp"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "self.cross_alignment(tensor, image_enc, attn_mask, image_mask)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm15[i](tensor)",
                            "Call"
                        ],
                        [
                            "text_embed",
                            "Name"
                        ],
                        [
                            "self.embeddings(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([img_tensor, tensor], dim=1)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.image_embeddings(x, image_loc.transpose(0, 1), image_dist)",
                            "Call"
                        ],
                        [
                            "tensor + self.cross_lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "text_embed",
                            "Name"
                        ],
                        [
                            "self.embeddings(x)",
                            "Call"
                        ],
                        [
                            "tensor + self.position_embeddings(positions).expand_as(tensor)",
                            "BinOp"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "tensor + self.cross_lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.cross_alignment(tensor, image_enc, attn_mask, image_mask)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm15[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.image_embeddings(x, image_loc.transpose(0, 1), image_dist)",
                            "Call"
                        ],
                        [
                            "self.refine_embeddings(tensor, attn_mask)",
                            "Call"
                        ],
                        [
                            "self.transformer_obj(tensor)",
                            "Call"
                        ],
                        [
                            "self.forward('crossfwd', x=generated[:cur_len], lengths=gen_len, positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "self.forward('fwd', x=generated[:cur_len], lengths=gen_len, positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "tensor.data[-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "self.forward('crossfwd', x=generated[:cur_len], lengths=src_len.new(bs * beam_size).fill_(cur_len), positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "self.forward('fwd', x=generated[:cur_len], lengths=src_len.new(bs * beam_size).fill_(cur_len), positions=positions[:cur_len], langs=cur_langs, causal=True, src_enc=src_enc, src_len=src_len, cache=cache)",
                            "Call"
                        ],
                        [
                            "tensor.data[-1, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1077": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MultiHeadedDotAttention(num_heads, dim, project_k_v=1, scale=1, do_aoa=1, norm_q=0, dropout_aoa=dropout)",
                            "Call"
                        ],
                        [
                            "self.attentions[i](tensor, attn_mask, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache, segment_label=lang_id)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i][lang_id](tensor, src_mask, kv=src_enc, cache=cache)",
                            "Call"
                        ],
                        [
                            "self.attentions[i](tensor, self_attn_masks, cache=None)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.attentions[i](tensor, attn_mask, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_1417": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -float('inf'))",
                            "Call"
                        ],
                        [
                            "self.proj(x).view(-1, self.n_words)",
                            "Call"
                        ],
                        [
                            "self.proj.log_prob(x) if get_scores else None",
                            "IfExp"
                        ],
                        [
                            "torch.matmul(q, k.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "self.proj(x).view(-1, self.n_objs)",
                            "Call"
                        ],
                        [
                            "self.pred_layer.get_scores(tensor)",
                            "Call"
                        ],
                        [
                            "self.pred_layer.get_scores(tensor)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1424": {
                "variable": {
                    "value": "(next_scores, next_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "_scores.view(bs, beam_size * n_words)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2 * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "erf_56": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_304": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_315": {
                "variable": {
                    "value": "self.dropout_aoa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_aoa",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_454": {
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.att_weight_c(c).expand(-1, -1, q_len) + self.att_weight_q(q).permute(0, 2, 1).expand(-1, c_len, -1) + cq",
                            "BinOp"
                        ],
                        [
                            "torch.max(torch.min(s, threshold), -threshold)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_455": {
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.att_weight_c(c).expand(-1, -1, q_len) + self.att_weight_q(q).permute(0, 2, 1).expand(-1, c_len, -1) + cq",
                            "BinOp"
                        ],
                        [
                            "torch.max(torch.min(s, threshold), -threshold)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_857": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MultiHeadedDotAttention(num_heads, dim, project_k_v=1, scale=1, do_aoa=1, norm_q=0, dropout_aoa=dropout)",
                            "Call"
                        ],
                        [
                            "self.attentions[i](tensor, attn_mask, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache, segment_label=lang_id)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i][lang_id](tensor, src_mask, kv=src_enc, cache=cache)",
                            "Call"
                        ],
                        [
                            "self.attentions[i](tensor, self_attn_masks, cache=None)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.attentions[i](tensor, attn_mask, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1089": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MultiHeadedDotAttention(num_heads, dim, project_k_v=1, scale=1, do_aoa=1, norm_q=0, dropout_aoa=dropout)",
                            "Call"
                        ],
                        [
                            "self.attentions[i](tensor, attn_mask, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache, segment_label=lang_id)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i][lang_id](tensor, src_mask, kv=src_enc, cache=cache)",
                            "Call"
                        ],
                        [
                            "self.attentions[i](tensor, self_attn_masks, cache=None)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.attentions[i](tensor, attn_mask, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_1160": {
                "input": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_img.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1298": {
                "variable": {
                    "value": "next_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_1300": {
                "variable": {
                    "value": "next_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(scores / sample_temperature, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1300": {
                "variable": {
                    "value": "next_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_312": {
                "in_features": {
                    "value": "(1 + scale) * d_model",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * d_model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GLU_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_514": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_694": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_696": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_709": {
                "normalized_shape": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_793": {
                "start": {
                    "value": "src_len.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1015": {
                "start": {
                    "value": "src_len.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_363": {
                "tensors": {
                    "value": "[x, query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_513": {
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_1298": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -float('inf'))",
                            "Call"
                        ],
                        [
                            "self.proj(x).view(-1, self.n_words)",
                            "Call"
                        ],
                        [
                            "self.proj.log_prob(x) if get_scores else None",
                            "IfExp"
                        ],
                        [
                            "torch.matmul(q, k.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "self.proj(x).view(-1, self.n_objs)",
                            "Call"
                        ],
                        [
                            "self.pred_layer.get_scores(tensor)",
                            "Call"
                        ],
                        [
                            "self.pred_layer.get_scores(tensor)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1300": {
                "input": {
                    "value": "scores / sample_temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/optim.py": {
        "torch": {
            "zeros_like_39": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_40": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/slurm.py": {
        "torch": {
            "set_device_154": {
                "device": {
                    "value": "params.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/trainer_collate.py": {
        "torch": {
            "stack_90": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_91": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_92": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_93": {
                "variable": {
                    "value": "x_obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_126": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_127": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_164": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_165": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "x_obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "x_img_ori",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ori_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_201": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_202": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_203": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_30": {
                "ndarray": {
                    "value": "s.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "ndarray": {
                    "value": "s.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "lm.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/utils.py": {
        "torch": {
            "arange_336": {
                "start": {
                    "value": "slen",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "M3P/src/xtrainer.py": {
        "torch": {
            "multinomial_426": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params.pred_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "len(_x_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_574": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.params.dump_path, 'checkpoint.pth')",
                            "Call"
                        ],
                        [
                            "self.params.reload_checkpoint",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_710": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "lengths.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_796": {
                "variable": {
                    "value": "idx_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len1.size(0)",
                            "Call"
                        ],
                        [
                            "len1.size(0)",
                            "Call"
                        ],
                        [
                            "len1.size(0)",
                            "Call"
                        ],
                        [
                            "len1.size(0)",
                            "Call"
                        ],
                        [
                            "len1.size(0)",
                            "Call"
                        ],
                        [
                            "len1.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_815": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model('fwd', x=x, lengths=lengths, positions=positions, langs=langs, causal=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "emb[CLF_ID1].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "emb[CLF_ID2, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_816": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y.to(pred.device).type_as(pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_905": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_906": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_907": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_908": {
                "variable": {
                    "value": "x_obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_940": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_941": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_942": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_978": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_979": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_980": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_981": {
                "variable": {
                    "value": "x_obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_982": {
                "variable": {
                    "value": "x_img_ori",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ori_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1016": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1017": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1018": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1019": {
                "variable": {
                    "value": "x_obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1020": {
                "variable": {
                    "value": "x_img_ori",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ori_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1021": {
                "variable": {
                    "value": "x_clcm_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "clcm_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1057": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1058": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1059": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1107": {
                "variable": {
                    "value": "x_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1108": {
                "variable": {
                    "value": "img_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1109": {
                "variable": {
                    "value": "x_img_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_1212": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.params.pred_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "len(_w_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_1411": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len2.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "len2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1473": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len2.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "len2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1547": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len2.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "len2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_1731": {
                "variable": {
                    "value": "att_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_object_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "masked_object_features[:max_len]",
                            "Subscript"
                        ],
                        [
                            "np.stack(masked_object_features, 0)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(np.stack(masked_object_features, 0))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1779": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len2.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "len2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_1854": {
                "variable": {
                    "value": "loss_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec2.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "img_enc.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1902": {
                "variable": {
                    "value": "langs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lang_img, lang_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_1929": {
                "variable": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_scores.view(-1, params.sample_n).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.from_numpy(np.array(pos_labels))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_1931": {
                "variable": {
                    "value": "bce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_scores.view(-1).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target_labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1971": {
                "variable": {
                    "value": "langs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lang_img, lang_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_1998": {
                "variable": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_scores.view(-1, params.sample_n).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.from_numpy(np.array(pos_labels))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_2000": {
                "variable": {
                    "value": "bce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_scores.view(-1).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target_labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_2035": {
                "variable": {
                    "value": "langs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lang_img, lang_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2141": {
                "variable": {
                    "value": "langs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lang_img, lang_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_2228": {
                "variable": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "slen * bs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_2367": {
                "variable": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_scores.view(-1, params.sample_n).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.from_numpy(np.array(pos_labels))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_2369": {
                "variable": {
                    "value": "bce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_scores.view(-1).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target_labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_2617": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len2.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "len2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_2684": {
                "variable": {
                    "value": "s2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(labels, dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_2685": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_scores.view(-1).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "s2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(labels, dtype='float32')).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_2877": {
                "variable": {
                    "value": "alen",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len2.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "len2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_395": {
                "variable": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pred_mask.astype(np.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_400": {
                "variable": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "slen * bs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_529": {
                "obj": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{'epoch': self.epoch, 'n_total_iter': self.n_total_iter, 'best_metrics': self.best_metrics, 'best_stopping_criterion': self.best_stopping_criterion}",
                            "Dict"
                        ],
                        [
                            "torch.load(checkpoint_path, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.params.dump_path, '%s.pth' % name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.params.dump_path, '%s.pth' % name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_560": {
                "obj": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{'epoch': self.epoch, 'n_total_iter': self.n_total_iter, 'best_metrics': self.best_metrics, 'best_stopping_criterion': self.best_stopping_criterion}",
                            "Dict"
                        ],
                        [
                            "torch.load(checkpoint_path, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.params.dump_path, '%s.pth' % name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.params.dump_path, '%s.pth' % name)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_683": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, torch.LongTensor(pad, bs2).fill_(params.pad_index)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_2076": {
                "variable": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_scores.view(-1, params.sample_n).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.from_numpy(np.array(pos_labels))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_2078": {
                "variable": {
                    "value": "bce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_scores.view(-1).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target_labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_2180": {
                "variable": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_scores.view(-1, params.sample_n).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.from_numpy(np.array(pos_labels))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_2182": {
                "variable": {
                    "value": "bce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_scores.view(-1).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target_labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_2295": {
                "variable": {
                    "value": "img_rec_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_img_rec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model('transform', tensor=_img_out, stream='img')",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "original_img",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mse_loss_2296": {
                "variable": {
                    "value": "text_rec_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_text_rec.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "original_text",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_2344": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_2545": {
                "variable": {
                    "value": "ce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_scores.view(-1, params.sample_n).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.from_numpy(np.array(pos_labels))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_2547": {
                "variable": {
                    "value": "bce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_scores.view(-1).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target_labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_2721": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeds_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.embeddings(input_ids)",
                            "Call"
                        ],
                        [
                            "model.embeddings(input_ids)",
                            "Call"
                        ],
                        [
                            "model.module.embeddings(input_ids)",
                            "Call"
                        ],
                        [
                            "model.embeddings(input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_2734": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_feature",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_2798": {
                "variable": {
                    "value": "denorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_grad.view(delta_grad.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_2799": {
                "variable": {
                    "value": "denorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denorm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1).view(-1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ],
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1, p=float('inf')).view(-1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ],
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ],
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1, p=float('inf')).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_2834": {
                "variable": {
                    "value": "denorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_grad.view(delta_grad.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_2835": {
                "variable": {
                    "value": "denorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denorm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1).view(-1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ],
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1, p=float('inf')).view(-1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ],
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ],
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1, p=float('inf')).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_685": {
                "variable": {
                    "value": "positions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positions, torch.arange(pad)[:, None] + positions[-1][None] + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_687": {
                "variable": {
                    "value": "langs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[langs, langs[-1][None].expand(pad, bs2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomSampler_1162": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['cross_modal'][lang1, lang2]['train']",
                            "Subscript"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'slide'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DistributedSampler_1162": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['cross_modal'][lang1, lang2]['train']",
                            "Subscript"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'slide'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_1166": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['cross_modal'][lang1, lang2]['train']",
                            "Subscript"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'slide'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if self.params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "mt_caption_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_1169": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['cross_modal'][lang1, lang2]['train']",
                            "Subscript"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'slide'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if self.params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "caption_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_1173": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['cross_modal'][lang1, lang2]['train']",
                            "Subscript"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'slide'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if self.params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "retrieval_pretrain_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_1925": {
                "ndarray": {
                    "value": "one_hot_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_1930": {
                "ndarray": {
                    "value": "np.array(pos_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_1994": {
                "ndarray": {
                    "value": "one_hot_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_1999": {
                "ndarray": {
                    "value": "np.array(pos_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_2348": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_obj_pred_regs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "obj_pred_regs[mask_obj_bool, :]",
                            "Subscript"
                        ],
                        [
                            "obj_pred_regs[mask_obj_bool, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "mask_obj_feat_ori",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "obj_feat_ori[mask_obj_bool, :]",
                            "Subscript"
                        ],
                        [
                            "obj_feat_ori[mask_obj_bool, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_2363": {
                "ndarray": {
                    "value": "one_hot_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_2368": {
                "ndarray": {
                    "value": "np.array(pos_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_2391": {
                "variable": {
                    "value": "bce_loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_scores2.view(-1).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "clcm_labels.view(-1).float().cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_2519": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_2713": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeds_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.embeddings(input_ids)",
                            "Call"
                        ],
                        [
                            "model.embeddings(input_ids)",
                            "Call"
                        ],
                        [
                            "model.module.embeddings(input_ids)",
                            "Call"
                        ],
                        [
                            "model.embeddings(input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_2727": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_feature",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_2802": {
                "variable": {
                    "value": "delta_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta.view(delta.size(0), -1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_2807": {
                "variable": {
                    "value": "denorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_grad.view(delta_grad.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_2808": {
                "variable": {
                    "value": "denorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denorm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1).view(-1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ],
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1, p=float('inf')).view(-1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ],
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ],
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1, p=float('inf')).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_2838": {
                "variable": {
                    "value": "delta_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta.reshape(delta.size(0), -1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_2843": {
                "variable": {
                    "value": "denorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta_grad.view(delta_grad.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_2844": {
                "variable": {
                    "value": "denorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denorm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1).view(-1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ],
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1, p=float('inf')).view(-1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ],
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ],
                        [
                            "torch.norm(delta_grad.view(delta_grad.size(0), -1), dim=1, p=float('inf')).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(denorm, min=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randperm_669": {
                "n": {
                    "value": "bs1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_845": {
                "ndarray": {
                    "value": "s.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_870": {
                "ndarray": {
                    "value": "s.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_1177": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['cross_modal'][lang1, lang2]['train']",
                            "Subscript"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'slide'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if self.params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "slide_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_1180": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['cross_modal'][lang1, lang2]['train']",
                            "Subscript"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ],
                        [
                            "'slide'",
                            "MethodArgument"
                        ],
                        [
                            "'coco'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.params.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset) if self.params.n_gpu_per_node == 1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "retrieval_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.params.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_2072": {
                "ndarray": {
                    "value": "one_hot_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_2077": {
                "ndarray": {
                    "value": "np.array(pos_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_2176": {
                "ndarray": {
                    "value": "one_hot_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_2181": {
                "ndarray": {
                    "value": "np.array(pos_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_2523": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_obj_pred_regs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "obj_pred_regs[mask_obj_bool, :]",
                            "Subscript"
                        ],
                        [
                            "obj_pred_regs[mask_obj_bool, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "mask_obj_feat_ori",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "obj_feat_ori[mask_obj_bool, :]",
                            "Subscript"
                        ],
                        [
                            "obj_feat_ori[mask_obj_bool, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_2541": {
                "ndarray": {
                    "value": "one_hot_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ],
                        [
                            "np.eye(nb_classes, dtype='float32')[targets]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_2546": {
                "ndarray": {
                    "value": "np.array(pos_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_2573": {
                "variable": {
                    "value": "bce_loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_scores2.view(-1).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "clcm_labels.view(-1).float().cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_2718": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeds_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.embeddings(input_ids)",
                            "Call"
                        ],
                        [
                            "model.embeddings(input_ids)",
                            "Call"
                        ],
                        [
                            "model.module.embeddings(input_ids)",
                            "Call"
                        ],
                        [
                            "model.embeddings(input_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_2732": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_feature",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_2811": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(embeds_init)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(embeds_init).uniform_(-1, 1)",
                            "Call"
                        ],
                        [
                            "(delta * mag.view(-1, 1, 1)).detach()",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(embeds_init).uniform_(-adv_init_mag, adv_init_mag)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(image_feature)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(image_feature).uniform_(-1, 1)",
                            "Call"
                        ],
                        [
                            "(delta * mag.view(-1, 1, 1)).detach()",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(image_feature).uniform_(-adv_init_mag, adv_init_mag)",
                            "Call"
                        ],
                        [
                            "(delta + adv_lr * delta_grad / denorm).detach()",
                            "Call"
                        ],
                        [
                            "(delta * reweights).detach()",
                            "Call"
                        ],
                        [
                            "(delta + adv_lr * delta_grad / denorm).detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(delta, -adv_max_norm, adv_max_norm).detach()",
                            "Call"
                        ],
                        [
                            "(delta + adv_lr * delta_grad / denorm.view(-1, 1, 1)).detach()",
                            "Call"
                        ],
                        [
                            "(delta * reweights).detach()",
                            "Call"
                        ],
                        [
                            "(delta + adv_lr * delta_grad / denorm).detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(delta, -adv_max_norm, adv_max_norm).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-adv_max_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "adv_max_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_2847": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(embeds_init)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(embeds_init).uniform_(-1, 1)",
                            "Call"
                        ],
                        [
                            "(delta * mag.view(-1, 1, 1)).detach()",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(embeds_init).uniform_(-adv_init_mag, adv_init_mag)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(image_feature)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(image_feature).uniform_(-1, 1)",
                            "Call"
                        ],
                        [
                            "(delta * mag.view(-1, 1, 1)).detach()",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(image_feature).uniform_(-adv_init_mag, adv_init_mag)",
                            "Call"
                        ],
                        [
                            "(delta + adv_lr * delta_grad / denorm).detach()",
                            "Call"
                        ],
                        [
                            "(delta * reweights).detach()",
                            "Call"
                        ],
                        [
                            "(delta + adv_lr * delta_grad / denorm).detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(delta, -adv_max_norm, adv_max_norm).detach()",
                            "Call"
                        ],
                        [
                            "(delta + adv_lr * delta_grad / denorm.view(-1, 1, 1)).detach()",
                            "Call"
                        ],
                        [
                            "(delta * reweights).detach()",
                            "Call"
                        ],
                        [
                            "(delta + adv_lr * delta_grad / denorm).detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(delta, -adv_max_norm, adv_max_norm).detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-adv_max_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "adv_max_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_72": {
                "module": {
                    "value": "getattr(self, name)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[params.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "params.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_grad_norm__225": {
                "parameters": {
                    "value": "self.parameters[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_309": {
                "ndarray": {
                    "value": "permutation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores.argsort()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_873": {
                "ndarray": {
                    "value": "lm.astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_2715": {
                "input": {
                    "value": "dims.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_2728": {
                "*size": {
                    "value": "[image_feature.size(0), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_2729": {
                "input": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_lengths * embeds_init.size(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.ones([image_feature.size(0), 1]).cuda() * image_feature.size(-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__2773": {
                "parameters": {
                    "value": "self.parameters[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__237": {
                "parameters": {
                    "value": "apex.amp.master_params(self.optimizers[name])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_414": {
                "input": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.rand(slen, bs) <= params.word_pred",
                            "Compare"
                        ],
                        [
                            "torch.from_numpy(pred_mask.astype(np.uint8))",
                            "Call"
                        ],
                        [
                            "torch.zeros(slen * bs, dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(slen, bs)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(-1)",
                            "Call"
                        ],
                        [
                            "pred_mask.bool()",
                            "Call"
                        ],
                        [
                            "pred_mask.view(slen, bs)",
                            "Call"
                        ],
                        [
                            "alen[:, None] < lengths[None] - 1",
                            "Compare"
                        ],
                        [
                            "y != self.params.pad_index",
                            "Compare"
                        ],
                        [
                            "y != self.params.pad_index",
                            "Compare"
                        ],
                        [
                            "alen[:, None] < len2[None] - 1",
                            "Compare"
                        ],
                        [
                            "alen[:, None] < len2[None] - 1",
                            "Compare"
                        ],
                        [
                            "alen[:, None] < len2[None] - 1",
                            "Compare"
                        ],
                        [
                            "alen[:, None] < len2[None] - 1",
                            "Compare"
                        ],
                        [
                            "torch.zeros(slen * bs, dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(slen, bs)",
                            "Call"
                        ],
                        [
                            "alen[:, None] < len2[None] - 1",
                            "Compare"
                        ],
                        [
                            "alen[:, None] < len2[None] - 1",
                            "Compare"
                        ]
                    ]
                }
            },
            "clip_grad_norm__2785": {
                "parameters": {
                    "value": "apex.amp.master_params(self.optimizers[name])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "params.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_685": {
                "start": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8 - ml1 % 8",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "M3P/train_x.py": {
        "torch": {}
    }
}