{
    "chatbot.py": {
        "tensorflow": {
            "ConfigProto_75": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_80": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_82": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "net.save_variables_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_81": {
                "session": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_51": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "save_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.dirname(model_path)",
                            "Call"
                        ],
                        [
                            "input_path",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "placeholder_99": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "c.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "c.op.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "h.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "h.op.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_131": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_132": {
                "variable": {
                    "value": "self.global_epoch_fraction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_epoch_fraction",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_133": {
                "variable": {
                    "value": "self.global_seconds_elapsed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_seconds_elapsed",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "self.input_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.batch_size, args.seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_153": {
                "variable": {
                    "value": "self._flattened_initial_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.initial_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_178": {
                "variable": {
                    "value": "(outputs, self.final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layer[p]",
                            "Subscript"
                        ],
                        [
                            "PartitionedMultiRNNCell(cell_fn, partitions=args.num_blocks, partition_size=args.block_size, layers=args.num_layers)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, self.input_data)",
                            "Call"
                        ],
                        [
                            "{self.input_data: shaped_input}",
                            "Dict"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "self.initial_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "rnnlm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, layer_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_78": {
                "variable": {
                    "value": "p_inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "layer_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat((layer_input[:, -offset_width:], layer_input[:, :-offset_width]), axis=1, name='concat_offset_%d' % l)",
                            "Call"
                        ],
                        [
                            "tf.concat(p_outputs, axis=1, name='concat_%d' % l)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "len(layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'split_%d' % l",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_89": {
                "variable": {
                    "value": "layer_input",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "p_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'concat_%d' % l",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_101": {
                "c": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(c.dtype, c.shape, c.op.name)",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(h.dtype, h.shape, h.op.name)",
                            "Call"
                        ],
                        [
                            "state",
                            "Name"
                        ],
                        [
                            "tf.placeholder(h.dtype, h.shape, h.op.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "h.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "h.op.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_162": {
                "variable": {
                    "value": "softmax_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[layer_size, args.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_165": {
                "variable": {
                    "value": "softmax_b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_170": {
                "variable": {
                    "value": "embedding",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.vocab_size, layer_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_173": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [args.vocab_size, layer_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.input_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_200": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_204": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.batch_size, args.seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_221": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.reshape(self.targets, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_226": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn_ops.sparse_softmax_cross_entropy_with_logits(labels=tf.reshape(self.targets, [-1]), logits=self.logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_230": {
                "variable": {
                    "value": "tvars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_232": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.cost, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_234": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_240": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_267": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "rnnlm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_64": {
                "name": {
                    "value": "type(self).__name__ + 'ZeroState'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_75": {
                "variable": {
                    "value": "layer_input",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "(layer_input[:, -offset_width:], layer_input[:, :-offset_width])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'concat_offset_%d' % l",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "rnnlm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_194": {
                "a": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, [-1, layer_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('softmax_w', [layer_size, args.vocab_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_228": {
                "name": {
                    "value": "cost",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_243": {
                "structure": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "get_collection_252": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "rnnlm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_232": {
                "ys": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "'cell_%d_%d' % (l, p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_222": {
                "tensor": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "trainable_variables_90": {
                "variable": {
                    "value": "model_vars",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_99": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_103": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model.save_variables_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FileWriter_122": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_65": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "args.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_101": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_197": {
                "ref": {
                    "value": "model.global_epoch_fraction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "global_epoch_fraction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.run(model.global_epoch_fraction)",
                            "Call"
                        ],
                        [
                            "float(global_step) / float(steps_per_epoch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_198": {
                "ref": {
                    "value": "model.global_seconds_elapsed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "global_seconds_elapsed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.run(model.global_seconds_elapsed)",
                            "Call"
                        ],
                        [
                            "global_seconds_elapsed + elapsed",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_115": {
                "ref": {
                    "value": "model.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "args.set_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_143": {
                "ref": {
                    "value": "model.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "current_learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.run(model.lr)",
                            "Call"
                        ],
                        [
                            "current_learning_rate * args.decay_rate",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}