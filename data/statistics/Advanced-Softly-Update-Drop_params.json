{
    "bcnn.py": {
        "torch": {
            "Sequential_42": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.features.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_80": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_82": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(X)",
                            "Call"
                        ],
                        [
                            "X.view(N, 512, 28 ** 2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(X, torch.transpose(X, 1, 2)) / 28 ** 2",
                            "BinOp"
                        ],
                        [
                            "X.view(N, 512 ** 2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(X + 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(X)",
                            "Call"
                        ],
                        [
                            "self.fc(X)",
                            "Call"
                        ],
                        [
                            "X * 30",
                            "BinOp"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg16.features.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_151": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(bp_output)",
                            "Call"
                        ],
                        [
                            "x.view(N, 512, h * w)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, torch.transpose(x, 1, 2)) / (h * w)",
                            "BinOp"
                        ],
                        [
                            "x.view(N, 512 ** 2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(x + 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_75": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(X)",
                            "Call"
                        ],
                        [
                            "X.view(N, 512, 28 ** 2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(X, torch.transpose(X, 1, 2)) / 28 ** 2",
                            "BinOp"
                        ],
                        [
                            "X.view(N, 512 ** 2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(X + 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(X)",
                            "Call"
                        ],
                        [
                            "self.fc(X)",
                            "Call"
                        ],
                        [
                            "X * 30",
                            "BinOp"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(X, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_149": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(bp_output)",
                            "Call"
                        ],
                        [
                            "x.view(N, 512, h * w)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, torch.transpose(x, 1, 2)) / (h * w)",
                            "BinOp"
                        ],
                        [
                            "x.view(N, 512 ** 2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(x + 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(x, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_75": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(X)",
                            "Call"
                        ],
                        [
                            "X.view(N, 512, 28 ** 2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(X, torch.transpose(X, 1, 2)) / 28 ** 2",
                            "BinOp"
                        ],
                        [
                            "X.view(N, 512 ** 2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(X + 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(X)",
                            "Call"
                        ],
                        [
                            "self.fc(X)",
                            "Call"
                        ],
                        [
                            "X * 30",
                            "BinOp"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_84": {
                "input": {
                    "value": "self.fc.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_149": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.fc(bp_output)",
                            "Call"
                        ],
                        [
                            "x.view(N, 512, h * w)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, torch.transpose(x, 1, 2)) / (h * w)",
                            "BinOp"
                        ],
                        [
                            "x.view(N, 512 ** 2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(x + 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "resnet.py": {
        "torch": {
            "manual_seed_8": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_9": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_10": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_211": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "448",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "448",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_40": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_87": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(64, 3, 448, 448)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(N, -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(N, -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x * 30",
                            "BinOp"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(N, -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(N, -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x * 30",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_138": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_175": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_185": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_202": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(64, 3, 448, 448)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(N, -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(N, -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x * 30",
                            "BinOp"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(N, -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(N, -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x * 30",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_106": {
                "input": {
                    "value": "self.fc.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_204": {
                "input": {
                    "value": "self.fc.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "CrossEntropyLoss_72": {
                "variable": {
                    "value": "self._criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_86": {
                "variable": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params_to_optimize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._net.parameters()",
                            "Call"
                        ],
                        [
                            "self._net.module.fc.parameters()",
                            "Call"
                        ],
                        [
                            "self._net.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self._options['base_lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self._options['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "self._train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Imagefolder_modified(os.path.join(data_dir, 'train'), transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self._options['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "self._test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Imagefolder_modified(os.path.join(data_dir, 'val'), transform=test_transform, cached=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "full_159": {
                "variable": {
                    "value": "smoothed_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(N, self._class)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "(1 - self._label_weight) / (self._class - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_162": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_65": {
                "variable": {
                    "value": "self._net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NET(n_classes=options['n_classes'], pretrained=True)",
                            "Call"
                        ],
                        [
                            "NET(n_classes=options['n_classes'], pretrained=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_91": {
                "variable": {
                    "value": "self._warmupscheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "warmup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda epoch: epoch / 5",
                            "Lambda"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_96": {
                "variable": {
                    "value": "self._scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_99": {
                "variable": {
                    "value": "self._scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self._options['epochs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_count_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_129": {
                "*size": {
                    "value": "options['n_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_136": {
                "input": {
                    "value": "P2 * torch.log(P1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_204": {
                "variable": {
                    "value": "(closest_dis, prediction)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_279": {
                "variable": {
                    "value": "(_, prediction)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._net(X)",
                            "Call"
                        ],
                        [
                            "self._net(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_161": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_163": {
                "input": {
                    "value": "log_prob * smoothed_labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_207": {
                "variable": {
                    "value": "logits_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._net(X)",
                            "Call"
                        ],
                        [
                            "self._net(X)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_207": {
                "variable": {
                    "value": "logits_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_219": {
                "input": {
                    "value": "prediction == y.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_281": {
                "input": {
                    "value": "prediction == y.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "load_80": {
                "f": {
                    "value": "os.path.join(self._path, 'bcnn_step1.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_136": {
                "input": {
                    "value": "P1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "P1.float()",
                            "Call"
                        ],
                        [
                            "P1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_251": {
                "obj": {
                    "value": "self._net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self._path, 'bcnn_step{}.pth'.format(self._step))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_253": {
                "obj": {
                    "value": "self._net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self._path, options['net'] + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}