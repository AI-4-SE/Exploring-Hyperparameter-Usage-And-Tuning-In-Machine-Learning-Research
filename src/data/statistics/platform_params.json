{
    "newsgac/ace/tasks.py": {
        "sklearn": {}
    },
    "newsgac/learners/models/gb.py": {
        "sklearn": {
            "GradientBoostingClassifier_87": {
                "learning_rate": {
                    "value": "self.parameters.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "self.parameters.n_estimators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loss": {
                    "value": "self.parameters.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_features": {
                    "value": "self.transform_max_features(self.parameters.max_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.parameters.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "self.transform_0_to_none(self.parameters.max_depth)",
                    "type": "Call",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_weight_fraction_leaf": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max_leaf_nodes": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "min_impurity_decrease": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "min_impurity_split": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "init": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "presort": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                },
                "validation_fraction": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "n_iter_no_change": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "newsgac/learners/models/mlp.py": {
        "sklearn": {
            "MLPClassifier_79": {
                "hidden_layer_sizes": {
                    "value": "self.transform_hidden_layer_to_tuple(self.parameters.hidden_layer_sizes)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.parameters.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "solver": {
                    "value": "self.parameters.solver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self.parameters.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.parameters.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.parameters.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "self.parameters.max_iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate_init": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "power_t": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterovs_momentum": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "early_stopping": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "validation_fraction": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "n_iter_no_change": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "newsgac/learners/models/nb.py": {
        "sklearn": {
            "MultinomialNB_17": {
                "alpha": {
                    "value": "self.parameters.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "newsgac/learners/models/rf.py": {
        "sklearn": {
            "RandomForestClassifier_95": {
                "n_estimators": {
                    "value": "self.parameters.n_estimators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_features": {
                    "value": "self.parameters.max_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.parameters.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "self.transform_0_to_none(self.parameters.max_depth)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_leaf_nodes": {
                    "value": "self.transform_0_to_none(self.parameters.max_leaf_nodes)",
                    "type": "Call",
                    "possible_values": []
                },
                "min_samples_split": {
                    "value": "self.parameters.min_samples_split",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "self.parameters.min_samples_leaf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bootstrap": {
                    "value": "self.parameters.bootstrap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "self.transform_max_features(self.parameters.class_weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "min_weight_fraction_leaf": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "min_impurity_decrease": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "min_impurity_split": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "oob_score": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "config.n_parallel_jobs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "newsgac/learners/models/svc.py": {
        "sklearn": {
            "SVC_38": {
                "kernel": {
                    "value": "self.parameters.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "C": {
                    "value": "self.parameters.penalty_parameter_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.parameters.random_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.parameters.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decision_function_shape": {
                    "value": "ovr",
                    "type": "str",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "balanced",
                    "type": "str",
                    "possible_values": []
                },
                "probability": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "newsgac/nlp_tools/models/frog.py": {
        "sklearn": {}
    },
    "newsgac/nlp_tools/models/tfidf.py": {
        "sklearn": {
            "TfidfVectorizer_19": {
                "sublinear_tf": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "min_df": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "newsgac/nlp_tools/transformers.py": {
        "sklearn": {}
    },
    "newsgac/pipelines/get_sk_pipeline.py": {
        "sklearn": {
            "FeatureUnion_33": {
                "transformer_list": {
                    "value": "[('TFIDF', features_pipeline(steps=[('RemoveQuotes', RemoveQuotes()) if pipeline.quote_removal else None, (name, feature_extractor)], feature_names_from=name))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FeatureUnion_45": {
                "transformer_list": {
                    "value": "[('Basic', ExtractBasicFeatures()), ('Quote', ExtractQuotes()), ('Sentiment', features_pipeline(steps=[('RemoveQuotes', RemoveQuotes()) if pipeline.quote_removal else None, ('SentimentFeatures', ExtractSentimentFeatures())], feature_names_from='SentimentFeatures')), ('Frog', features_pipeline(steps=[('RemoveQuotes', RemoveQuotes()) if pipeline.quote_removal else None, (name, feature_extractor)], feature_names_from=name))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FeatureUnion_109": {
                "transformer_list": {
                    "value": "[('frog', frog_union(pipeline, 'frog', frog.get_feature_extractor())), ('tfidf', tfidf_union(pipeline, 'tfidf', tfidf.get_feature_extractor()))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "RobustScaler_79": {
                "with_centering": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RobustScaler_92": {
                "with_centering": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MinMaxScaler_93": {
                "feature_range": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RobustScaler_113": {
                "with_centering": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MinMaxScaler_114": {
                "feature_range": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "newsgac/pipelines/grid_search.py": {
        "sklearn": {
            "GridSearchCV_108": {
                "variable": {
                    "value": "search",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "skp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_sk_pipeline(pipeline)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "param_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "iid": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "return_train_score": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "config.n_parallel_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scoring": {
                    "value": "scores[3]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "['accuracy', 'recall_micro', 'precision_micro', 'f1_micro']",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "newsgac/pipelines/models.py": {
        "sklearn": {
            "confusion_matrix_47": {
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "precision_score_48": {
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_49": {
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_50": {
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_51": {
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_52": {
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_53": {
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_54": {
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_55": {
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_56": {
                "y_true": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cohen_kappa_score_57": {
                "y1": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y2": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "newsgac/pipelines/run.py": {
        "sklearn": {
            "KFold_30": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_val_predict_31": {
                "variable": {
                    "value": "cross_val_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.array([article.label for article in pipeline.data_source.articles])",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KFold(n_splits=10, random_state=42, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "config.n_cross_val_jobs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "newsgac/pipelines/utils.py": {
        "sklearn": {
            "DictVectorizer_8": {
                "sparse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "newsgac/pipelines/views.py": {
        "sklearn": {}
    },
    "test/nlp_tools/basic_features.py": {
        "sklearn": {
            "Pipeline_11": {
                "variable": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('ExtractBasicFeatures', ExtractBasicFeatures()), ('DictVectorizer', DictVectorizer())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DictVectorizer_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/nlp_tools/frog_features.py": {
        "sklearn": {
            "Pipeline_14": {
                "variable": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('Frog', frog), ('DictVectorizer', DictVectorizer())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DictVectorizer_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/nlp_tools/sentiment_features.py": {
        "sklearn": {
            "Pipeline_11": {
                "variable": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('ExtractSentimentFeatures', ExtractSentimentFeatures()), ('DictVectorizer', DictVectorizer())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DictVectorizer_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}