{
    "cldice_loss/keras/cldice.py": {
        "tensorflow": {
            "multiply_27": {
                "x": {
                    "value": "skel_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "soft_skel(y_pred, iter_)",
                            "Call"
                        ],
                        [
                            "soft_skel(y_pred, iters)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_28": {
                "x": {
                    "value": "skel_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "soft_skel(y_true, iter_)",
                            "Call"
                        ],
                        [
                            "soft_skel(y_true, iters)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_70": {
                "x": {
                    "value": "skel_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "soft_skel(y_pred, iter_)",
                            "Call"
                        ],
                        [
                            "soft_skel(y_pred, iters)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_71": {
                "x": {
                    "value": "skel_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "soft_skel(y_true, iter_)",
                            "Call"
                        ],
                        [
                            "soft_skel(y_true, iters)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cldice_loss/keras/soft_skeleton.py": {
        "tensorflow": {
            "relu_59": {
                "variable": {
                    "value": "skel",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "img - img1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_19": {
                "x": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-KL.MaxPool3D(pool_size=(3, 3, 1), strides=(1, 1, 1), padding='same', data_format=None)(-img)",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-KL.MaxPool3D(pool_size=(3, 1, 3), strides=(1, 1, 1), padding='same', data_format=None)(-img)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "relu_64": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "img - img1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_65": {
                "variable": {
                    "value": "intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "skel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(img - img1)",
                            "Call"
                        ],
                        [
                            "skel + tf.nn.relu(delta - intersect)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(img - img1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_66": {
                "features": {
                    "value": "delta - intersect",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cldice_loss/pytorch/cldice.py": {
        "torch": {
            "sum_33": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y_true * y_pred)[:, 1:, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_16": {
                "input": {
                    "value": "skel_pred[:, 1:, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_17": {
                "input": {
                    "value": "skel_true[:, 1:, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "y_pred[:, 1:, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "skel_pred[:, 1:, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "skel_true[:, 1:, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_16": {
                "input": {
                    "value": "skel_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "soft_skel(y_pred, iters)",
                            "Call"
                        ],
                        [
                            "soft_skel(y_pred, self.iter)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_17": {
                "input": {
                    "value": "skel_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "soft_skel(y_true, iters)",
                            "Call"
                        ],
                        [
                            "soft_skel(y_true, self.iter)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_49": {
                "input": {
                    "value": "skel_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "soft_skel(y_pred, iters)",
                            "Call"
                        ],
                        [
                            "soft_skel(y_pred, self.iter)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_50": {
                "input": {
                    "value": "skel_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "soft_skel(y_true, iters)",
                            "Call"
                        ],
                        [
                            "soft_skel(y_true, self.iter)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cldice_loss/pytorch/soft_skeleton.py": {
        "torch": {
            "relu_31": {
                "variable": {
                    "value": "skel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img - img1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img - img1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_10": {
                "input": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.max_pool2d(-img, (3, 1), (1, 1), (1, 0))",
                            "UnaryOp"
                        ],
                        [
                            "-F.max_pool3d(-img, (3, 1, 1), (1, 1, 1), (1, 0, 0))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "max_pool2d_20": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "soft_erode(img)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_pool2d_8": {
                "input": {
                    "value": "-img",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_pool2d_9": {
                "input": {
                    "value": "-img",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_15": {
                "input": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.max_pool2d(-img, (3, 1), (1, 1), (1, 0))",
                            "UnaryOp"
                        ],
                        [
                            "-F.max_pool3d(-img, (3, 1, 1), (1, 1, 1), (1, 0, 0))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "max_pool3d_22": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "soft_erode(img)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_36": {
                "input": {
                    "value": "delta - skel * delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool3d_12": {
                "input": {
                    "value": "-img",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_pool3d_13": {
                "input": {
                    "value": "-img",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_pool3d_14": {
                "input": {
                    "value": "-img",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}