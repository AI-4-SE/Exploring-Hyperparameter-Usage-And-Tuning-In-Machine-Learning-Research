{
    "datasets/demo.py": {
        "torch": {}
    },
    "datasets/sampler.py": {
        "torch": {
            "Generator_58": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_61": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasets/scannet.py": {
        "torch": {}
    },
    "datasets/transforms.py": {
        "torch": {
            "cat_349": {
                "variable": {
                    "value": "xyz_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xyz, torch.ones((len(xyz), 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_360": {
                "variable": {
                    "value": "view_frust_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(torch.tensor([0, 0, 0, im_w, im_w]) - cam_intr[0, 2]) * torch.tensor([0, max_depth, max_depth, max_depth, max_depth]) / cam_intr[0, 0], (torch.tensor([0, 0, im_h, 0, im_h]) - cam_intr[1, 2]) * torch.tensor([0, max_depth, max_depth, max_depth, max_depth]) / cam_intr[1, 1], torch.tensor([0, max_depth, max_depth, max_depth, max_depth])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_93": {
                "variable": {
                    "value": "data[proj_matrices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "proj_matrices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Tensor_167": {
                "variable": {
                    "value": "self.padding_end",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_170": {
                "variable": {
                    "value": "self.random_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "999",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_171": {
                "variable": {
                    "value": "self.random_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_epoch, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_174": {
                "variable": {
                    "value": "origin",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "variable": {
                    "value": "data[vol_origin]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.origin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "T.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_250": {
                "variable": {
                    "value": "bnds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_268": {
                "variable": {
                    "value": "origin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.tensor(((bnds[0, 1] + bnds[0, 0]) / 2, (bnds[1, 1] + bnds[1, 0]) / 2, -0.2)) - data['vol_origin']) / self.voxel_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_49": {
                "variable": {
                    "value": "data[depth]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_91": {
                "variable": {
                    "value": "view_proj_matrics",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "view_proj_matrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(view_proj_matrics)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_176": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[np.cos(r), -np.sin(r)], [np.sin(r), np.cos(r)]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "corners2d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[xmin, xmin, xmax, xmax], [ymin, ymax, ymin, ymax]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_217": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_259": {
                "input": {
                    "value": "view_frust_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([(torch.tensor([0, 0, 0, im_w, im_w]) - cam_intr[0, 2]) * torch.tensor([0, max_depth, max_depth, max_depth, max_depth]) / cam_intr[0, 0], (torch.tensor([0, 0, im_h, 0, im_h]) - cam_intr[1, 2]) * torch.tensor([0, max_depth, max_depth, max_depth, max_depth]) / cam_intr[1, 1], torch.tensor([0, max_depth, max_depth, max_depth, max_depth])])",
                            "Call"
                        ],
                        [
                            "rigid_transform(view_frust_pts.T, cam_pose).T",
                            "Attribute"
                        ],
                        [
                            "get_view_frustum(self.max_depth, size, cam_intr, cam_pose)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_260": {
                "input": {
                    "value": "view_frust_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([(torch.tensor([0, 0, 0, im_w, im_w]) - cam_intr[0, 2]) * torch.tensor([0, max_depth, max_depth, max_depth, max_depth]) / cam_intr[0, 0], (torch.tensor([0, 0, im_h, 0, im_h]) - cam_intr[1, 2]) * torch.tensor([0, max_depth, max_depth, max_depth, max_depth]) / cam_intr[1, 1], torch.tensor([0, max_depth, max_depth, max_depth, max_depth])])",
                            "Call"
                        ],
                        [
                            "rigid_transform(view_frust_pts.T, cam_pose).T",
                            "Attribute"
                        ],
                        [
                            "get_view_frustum(self.max_depth, size, cam_intr, cam_pose)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "world",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(world, torch.ones_like(world[:1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "ndarray": {
                    "value": "rotation_matrix4x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.eye(4)",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_86": {
                "variable": {
                    "value": "proj_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "extrinsics.data.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_266": {
                "input": {
                    "value": "center[:2] / 2 ** num_layers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_267": {
                "input": {
                    "value": "center[2] / 2 ** num_layers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_303": {
                "variable": {
                    "value": "occ_vol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tsdf_vol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TSDFVolumeTorch(vol_dim_s, vol_origin_partial, voxel_size=self.voxel_size * 2 ** l, margin=3)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.grid_sample(tsdf_s.view([1, 1] + old_voxel_dim), coords_world_s, mode='nearest', align_corners=align_corners).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_318": {
                "variable": {
                    "value": "tsdf_vol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tsdf_s.view([1, 1] + old_voxel_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "coords_world_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coords.view(3, x, y, z)[:, ::2 ** l, ::2 ** l, ::2 ** l] / 2 ** l",
                            "BinOp"
                        ],
                        [
                            "coords_world_s.view(3, -1)",
                            "Call"
                        ],
                        [
                            "2 * coords_world_s / (torch.Tensor(old_voxel_dim) - 1).view(3, 1) - 1",
                            "BinOp"
                        ],
                        [
                            "coords_world_s[[2, 1, 0]].T.view([1] + dim_s + [3])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_318": {
                "variable": {
                    "value": "tsdf_vol",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grid_sample_322": {
                "variable": {
                    "value": "tsdf_vol_bilin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tsdf_s.view([1, 1] + old_voxel_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "coords_world_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coords.view(3, x, y, z)[:, ::2 ** l, ::2 ** l, ::2 ** l] / 2 ** l",
                            "BinOp"
                        ],
                        [
                            "coords_world_s.view(3, -1)",
                            "Call"
                        ],
                        [
                            "2 * coords_world_s / (torch.Tensor(old_voxel_dim) - 1).view(3, 1) - 1",
                            "BinOp"
                        ],
                        [
                            "coords_world_s[[2, 1, 0]].T.view([1] + dim_s + [3])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_322": {
                "variable": {
                    "value": "tsdf_vol_bilin",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_349": {
                "*size": {
                    "value": "(len(xyz), 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_367": {
                "data": {
                    "value": "[0, max_depth, max_depth, max_depth, max_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_53": {
                "variable": {
                    "value": "data[tsdf_list_full][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "data": {
                    "value": "data['tsdf_list_full'][0].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_208": {},
            "tensor_264": {
                "data": {
                    "value": "((bnds[0, 1] + bnds[0, 0]) / 2, (bnds[1, 1] + bnds[1, 0]) / 2, -0.2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_269": {
                "data": {
                    "value": "self.voxel_dim[:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_52": {
                "obj": {
                    "value": "data['tsdf_list_full'][i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_210": {},
            "ones_like_283": {
                "input": {
                    "value": "world[:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "data": {
                    "value": "self.voxel_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_361": {
                "data": {
                    "value": "[0, 0, 0, im_w, im_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_364": {
                "data": {
                    "value": "[0, 0, im_h, 0, im_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_209": {},
            "Tensor_313": {}
        }
    },
    "demo.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ARKitDataset(cfg.TEST.PATH, 'test', transforms, cfg.TEST.N_VIEWS, len(cfg.MODEL.THRESHOLDS) - 1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.TEST.N_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_52": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NeuralRecon(cfg).cuda().eval()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=[0])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_59": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "loadckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.LOGDIR, saved_models[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_reserved_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "Adam_158": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.TRAIN.WD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_75": {
                "seed": {
                    "value": "cfg.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "cfg.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "TrainImgLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MVSDataset(cfg.TRAIN.PATH, 'train', transforms, cfg.TRAIN.N_VIEWS, len(cfg.MODEL.THRESHOLDS) - 1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_dataset, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.TRAIN.N_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "TestImgLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MVSDataset(cfg.TEST.PATH, 'test', transforms, cfg.TEST.N_VIEWS, len(cfg.MODEL.THRESHOLDS) - 1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(test_dataset, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.TEST.N_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_140": {
                "variable": {
                    "value": "TrainImgLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MVSDataset(cfg.TRAIN.PATH, 'train', transforms, cfg.TRAIN.N_VIEWS, len(cfg.MODEL.THRESHOLDS) - 1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.TRAIN.N_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "TestImgLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MVSDataset(cfg.TEST.PATH, 'test', transforms, cfg.TEST.N_VIEWS, len(cfg.MODEL.THRESHOLDS) - 1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.TEST.N_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_149": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NeuralRecon(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[cfg.LOCAL_RANK], output_device=cfg.LOCAL_RANK, broadcast_buffers=False, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=[0])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[cfg.LOCAL_RANK]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "cfg.LOCAL_RANK",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_156": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NeuralRecon(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[cfg.LOCAL_RANK], output_device=cfg.LOCAL_RANK, broadcast_buffers=False, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=[0])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultiStepLR_192": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=cfg.TRAIN.LR, betas=(0.9, 0.999), weight_decay=cfg.TRAIN.WD)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(epoch_idx) for epoch_idx in cfg.TRAIN.LREPOCHS.split(':')[0].split(',')]",
                            "ListComp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / float(cfg.TRAIN.LREPOCHS.split(':')[1])",
                            "BinOp"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "start_epoch - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_device_67": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__284": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_173": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "loadckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.LOGDIR, saved_models[-1])",
                            "Call"
                        ],
                        [
                            "os.path.join(cfg.LOGDIR, ckpt)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'cuda:%d' % 0: 'cuda:%d' % cfg.LOCAL_RANK}",
                            "Dict"
                        ],
                        [
                            "{'cuda:%d' % 0: 'cuda:%d' % cfg.LOCAL_RANK}",
                            "Dict"
                        ]
                    ]
                }
            },
            "load_182": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.LOADCKPT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'cuda:%d' % 0: 'cuda:%d' % cfg.LOCAL_RANK}",
                            "Dict"
                        ],
                        [
                            "{'cuda:%d' % 0: 'cuda:%d' % cfg.LOCAL_RANK}",
                            "Dict"
                        ]
                    ]
                }
            },
            "save_218": {
                "obj": {
                    "value": "{'epoch': epoch_idx, 'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/model_{:0>6}.ckpt'.format(cfg.LOGDIR, epoch_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_238": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "loadckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.LOGDIR, saved_models[-1])",
                            "Call"
                        ],
                        [
                            "os.path.join(cfg.LOGDIR, ckpt)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/backbone.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MNASNet.layers._modules['0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.out1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "depths[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "depths[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.inner1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "depths[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "final_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depths[4]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.inner2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "depths[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "final_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depths[4]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.out2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depths[4]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depths[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.out3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "final_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depths[4]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "depths[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_69": {
                "input": {
                    "value": "intra_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2",
                            "Name"
                        ],
                        [
                            "F.interpolate(intra_feat, scale_factor=2, mode='nearest') + self.inner1(conv1)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(intra_feat, scale_factor=2, mode='nearest') + self.inner2(conv0)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_73": {
                "input": {
                    "value": "intra_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2",
                            "Name"
                        ],
                        [
                            "F.interpolate(intra_feat, scale_factor=2, mode='nearest') + self.inner1(conv1)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(intra_feat, scale_factor=2, mode='nearest') + self.inner2(conv0)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/gru_fusion.py": {
        "torch": {
            "cat_135": {
                "variable": {
                    "value": "self.global_volume[scale].F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.global_volume[scale].F[valid == False], value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "self.global_volume[scale].C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.global_volume[scale].C[valid == False], coords]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.fusion_nets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "tsdf_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[global_tsdf_target[valid_target], tsdf_target.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "self.target_tsdf_volume[scale].F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.target_tsdf_volume[scale].F[valid_target == False], target_volume[target_volume.abs() < 1].unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "self.target_tsdf_volume[scale].C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.target_tsdf_volume[scale].C[valid_target == False], target_coords]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "nonzero_241": {
                "variable": {
                    "value": "batch_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords[:, 0] == i",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_241": {
                "variable": {
                    "value": "batch_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_99": {
                "variable": {
                    "value": "updated_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(global_volume.abs() < 1).any(-1) | (current_volume.abs() < 1).any(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_101": {
                "variable": {
                    "value": "updated_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(global_volume != 0).any(-1) | (current_volume != 0).any(-1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_251": {
                "variable": {
                    "value": "coords_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['occ_list'][self.cfg.N_LAYER - scale - 1][i]",
                            "Subscript"
                        ],
                        [
                            "tsdf_target.abs() < 1",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_279": {
                "variable": {
                    "value": "r_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(r_coords, torch.ones_like(r_coords[:1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "r_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_coords, torch.zeros(1, r_coords.shape[-1]).to(r_coords.device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "updated_coords_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones_like(updated_coords[:, :1]) * i, updated_coords * interval]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "updated_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones_like(updated_coords[:, :1]) * i, updated_coords * interval]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "updated_coords_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[updated_coords_all, updated_coords]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "values_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[values_all, values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "[global_coords_target[valid_target], coords_target_global]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "nonzero_146": {
                "input": {
                    "value": "target_volume.abs() < 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_171": {
                "input": {
                    "value": "fuse_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_volume[scale].C",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_172": {
                "input": {
                    "value": "fuse_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_volume[scale].C",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "tsdf_target_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tsdf_target_all, tsdf_target]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "occ_target_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[occ_target_all, occ_target]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_279": {
                "input": {
                    "value": "r_coords[:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_281": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "r_coords.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_293": {
                "input": {
                    "value": "updated_coords[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_299": {
                "input": {
                    "value": "updated_coords[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spnn.Conv3d(inc, outc, kernel_size=ks, dilation=dilation, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spnn.Conv3d(inc, outc, kernel_size=ks, stride=stride, transposed=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spnn.Conv3d(inc, outc, kernel_size=ks, dilation=dilation, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spnn.Conv3d(kwargs['in_channels'], cs[0], kernel_size=3, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.stage1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConvolutionBlock(cs[0], cs[0], ks=2, stride=2, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.stage2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConvolutionBlock(cs[1], cs[1], ks=2, stride=2, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BasicDeconvolutionBlock(cs[2], cs[3], ks=2, stride=2), nn.Sequential(ResidualBlock(cs[3] + cs[1], cs[3], ks=3, stride=1, dilation=1), ResidualBlock(cs[3], cs[3], ks=3, stride=1, dilation=1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_113": {
                "variable": {
                    "value": "self.up2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BasicDeconvolutionBlock(cs[3], cs[4], ks=2, stride=2), nn.Sequential(ResidualBlock(cs[4] + cs[0], cs[4], ks=3, stride=1, dilation=1), ResidualBlock(cs[4], cs[4], ks=3, stride=1, dilation=1))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self.point_transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Linear(cs[0], cs[2]), nn.BatchNorm1d(cs[2]), nn.ReLU(True)), nn.Sequential(nn.Linear(cs[2], cs[4]), nn.BatchNorm1d(cs[4]), nn.ReLU(True))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.point_transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(inc, outc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_214": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convz(hx).F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_215": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convr(hx).F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "x.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r * h.F, x.F]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_217": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convq(x).F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_138": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "spnn.Conv3d(inc, outc, kernel_size=1, dilation=1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "in_features": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "outc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_212": {
                "tensors": {
                    "value": "[h.F, x.F]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "*args": {
                    "value": "ResidualBlock(cs[3] + cs[1], cs[3], ks=3, stride=1, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "*args": {
                    "value": "ResidualBlock(cs[4] + cs[0], cs[4], ks=3, stride=1, dilation=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "*args": {
                    "value": "nn.Linear(cs[0], cs[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "*args": {
                    "value": "nn.Linear(cs[2], cs[4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "cs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cs[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_125": {
                "num_features": {
                    "value": "cs[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "in_features": {
                    "value": "cs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cs[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_130": {
                "num_features": {
                    "value": "cs[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/neucon_network.py": {
        "torch": {
            "ModuleList_33": {
                "variable": {
                    "value": "self.sp_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_35": {
                "variable": {
                    "value": "self.tsdf_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.occ_preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_248": {
                "variable": {
                    "value": "occ_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.occ_preds[i](feat)",
                            "Call"
                        ],
                        [
                            "occ.view(-1)",
                            "Call"
                        ],
                        [
                            "occ[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "occ_target.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "w_for_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(n_all - n_p).float() / n_p",
                            "BinOp"
                        ],
                        [
                            "w_for_1 * pos_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_253": {
                "variable": {
                    "value": "tsdf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(tsdf - tsdf_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_127": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat[scale] for feat in features]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "pre_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pre_feat, pre_tsdf, pre_occ]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "up_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "up_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_coords.unsqueeze(1).repeat(1, num, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "up_coords.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(up_coords, dim=1).permute(1, 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_121": {
                "variable": {
                    "value": "up_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[volume, up_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_145": {
                "variable": {
                    "value": "batch_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up_coords[:, 0] == b",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_145": {
                "variable": {
                    "value": "batch_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "coords_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coords_batch, torch.ones_like(coords_batch[:, :1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_191": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occupancy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "occ.squeeze(1) > self.cfg.THRESHOLDS[i]",
                            "Compare"
                        ]
                    ]
                }
            },
            "nonzero_196": {
                "variable": {
                    "value": "batch_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_coords[:, 0] == b",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_196": {
                "variable": {
                    "value": "batch_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_253": {
                "input": {
                    "value": "tsdf - tsdf_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_163": {
                "variable": {
                    "value": "grid_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "[torch.ones(1, coords.shape[-1]).to(coords.device) * b, coords]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_148": {
                "input": {
                    "value": "coords_batch[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_120": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "coords.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/neuralrecon.py": {
        "torch": {
            "Tensor_20": {
                "variable": {
                    "value": "self.pixel_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_21": {
                "variable": {
                    "value": "self.pixel_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unbind_74": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs['imgs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ops/back_project.py": {
        "torch": {
            "zeros_25": {
                "variable": {
                    "value": "feature_volume_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "coords.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "c + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "coords.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_29": {
                "variable": {
                    "value": "batch_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords[:, 0] == batch",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_29": {
                "variable": {
                    "value": "batch_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "rs_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rs_grid, torch.ones([n_views, 1, nV]).cuda()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_49": {
                "variable": {
                    "value": "im_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[2 * im_x / (w - 1) - 1, 2 * im_y / (h - 1) - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_55": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats[:, batch]",
                            "Subscript"
                        ],
                        [
                            "feats_batch.view(n_views, c, h, w)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "im_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([2 * im_x / (w - 1) - 1, 2 * im_y / (h - 1) - 1], dim=-1)",
                            "Call"
                        ],
                        [
                            "im_grid.view(n_views, 1, -1, 2)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, im_z_norm]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_78": {
                "input": {
                    "value": "im_z[im_z > 0] - im_z_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_41": {
                "*size": {
                    "value": "[n_views, 1, nV]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ops/comm.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ops/generate_grids.py": {
        "torch": {
            "stack_8": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid(grid_range[0], grid_range[1], grid_range[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_7": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "n_vox[axis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "interval",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_8": {
                "*tensors": {
                    "value": "grid_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indexing": {
                    "value": "grid_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ops/torchsparse_utils.py": {
        "torch": {
            "cat_16": {
                "variable": {
                    "value": "new_float_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z.C[:, :3] * init_res / after_res, z.C[:, -1].view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_20": {
                "variable": {
                    "value": "sparse_hash",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_hash",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sphash(torch.floor(new_float_coord).int())",
                            "Call"
                        ],
                        [
                            "F.sphash(torch.cat([torch.floor(z.C[:, :3] / x.s[0]).int() * x.s[0], z.C[:, -1].int().view(-1, 1)], 1))",
                            "Call"
                        ],
                        [
                            "F.sphash(x.C.to(z.F.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "round_26": {
                "variable": {
                    "value": "inserted_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inserted_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.spvoxelize(torch.floor(new_float_coord), idx_query, counts)",
                            "Call"
                        ],
                        [
                            "torch.round(inserted_coords).int()",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_19": {
                "input": {
                    "value": "new_float_coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([z.C[:, :3] * init_res / after_res, z.C[:, -1].view(-1, 1)], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_24": {
                "input": {
                    "value": "new_float_coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([z.C[:, :3] * init_res / after_res, z.C[:, -1].view(-1, 1)], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_45": {
                "tensors": {
                    "value": "[torch.floor(z.C[:, :3] / x.s[0]).int() * x.s[0], z.C[:, -1].int().view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "[torch.floor(z.C[:, :3] / x.s[0]).int() * x.s[0], z.C[:, -1].int().view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_46": {
                "input": {
                    "value": "z.C[:, :3] / x.s[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_75": {
                "input": {
                    "value": "z.C[:, :3] / x.s[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tools/evaluation.py": {
        "torch": {
            "DataLoader_113": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ScanNetDataset(n_imgs, scene, args.data_path, args.max_depth)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.loader_num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/simple_loader.py": {
        "torch": {}
    },
    "tools/tsdf_fusion/fusion.py": {
        "torch": {
            "inverse_451": {
                "variable": {
                    "value": "world2cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cam_pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cam_pose.float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_452": {
                "variable": {
                    "value": "cam_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "world2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(cam_pose)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "world_c.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_452": {
                "variable": {
                    "value": "cam_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_458": {
                "variable": {
                    "value": "pix_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cam_c[:, 0] * fx / cam_c[:, 2] + cx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_459": {
                "variable": {
                    "value": "pix_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cam_c[:, 1] * fy / cam_c[:, 2] + cy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_470": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_diff / sdf_trunc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_501": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "prod_512": {
                "variable": {
                    "value": "self._num_voxels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._vol_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_515": {
                "variable": {
                    "value": "(xv, yv, zv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(0, self._vol_dim[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(0, self._vol_dim[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_520": {
                "variable": {
                    "value": "self._vox_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xv.flatten(), yv.flatten(), zv.flatten()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_524": {
                "variable": {
                    "value": "self._world_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._world_c, torch.ones(len(self._world_c), 1, device=self.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_533": {
                "variable": {
                    "value": "self._tsdf_vol",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self._vol_dim",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_534": {
                "variable": {
                    "value": "self._weight_vol",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self._vol_dim",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_535": {
                "variable": {
                    "value": "self._color_vol",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self._vol_dim",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "arange_516": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self._vol_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_517": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self._vol_dim[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_518": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self._vol_dim[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_525": {
                "*size": {
                    "value": "len(self._world_c)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/tsdf_fusion/generate_gt.py": {
        "torch": {}
    },
    "utils.py": {
        "torch": {
            "arange_144": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_145": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_146": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "nz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_147": {
                "variable": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(nx, dtype=torch.long, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(ny, dtype=torch.long, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_152": {
                "variable": {
                    "value": "sgn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tsdf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_153": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(tsdf) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_159": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[dim[0], dim[1], dim[2], dim[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float(default_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "locs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_165": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[dim[0], dim[1], dim[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float(default_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "full_172": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[dim[0], dim[1], dim[2], c]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float(default_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img[:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_133": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_148": {
                "tensors": {
                    "value": "(x.flatten(), y.flatten(), z.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_153": {
                "input": {
                    "value": "tsdf",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}