{
    "tf_tools/bigbigan2biggan.py": {
        "tensorflow": {
            "repeat_44": {
                "variable": {
                    "value": "bigbiGAN_linear",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bigbiGAN_linear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bigbigan.variable_map['GenEncWrapper/Generator/linear/w']",
                            "Subscript"
                        ],
                        [
                            "tf.repeat(bigbiGAN_linear, 1000, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_46": {
                "variable": {
                    "value": "bigbiGAN_linear_ema",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bigbiGAN_linear_ema",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bigbigan.variable_map['GenEncWrapper/Generator/linear/w/ema_0.9999']",
                            "Subscript"
                        ],
                        [
                            "tf.repeat(bigbiGAN_linear_ema, 1000, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tf_tools/tf_to_torch.py": {
        "tensorflow": {
            "global_variables_32": {
                "variable": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_148": {
                "variable": {
                    "value": "self.state_dict[name_pth + .num_batches_tracked]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_weights[os.path.join(name_tf + 'bn', 'accumulation_counter:0')][()]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "variable": {
                    "value": "self.state_dict[name_pth + .bn.num_batches_tracked]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tf_weights[os.path.join(cr_bn_name, 'accumulation_counter:0')][()]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_188": {
                "ndarray": {
                    "value": "self.tf_weights[name][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "new_dict[item]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hub_dict[torch_to_proxy_names[item]][:, -128:], hub_dict[torch_to_proxy_names[item]][:, :dimz_dict[resolution]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "BigGAN/gan_load.py": {
        "torch": {
            "zeros_14": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_44": {
                "f": {
                    "value": "weights_root",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_root",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_44": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "BigGAN/model/BigGAN.py": {
        "torch": {
            "ModuleList_170": {
                "modules": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blocklist",
                            "variable"
                        ],
                        [
                            "blocklist",
                            "variable"
                        ]
                    ]
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "layers.bn(self.arch['out_channels'][-1], cross_replica=self.cross_replica, mybn=self.mybn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_349": {
                "modules": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": [
                        [
                            "blocklist",
                            "variable"
                        ],
                        [
                            "blocklist",
                            "variable"
                        ]
                    ]
                }
            },
            "sum_400": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.activation(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_196": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.B1, self.B2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_229": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zs[0]",
                            "Subscript"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_chunk_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_252": {
                "input": {
                    "value": "self.output_layer(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_288": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_368": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.B1, self.B2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_404": {
                "input": {
                    "value": "self.embed(y) * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_418": {
                "mode": {
                    "value": "train_G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_231": {
                "tensors": {
                    "value": "[y, item]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_441": {
                "tensors": {
                    "value": "[G_z, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_442": {
                "tensors": {
                    "value": "[gy, dy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_446": {
                "tensor": {
                    "value": "D_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D(D_input, D_class)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[G_z.shape[0], x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AvgPool2d_342": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "BigGAN/model/layers.py": {
        "torch": {
            "rsqrt_173": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_193": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "float_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_195": {
                "variable": {
                    "value": "m2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "float_x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_156": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.phi(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_157": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.g(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_163": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(theta.transpose(1, 2), phi)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "group_norm_267": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "num_groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(int(x.shape[1]) // ch, 1)",
                            "Call"
                        ],
                        [
                            "int(norm_style.split('_')[-1])",
                            "Call"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_14": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys",
                            "variable"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u in enumerate(u_)",
                            "Call"
                        ],
                        [
                            "torch.matmul(v, W.t())",
                            "Call"
                        ],
                        [
                            "F.normalize(gram_schmidt(u, us), eps=eps)",
                            "Call"
                        ],
                        [
                            "u",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_33": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gram_schmidt(v, vs)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(u, W)",
                            "Call"
                        ],
                        [
                            "F.normalize(gram_schmidt(v, vs), eps=eps)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_39": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gram_schmidt(u, us)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_108": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_119": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_135": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_446": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_45": {
                "input": {
                    "value": "torch.matmul(torch.matmul(v, W.t()), u.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "bmm_163": {
                "input": {
                    "value": "theta.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(self.phi(x), [2, 2])",
                            "Call"
                        ],
                        [
                            "phi.view(-1, self.ch // 8, x.shape[2] * x.shape[3] // 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_165": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(self.g(x), [2, 2])",
                            "Call"
                        ],
                        [
                            "g.view(-1, self.ch // 2, x.shape[2] * x.shape[3] // 4)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "beta.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "*size": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_220": {
                "*size": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_221": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_norm_313": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.stored_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.stored_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_336": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_337": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_norm_362": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.stored_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.stored_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.gain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(u, W)",
                            "Call"
                        ],
                        [
                            "F.normalize(gram_schmidt(v, vs), eps=eps)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_69": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_70": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "instance_norm_316": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - proj(x, y)",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.stored_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.stored_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_input_stats": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_353": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_354": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_299": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_300": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "BigGAN/model/sync_batchnorm/batchnorm.py": {
        "torch": {
            "batch_norm_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), input.size(1), -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_158": {
                "input": {
                    "value": "bias_var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "BigGAN/model/sync_batchnorm/batchnorm_reimpl.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_33": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_34": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_36": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "BigGAN/model/sync_batchnorm/replicate.py": {
        "torch": {}
    },
    "BigGAN/model/sync_batchnorm/unittest.py": {
        "torch": {
            "allclose_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "UNet/unet_model.py": {
        "torch": {}
    },
    "UNet/unet_parts.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.double_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.maxpool_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "diffY",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[x2.size()[2] - x1.size()[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "diffX",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[x2.size()[3] - x1.size()[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_60": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, [diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2])",
                            "Call"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_48": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_50": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_32": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data.py": {
        "torch": {}
    },
    "directions_scoring.py": {
        "torch": {
            "Adam_54": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "best_of_transformator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.005",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_12": {
                "variable": {
                    "value": "self.transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[transform_factory() for _ in range(n_transforms)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_20": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.clamp(t(x), -1.0, 1.0) for t in self.transforms]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_22": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs - target.unsqueeze(0).repeat(self.n_transforms, 1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmin_23": {
                "variable": {
                    "value": "best_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(xs - target.unsqueeze(0).repeat(self.n_transforms, 1, 1), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_16": {
                "n": {
                    "value": "t.weight.data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_20": {
                "input": {
                    "value": "t(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_25": {
                "start": {
                    "value": "xs.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "xs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_61": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "len(zs)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gan_mask_gen.py": {
        "torch": {
            "stack_29": {
                "tensors": {
                    "value": "[b > torch.mean(b) for b in b_shifted]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "histc_37": {
                "variable": {
                    "value": "stats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shifted_images",
                            "variable"
                        ]
                    ]
                },
                "bins": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_38": {
                "variable": {
                    "value": "stats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stats.view(1, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.ones([1, 1, r], device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "r // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "good_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.z_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(z_noise, device='cpu')",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_68": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "len(self.zs)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_38": {
                "*size": {
                    "value": "[1, 1, r]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shifted_images.device",
                            "Attribute"
                        ],
                        [
                            "devices",
                            "variable"
                        ]
                    ]
                }
            },
            "tensor_61": {
                "data": {
                    "value": "z_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "all_113": {
                "input": {
                    "value": "~mask",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "all_123": {
                "input": {
                    "value": "~mask",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_161": {
                "tensors": {
                    "value": "[img, img_batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_162": {
                "tensors": {
                    "value": "[ref, ref_batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_29": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_like_71": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.zs[indices].to(self.z_noise.device)",
                            "Call"
                        ],
                        [
                            "z + self.z_noise * torch.randn_like(z)",
                            "BinOp"
                        ],
                        [
                            "self.make_noise(batch_size)",
                            "Call"
                        ],
                        [
                            "self.make_noise(self.p.batch_size)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "metrics.py": {
        "torch": {
            "sum_9": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask1 * (mask1 == mask2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[-1, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_9": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_10": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask1 + mask2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[-1, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_10": {
                "variable": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_21": {
                "variable": {
                    "value": "true_positive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_gt * (mask_gt == mask)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[-1, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_21": {
                "variable": {
                    "value": "true_positive",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_22": {
                "variable": {
                    "value": "mask_area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.to(torch.bool)",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "resize(mask, img.shape[-2:])",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "[-1, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_23": {
                "variable": {
                    "value": "mask_gt_area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_gt.to(torch.bool)",
                            "Call"
                        ],
                        [
                            "mask_gt",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "[-1, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_16": {
                "input": {
                    "value": "(mask1 == mask2).to(torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "recalls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "recalls",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "postprocessing.py": {
        "torch": {
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[-1].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "(1.0 - torch.softmax(mask, dim=1))[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.model(img)",
                            "Call"
                        ],
                        [
                            "resize(mask, img_shape)",
                            "Call"
                        ],
                        [
                            "self.apply(img, mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_46": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[-1].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "(1.0 - torch.softmax(mask, dim=1))[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.model(img)",
                            "Call"
                        ],
                        [
                            "resize(mask, img_shape)",
                            "Call"
                        ],
                        [
                            "self.apply(img, mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tf_tools/proxy_biggan.py": {
        "torch": {
            "Parameter_65": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "w_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_91": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_96": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_110": {
                "variable": {
                    "value": "attn_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pool(self.g(x)).view(m_batchsize, -1, N // 4)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_212": {
                "variable": {
                    "value": "self.GBlock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GBlock(16 * chn, 16 * chn, n_class=n_class, z_dim=z_dim), GBlock(16 * chn, 8 * chn, n_class=n_class, z_dim=z_dim), GBlock(8 * chn, 4 * chn, n_class=n_class, z_dim=z_dim), GBlock(4 * chn, 2 * chn, n_class=n_class, z_dim=z_dim), GBlock(2 * chn, 1 * chn, n_class=n_class, z_dim=z_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_223": {
                "variable": {
                    "value": "self.ScaledCrossReplicaBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "chunk_227": {
                "variable": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.num_split",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_239": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_248": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_257": {
                "variable": {
                    "value": "self.GBlock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GBlock(16 * chn, 16 * chn, n_class=n_class), GBlock(16 * chn, 8 * chn, n_class=n_class), GBlock(8 * chn, 8 * chn, n_class=n_class), GBlock(8 * chn, 4 * chn, n_class=n_class), GBlock(4 * chn, 2 * chn, n_class=n_class), GBlock(2 * chn, 1 * chn, n_class=n_class)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_269": {
                "variable": {
                    "value": "self.ScaledCrossReplicaBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "chunk_273": {
                "variable": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.num_split",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_285": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_305": {
                "variable": {
                    "value": "self.GBlock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GBlock(16 * chn, 16 * chn, n_class=n_class, z_dim=z_dim), GBlock(16 * chn, 8 * chn, n_class=n_class, z_dim=z_dim), GBlock(8 * chn, 8 * chn, n_class=n_class, z_dim=z_dim), GBlock(8 * chn, 4 * chn, n_class=n_class, z_dim=z_dim), GBlock(4 * chn, 2 * chn, n_class=n_class, z_dim=z_dim), GBlock(2 * chn, 1 * chn, n_class=n_class, z_dim=z_dim), GBlock(1 * chn, 1 * chn, n_class=n_class, z_dim=z_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_318": {
                "variable": {
                    "value": "self.ScaledCrossReplicaBN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "chunk_322": {
                "variable": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.num_split",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_334": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_350": {
                "variable": {
                    "value": "self.pre_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SpectralNorm(nn.Conv2d(3, 1 * chn, 3, padding=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_358": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(1 * chn, 1 * chn, downsample=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_372": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "16 * chn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_381": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_175": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_183": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[code, class_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_241": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_281": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[code, class_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_287": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_330": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[code, class_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_336": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "in_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_108": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta(x)",
                            "Call"
                        ],
                        [
                            "theta.view(m_batchsize, -1, N)",
                            "Call"
                        ],
                        [
                            "theta.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x)",
                            "Call"
                        ],
                        [
                            "self.pool(phi)",
                            "Call"
                        ],
                        [
                            "phi.view(m_batchsize, -1, N // 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "in_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True if bn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True if bn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_188": {
                "variable": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "F.interpolate(skip, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(skip)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(skip, 2)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_191": {
                "variable": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "F.interpolate(skip, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(skip)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(skip, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 4 * 16 * chn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "in_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_255": {
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 4 * 16 * chn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "in_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_301": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 4 * 16 * chn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_319": {
                "in_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_354": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_356": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_370": {
                "in_features": {
                    "value": "16 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_379": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "input": {
                    "value": "_w.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self.module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "l2normalize(torch.matmul(_w, v))",
                            "Call"
                        ],
                        [
                            "Parameter(w.data.new(height).normal_(0, 1), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_45": {
                "input": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.view(height, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self.module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "l2normalize(torch.matmul(_w.t(), u))",
                            "Call"
                        ],
                        [
                            "Parameter(w.data.new(height).normal_(0, 1), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_351": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_353": {
                "in_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_segmentation.py": {
        "torch": {
            "load_104": {
                "variable": {
                    "value": "bg_direction",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.bg_direction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_150": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params.rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_151": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=params.rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "params.steps_per_rate_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "params.rate_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_153": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_244": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'checkpoint.pth')",
                            "Call"
                        ],
                        [
                            "checkpoint",
                            "Method Argument"
                        ],
                        [
                            "checkpoint",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_264": {
                "variable": {
                    "value": "segmentation_dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "SegmentationDataset(images_dir, masks_dir, size=size, crop=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_84": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_85": {
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(zs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(out_dir, 'segmentation.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_240": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.state_dict(), 'opt': opt.state_dict(), 'scheduler': scheduler.state_dict(), 'step': step}",
                            "Dict"
                        ],
                        [
                            "torch.load(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'checkpoint.pth')",
                            "Call"
                        ],
                        [
                            "checkpoint",
                            "Method Argument"
                        ],
                        [
                            "checkpoint",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "current_device_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "randn_27": {
                "*size": {
                    "value": "[batch] + dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "ndarray": {
                    "value": "truncnorm.rvs(-truncation, truncation, size=size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "visualization.py": {
        "torch": {
            "clamp_15": {
                "input": {
                    "value": "overlay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (1 + imgs_grid.clone().cpu())",
                            "BinOp"
                        ],
                        [
                            "overlay - 0.5 * masks_grid.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "overlayed(img, mask, int(i > 0), nrow)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_8": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_27": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}