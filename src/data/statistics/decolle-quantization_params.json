{
    "decolle/base_model.py": {
        "torch": {
            "Sigmoid_22": {
                "variable": {
                    "value": "sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(output_features, input_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_135": {
                "variable": {
                    "value": "self.weight_fa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(output_features, input_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_142": {
                "variable": {
                    "value": "self.weight_fa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(output_features, input_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.85",
                            "Method Argument"
                        ],
                        [
                            "0.85",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_170": {
                "variable": {
                    "value": "self.tau_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / (1 - self.alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_171": {
                "variable": {
                    "value": "self.tau_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / (1 - self.beta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_454": {
                "variable": {
                    "value": "tau_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "im_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_477": {
                "variable": {
                    "value": "self.tau_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / (1 - self.alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_478": {
                "variable": {
                    "value": "self.tau_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / (1 - self.beta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_489": {
                "variable": {
                    "value": "self.LIF_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_490": {
                "variable": {
                    "value": "self.readout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(output_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_565": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_573": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_604": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_264": {
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(Sin_t.shape)",
                            "Call"
                        ],
                        [
                            "list(Sin_t.shape)",
                            "Call"
                        ],
                        [
                            "list(Sin_t.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_265": {
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(Sin_t.shape)",
                            "Call"
                        ],
                        [
                            "list(Sin_t.shape)",
                            "Call"
                        ],
                        [
                            "list(Sin_t.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_266": {
                "*size": {
                    "value": "[input_shape[0], out_ch] + out_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_267": {
                "*size": {
                    "value": "[input_shape[0], out_ch] + out_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_361": {
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(Sin_t.shape)",
                            "Call"
                        ],
                        [
                            "list(Sin_t.shape)",
                            "Call"
                        ],
                        [
                            "list(Sin_t.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_362": {
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(Sin_t.shape)",
                            "Call"
                        ],
                        [
                            "list(Sin_t.shape)",
                            "Call"
                        ],
                        [
                            "list(Sin_t.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_363": {
                "*size": {
                    "value": "[input_shape[0], out_ch] + out_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_364": {
                "*size": {
                    "value": "[input_shape[0], out_ch] + out_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_365": {
                "*size": {
                    "value": "[input_shape[0], out_ch] + out_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_366": {
                "*size": {
                    "value": "[input_shape[0], out_ch] + out_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_473": {
                "*size": {
                    "value": "input_shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_474": {
                "*size": {
                    "value": "input_shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_39": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "decolle/hessian.py": {
        "torch": {
            "zeros_55": {
                "*size": {
                    "value": "p.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_73": {
                "variable": {
                    "value": "Hv",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "gradsH",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.randint_like(p, high=2, device=device) for p in self.params]",
                            "ListComp"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randint_like_100": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_111": {
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "decolle/init_functions.py": {
        "torch": {
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "decolle/snn_utils.py": {
        "torch": {
            "zeros_117": {
                "variable": {
                    "value": "t_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*t.shape + (width,)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "data": {
                    "value": "tensor.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.dtype",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "decolle/utils.py": {
        "torch": {
            "tensor_228": {
                "variable": {
                    "value": "loss_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_293": {
                "variable": {
                    "value": "loss_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_203": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_dir, last_checkpoint)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.get_input_layer_device()",
                            "Call"
                        ],
                        [
                            "net.get_input_layer_device()",
                            "Call"
                        ],
                        [
                            "net.get_input_layer_device()",
                            "Call"
                        ],
                        [
                            "net.get_input_layer_device()",
                            "Call"
                        ],
                        [
                            "net.get_input_layer_device()",
                            "Call"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_234": {
                "variable": {
                    "value": "target_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_302": {
                "variable": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_303": {
                "variable": {
                    "value": "target_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_413": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': net.state_dict(), 'optimizer_state_dict': opt.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_dir, 'epoch{:05}.tar'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_185": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_266": {
                "variable": {
                    "value": "loss_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_333": {
                "variable": {
                    "value": "loss_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_357": {
                "variable": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_358": {
                "variable": {
                    "value": "target_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_588": {
                "variable": {
                    "value": "clean_states[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "internal_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "variable": {
                    "value": "loss_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_326": {
                "variable": {
                    "value": "loss_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tensor_318": {},
            "argmax_543": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(data_batch)",
                            "Call"
                        ],
                        [
                            "net.forward(data_batch)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_574": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(data_batch)",
                            "Call"
                        ],
                        [
                            "net.forward(data_batch)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/export_lenet_onnx.py": {
        "torch": {
            "Tensor_78": {
                "variable": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_29": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adamax_68": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.get_trainable_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "params['betas']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train_lenet_decolle.py": {
        "torch": {
            "Tensor_44": {
                "variable": {
                    "value": "data_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_45": {
                "variable": {
                    "value": "target_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.get_trainable_parameters(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.param_groups[-1]['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "params['betas']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adamax_93": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.get_trainable_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "params['betas']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adamax_90": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.get_trainable_parameters(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['learning_rate'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "params['betas']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}