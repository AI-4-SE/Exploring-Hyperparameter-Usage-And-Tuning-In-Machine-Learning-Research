{
    "acl.py": {
        "tensorflow": {
            "ConfigProto_384": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "kb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.x_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.im_height, self.im_width, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.x_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.symb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.x_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.symb_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_real",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "self.x_bool_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "variable": {
                    "value": "self.g_loss_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_mean(tf.abs(y_ - x_real), axis=1) * x_bool_label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_101": {
                "variable": {
                    "value": "ddy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(ddy), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "variable": {
                    "value": "ddy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(ddy - 1.0) * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_106": {
                "variable": {
                    "value": "self.opt_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_107": {
                "variable": {
                    "value": "self.opt_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_115": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "set_random_seed_60": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ip",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(256, self.symb_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.symb_dim, self.h_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.h_dim, self.h_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "w3",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.h_dim, self.lstm_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ip",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.lstm_dim, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "a": {
                    "value": "disc_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w1', shape=(self.symb_dim, self.h_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.nn.relu(tf.matmul(tf.nn.relu(tf.matmul(disc_input, w1)), w2)), w3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, self.group_size, self.lstm_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_386": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "G",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-0.1, 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_67": {
                "a": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_feat(x, self.im_height, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('ip', shape=(256, self.symb_dim))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('ip', shape=(self.lstm_dim, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'D'",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-0.1, 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_79": {
                "a": {
                    "value": "lstm_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_lstm_inner(lstm_input, self.batch_size, self.lstm_dim, self.group_size)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "ip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('ip', shape=(256, self.symb_dim))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('ip', shape=(self.lstm_dim, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_95": {
                "input_tensor": {
                    "value": "pred_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_96": {
                "input_tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_100": {
                "ys": {
                    "value": "d_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(y_hat, reuse=True, scope='D2')",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eps * self.y + (1 - eps) * self.y_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_101": {
                "input_tensor": {
                    "value": "tf.square(ddy)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "group_387": {
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_76": {
                "features": {
                    "value": "tf.matmul(disc_input, w1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_94": {
                "input_tensor": {
                    "value": "tf.abs(y_ - x_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_101": {
                "x": {
                    "value": "ddy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(d_hat, y_hat)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(ddy), axis=1))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.square(ddy - 1.0) * scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_102": {
                "x": {
                    "value": "ddy - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_64": {
                "minval": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_70": {
                "minval": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_88": {
                "input": {
                    "value": "x_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_94": {
                "x": {
                    "value": "y_ - x_real",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "generate_gif.py": {
        "tensorflow": {}
    },
    "ops.py": {
        "tensorflow": {
            "truncated_normal_initializer_17": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.03",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_21": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_106": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x_image, W_conv1) + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_pool1, W_conv2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "h_pool_final_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_pool3",
                            "variable"
                        ],
                        [
                            "h_pool2",
                            "variable"
                        ],
                        [
                            "h_pool2",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 8 * 8 * 64 * scale ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_137": {
                "variable": {
                    "value": "h_pool_final_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_pool_final_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool_final, [-1, 8 * 8 * 64 * scale ** 2])",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_138": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_pool_final_drop, W_fc1) + b_fc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_147": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "state_size",
                    "type": "variable",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, lstm.state_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d_new'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_22": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d_new'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_51": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_52": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input_.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_67": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_shape[-1], input_.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_90": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_99": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_119": {
                "variable": {
                    "value": "h_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_pool2, W_conv3) + b_conv3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d_new'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d_new'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_82": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "RNN",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-0.1, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d_new'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'batch_norm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_53": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.03",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_70": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, d_h, d_w, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_91": {
                "value": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.deconv2d(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), deconv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_138": {
                "a": {
                    "value": "h_pool_final_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_pool_final_flat, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable('W_fc1', [8 * 8 * 64 * scale ** 2, 256])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_55": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_59": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_66": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.03",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_69": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_79": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.03",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_90": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_152": {
                "minval": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_scope_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_57": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {}
    }
}