{
    "Geometric/G_layers.py": {
        "tensorflow": {
            "MaxNorm_43": {
                "variable": {
                    "value": "k_const",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_value": {
                    "value": "k_const",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MaxNorm_60": {
                "variable": {
                    "value": "k_const",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_value": {
                    "value": "k_const",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_79": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_82": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_85": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "identity_88": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MaxNorm_184": {
                "variable": {
                    "value": "k_const",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_value": {
                    "value": "k_const",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Geometric/G_losses.py": {
        "tensorflow": {
            "reduce_mean_19": {
                "input_tensor": {
                    "value": "tf.abs(effect_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_22": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(effect_map))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "input_tensor": {
                    "value": "tf.abs(like_input - input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_crossentropy_7": {
                "y_true": {
                    "value": "lbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_19": {
                "x": {
                    "value": "effect_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_22": {
                "input_tensor": {
                    "value": "tf.square(effect_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_25": {
                "input": {
                    "value": "real",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_26": {
                "input": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_34": {
                "x": {
                    "value": "like_input - input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_22": {
                "x": {
                    "value": "effect_map",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "Geometric/G_network.py": {
        "tensorflow": {
            "Model_79": {
                "variable": {
                    "value": "self.enc_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "{'enc_in': self.enc_in_layer}",
                    "type": "Dict",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "{'enc_out': enc_conv4}",
                    "type": "Dict",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Model_80": {
                "variable": {
                    "value": "self.cls_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "{'cls_in': self.enc_in_layer}",
                    "type": "Dict",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "{'cls_out': cls_out}",
                    "type": "Dict",
                    "possible_values": []
                },
                "name": {
                    "value": "cls_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Model_114": {
                "variable": {
                    "value": "self.dec_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "{'dec_in': self.enc_in_layer, 'c1': self.c1, 'c2': self.c2, 'c3': self.c3}",
                    "type": "Dict",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "{'dec_out': dec_out}",
                    "type": "Dict",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Model_128": {
                "variable": {
                    "value": "self.cls_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "{'cls_in': self.enc_in_layer}",
                    "type": "Dict",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "{'cls_out': self.cls_out}",
                    "type": "Dict",
                    "possible_values": []
                },
                "name": {
                    "value": "cls_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_180": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dense",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dense_layer(x=flatten, f=1, act=False, n='dense')",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_182": {
                "variable": {
                    "value": "self.discriminator_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "{'discri_in': self.discri_in_layer}",
                    "type": "Dict",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "{'discri_out': logit}",
                    "type": "Dict",
                    "possible_values": []
                },
                "name": {
                    "value": "cri_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_image_data_format_136": {
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Geometric/G_training.py": {
        "tensorflow": {
            "create_file_writer_233": {
                "variable": {
                    "value": "self.train_summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.save_path + '/train_mode%d' % mode",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "create_file_writer_234": {
                "variable": {
                    "value": "self.valid_summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.save_path + '/valid_mode%d' % mode",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "create_file_writer_235": {
                "variable": {
                    "value": "self.test_summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.save_path + '/test_mode%d' % mode",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_image_data_format_47": {
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialDecay_239": {
                "variable": {
                    "value": "lr_schedule",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conf.lr",
                            "Attribute"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "len(train_dat) // batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "learning_decay",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "conf.lr_decay",
                            "Attribute"
                        ],
                        [
                            "conf.lr_decay",
                            "Attribute"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_241": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_schedule",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keras.optimizers.schedules.ExponentialDecay(learning_rate, decay_steps=len(train_dat) // batch_size, decay_rate=learning_decay, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "create_file_writer_284": {
                "variable": {
                    "value": "self.discriminator_summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.save_path + '/train_critic'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "create_file_writer_285": {
                "variable": {
                    "value": "self.generator_summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.save_path + '/train_generator'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ExponentialDecay_287": {
                "variable": {
                    "value": "lr_schedule_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "learning_rate_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "len(train_dat) // batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "learning_decay",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "conf.lr_decay",
                            "Attribute"
                        ],
                        [
                            "conf.lr_decay",
                            "Attribute"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialDecay_288": {
                "variable": {
                    "value": "lr_schedule_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "learning_rate_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "len(train_dat) // batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "learning_decay",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "conf.lr_decay",
                            "Attribute"
                        ],
                        [
                            "conf.lr_decay",
                            "Attribute"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_289": {
                "variable": {
                    "value": "optim_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_schedule_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keras.optimizers.schedules.ExponentialDecay(learning_rate_g, decay_steps=len(train_dat) // batch_size, decay_rate=learning_decay, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_290": {
                "variable": {
                    "value": "optim_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_schedule_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keras.optimizers.schedules.ExponentialDecay(learning_rate_d, decay_steps=len(train_dat) // batch_size, decay_rate=learning_decay, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_100": {
                "name": {
                    "value": "mode0_train_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "G_losses.BCE_loss(train_lbl, res)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_174": {
                "name": {
                    "value": "mode0_valid_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.valid_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "conf.epoch",
                            "Attribute"
                        ],
                        [
                            "conf.epoch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_175": {
                "name": {
                    "value": "mode0_valid_acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.valid_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "conf.epoch",
                            "Attribute"
                        ],
                        [
                            "conf.epoch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_281": {
                "name": {
                    "value": "test_acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "Total_test_acc / test_count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "cur_epoch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tqdm.trange(epoch)",
                            "Call"
                        ],
                        [
                            "tqdm.trange(0, epoch, desc=file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_216": {
                "name": {
                    "value": "mode1_valid_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.valid_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "conf.epoch",
                            "Attribute"
                        ],
                        [
                            "conf.epoch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_217": {
                "name": {
                    "value": "mode1_valid_acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.valid_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "conf.epoch",
                            "Attribute"
                        ],
                        [
                            "conf.epoch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_320": {
                "name": {
                    "value": "mode1_ACC_score",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "test_acc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "G_test.test(self.dec_model, self.cls_model, red_test_dat, orange_test_dat)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "cur_epoch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tqdm.trange(epoch)",
                            "Call"
                        ],
                        [
                            "tqdm.trange(0, epoch, desc=file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_119": {
                "name": {
                    "value": "discriminator_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "loss_type['dis'] * G_losses.discriminator_loss(real, fake)",
                            "BinOp"
                        ],
                        [
                            "cls + gan + cyc + norm",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_146": {
                "name": {
                    "value": "generator_total_train_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "loss_type['dis'] * G_losses.discriminator_loss(real, fake)",
                            "BinOp"
                        ],
                        [
                            "cls + gan + cyc + norm",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_148": {
                "name": {
                    "value": "generator_cls_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cls",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "loss_type['cls'] * G_losses.BCE_loss(G_losses.one_sided_label_smoothing(target_c), res)",
                            "BinOp"
                        ],
                        [
                            "loss_type['cls'] * G_losses.BCE_loss(target_c, res)",
                            "BinOp"
                        ],
                        [
                            "loss_type['cls'] * G_losses.BCE_loss(G_losses.one_sided_label_smoothing(target_c), res)",
                            "BinOp"
                        ],
                        [
                            "loss_type['cls'] * G_losses.BCE_loss(target_c, res)",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_149": {
                "name": {
                    "value": "generator_gan_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "gan",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "loss_type['GAN'] * G_losses.generator_loss(target_c, discri_res)",
                            "BinOp"
                        ],
                        [
                            "loss_type['GAN'] * G_losses.generator_loss(target_c, discri_res)",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_150": {
                "name": {
                    "value": "generator_cyc_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "loss_type['cyc'] * G_losses.cycle_loss(train_dat, like_input)",
                            "BinOp"
                        ],
                        [
                            "loss_type['cyc'] * G_losses.cycle_loss(valid_dat, like_input)",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_151": {
                "name": {
                    "value": "generator_l1_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "norm",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "loss_type['norm'] * G_losses.L1_norm(effect_map=CFmap)",
                            "BinOp"
                        ],
                        [
                            "loss_type['norm'] * G_losses.L1_norm(CFmap)",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/M_layers.py": {
        "tensorflow": {
            "MaxNorm_32": {
                "variable": {
                    "value": "k_const",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_value": {
                    "value": "k_const",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MaxNorm_50": {
                "variable": {
                    "value": "k_const",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_value": {
                    "value": "k_const",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_66": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MaxNorm_119": {
                "variable": {
                    "value": "k_const",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_value": {
                    "value": "k_const",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.keras.constraints.MaxNorm(max_value=k_const, axis=[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/M_losses.py": {
        "tensorflow": {
            "reduce_mean_19": {
                "input_tensor": {
                    "value": "tf.abs(effect_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_22": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(effect_map))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_34": {
                "x": {
                    "value": "tf.reduce_mean(tf.abs(like_input - input))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "categorical_crossentropy_7": {
                "y_true": {
                    "value": "lbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_19": {
                "x": {
                    "value": "effect_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_22": {
                "input_tensor": {
                    "value": "tf.square(effect_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_25": {
                "input": {
                    "value": "real",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_26": {
                "input": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "input_tensor": {
                    "value": "tf.abs(like_input - input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_22": {
                "x": {
                    "value": "effect_map",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_34": {
                "x": {
                    "value": "like_input - input",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/M_network.py": {
        "tensorflow": {
            "Model_96": {
                "variable": {
                    "value": "self.enc_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "{'enc_in': self.input}",
                    "type": "Dict",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "{'enc_out': enc_conv4_2}",
                    "type": "Dict",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Model_97": {
                "variable": {
                    "value": "self.cls_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "{'cls_in': self.input}",
                    "type": "Dict",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "{'cls_out': cls_out}",
                    "type": "Dict",
                    "possible_values": []
                },
                "name": {
                    "value": "cls_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Model_142": {
                "variable": {
                    "value": "self.dec_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "{'dec_in': self.input, 'c1': self.c1, 'c2': self.c2, 'c3': self.c3}",
                    "type": "Dict",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "{'dec_out': dec_out}",
                    "type": "Dict",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Model_166": {
                "variable": {
                    "value": "self.cls_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "{'cls_in': self.input}",
                    "type": "Dict",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "{'cls_out': cls_out}",
                    "type": "Dict",
                    "possible_values": []
                },
                "name": {
                    "value": "cls_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_223": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dense_layer(x=fc1, f=1, act=None, n='discri_logit')",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_225": {
                "variable": {
                    "value": "self.discriminator_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "{'discri_in': self.discri_input}",
                    "type": "Dict",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "{'discri_out': output}",
                    "type": "Dict",
                    "possible_values": []
                },
                "name": {
                    "value": "discriminator_model",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/M_training.py": {
        "tensorflow": {
            "create_file_writer_220": {
                "variable": {
                    "value": "self.train_summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.save_path + '/train'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "create_file_writer_221": {
                "variable": {
                    "value": "self.valid_summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.save_path + '/valid'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "create_file_writer_222": {
                "variable": {
                    "value": "self.test_summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.save_path + '/test'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ExponentialDecay_227": {
                "variable": {
                    "value": "lr_schedule",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conf.lr",
                            "Attribute"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "len(self.all_train_idx) // batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "learning_decay",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "conf.lr_decay",
                            "Attribute"
                        ],
                        [
                            "conf.lr_decay",
                            "Attribute"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_228": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_schedule",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keras.optimizers.schedules.ExponentialDecay(learning_rate, decay_steps=len(self.all_train_idx) // batch_size, decay_rate=learning_decay, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "create_file_writer_275": {
                "variable": {
                    "value": "self.discriminator_summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.save_path + '/train_discriminator'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "create_file_writer_276": {
                "variable": {
                    "value": "self.generator_summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.save_path + '/train_generator'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ExponentialDecay_278": {
                "variable": {
                    "value": "g_lr_schedule",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "learning_rate_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "len(self.all_train_idx) // batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "learning_decay",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "conf.lr_decay",
                            "Attribute"
                        ],
                        [
                            "conf.lr_decay",
                            "Attribute"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialDecay_279": {
                "variable": {
                    "value": "d_lr_schedule",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "learning_rate_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "len(self.all_train_idx) // batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "learning_decay",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "conf.lr_decay",
                            "Attribute"
                        ],
                        [
                            "conf.lr_decay",
                            "Attribute"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_280": {
                "variable": {
                    "value": "gen_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "g_lr_schedule",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keras.optimizers.schedules.ExponentialDecay(learning_rate_g, decay_steps=len(self.all_train_idx) // batch_size, decay_rate=learning_decay, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "beta_1": {
                    "value": "beta_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conf.beta_1",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_281": {
                "variable": {
                    "value": "disc_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "d_lr_schedule",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keras.optimizers.schedules.ExponentialDecay(learning_rate_d, decay_steps=len(self.all_train_idx) // batch_size, decay_rate=learning_decay, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "beta_1": {
                    "value": "beta_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conf.beta_1",
                            "Attribute"
                        ]
                    ]
                }
            },
            "GradientTape_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_98": {
                "name": {
                    "value": "mode0_train_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "M_losses.CE_loss(train_lbl, res)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_171": {
                "name": {
                    "value": "mode0_valid_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.valid_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "conf.epoch",
                            "Attribute"
                        ],
                        [
                            "conf.epoch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_172": {
                "name": {
                    "value": "mode0_valid_acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.valid_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "conf.epoch",
                            "Attribute"
                        ],
                        [
                            "conf.epoch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_271": {
                "name": {
                    "value": "mode0_test_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.total_tst_loss / self.tst_count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "cur_epoch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tqdm.trange(0, epoch, desc=file_name)",
                            "Call"
                        ],
                        [
                            "tqdm.trange(0, epoch, desc=file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_272": {
                "name": {
                    "value": "mode0_test_acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.total_tst_acc / self.tst_count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "cur_epoch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tqdm.trange(0, epoch, desc=file_name)",
                            "Call"
                        ],
                        [
                            "tqdm.trange(0, epoch, desc=file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_211": {
                "name": {
                    "value": "mode1_valid_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.valid_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "conf.epoch",
                            "Attribute"
                        ],
                        [
                            "conf.epoch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_212": {
                "name": {
                    "value": "mode1_valid_acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.valid_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "conf.epoch",
                            "Attribute"
                        ],
                        [
                            "conf.epoch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_329": {
                "name": {
                    "value": "mode1_test_acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.total_tst_acc / self.tst_count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "cur_epoch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tqdm.trange(0, epoch, desc=file_name)",
                            "Call"
                        ],
                        [
                            "tqdm.trange(0, epoch, desc=file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_117": {
                "name": {
                    "value": "discriminator_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "loss_type['dis'] * M_losses.discriminator_loss(real, fake)",
                            "BinOp"
                        ],
                        [
                            "cls + cyc + gan + l1_norm",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_144": {
                "name": {
                    "value": "generator_total_train_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "loss_type['dis'] * M_losses.discriminator_loss(real, fake)",
                            "BinOp"
                        ],
                        [
                            "cls + cyc + gan + l1_norm",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_146": {
                "name": {
                    "value": "generator_cls_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cls",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "loss_type['cls'] * M_losses.CE_loss(M_losses.one_sided_label_smoothing(target_c), res)",
                            "BinOp"
                        ],
                        [
                            "loss_type['cls'] * M_losses.CE_loss(target_c, res)",
                            "BinOp"
                        ],
                        [
                            "loss_type['cls'] * M_losses.CE_loss(M_losses.one_sided_label_smoothing(target_c), res)",
                            "BinOp"
                        ],
                        [
                            "loss_type['cls'] * M_losses.CE_loss(target_c, res)",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_147": {
                "name": {
                    "value": "generator_gan_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "gan",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "loss_type['GAN'] * M_losses.generator_loss(target_c, discri_res)",
                            "BinOp"
                        ],
                        [
                            "loss_type['GAN'] * M_losses.generator_loss(target_c, discri_res)",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_148": {
                "name": {
                    "value": "generator_cyc_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cyc",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "loss_type['cyc'] * M_losses.cycle_loss(train_dat, like_input)",
                            "BinOp"
                        ],
                        [
                            "loss_type['cyc'] * M_losses.cycle_loss(valid_dat, like_input)",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_149": {
                "name": {
                    "value": "generator_l1_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "l1_norm",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "loss_type['norm'] * M_losses.L1_norm(CFmap)",
                            "BinOp"
                        ],
                        [
                            "loss_type['norm'] * M_losses.L1_norm(CFmap)",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/M_utils.py": {
        "tensorflow": {
            "load_data_14": {
                "variable": {
                    "value": "(data_train, data_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_crop_46": {
                "variable": {
                    "value": "emp[cnt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.pad(dat, npad, 'constant')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "emp[cnt].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}