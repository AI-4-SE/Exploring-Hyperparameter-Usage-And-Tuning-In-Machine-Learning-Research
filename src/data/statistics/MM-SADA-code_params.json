{
    "src/data_gen/crops.py": {
        "tensorflow": {
            "cast_11": {
                "variable": {
                    "value": "w_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(width - crop_pairs[1]) / 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_12": {
                "variable": {
                    "value": "h_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(height - crop_pairs[0]) / 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_13": {
                "variable": {
                    "value": "o_h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "h_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast((height - crop_pairs[0]) / 4, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_14": {
                "variable": {
                    "value": "o_w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "w_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast((width - crop_pairs[1]) / 4, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_27": {
                "variable": {
                    "value": "o_w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(width - input_size) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "o_h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(height - input_size) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_34": {
                "variable": {
                    "value": "mirror_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "logical_and_36": {
                "variable": {
                    "value": "invert_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(invert)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mirror_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(f_rand, 0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_37": {
                "variable": {
                    "value": "segment",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "mirror_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(f_rand, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.reverse(segment, [-2])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : segment",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "div_43": {
                "variable": {
                    "value": "segment",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "segment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(mirror_cond, lambda : tf.reverse(segment, [-2]), lambda : segment)",
                            "Call"
                        ],
                        [
                            "tf.div(segment, 256.0)",
                            "Call"
                        ],
                        [
                            "tf.subtract(segment, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "256.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "subtract_44": {
                "variable": {
                    "value": "segment",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "segment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(mirror_cond, lambda : tf.reverse(segment, [-2]), lambda : segment)",
                            "Call"
                        ],
                        [
                            "tf.div(segment, 256.0)",
                            "Call"
                        ],
                        [
                            "tf.subtract(segment, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "scalar_35": {
                "name": {
                    "value": "To Flip?",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "f_rand",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cond_39": {
                "pred": {
                    "value": "invert_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.logical_and(tf.constant(invert), mirror_cond)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : inverted_segment",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : segment",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "multiply_45": {
                "x": {
                    "value": "segment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(mirror_cond, lambda : tf.reverse(segment, [-2]), lambda : segment)",
                            "Call"
                        ],
                        [
                            "tf.div(segment, 256.0)",
                            "Call"
                        ],
                        [
                            "tf.subtract(segment, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_36": {
                "value": {
                    "value": "invert",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reverse_37": {
                "tensor": {
                    "value": "segment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(mirror_cond, lambda : tf.reverse(segment, [-2]), lambda : segment)",
                            "Call"
                        ],
                        [
                            "tf.div(segment, 256.0)",
                            "Call"
                        ],
                        [
                            "tf.subtract(segment, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/data_gen/preprocessing.py": {
        "tensorflow": {
            "convert_to_tensor_50": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.crops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_73": {
                "variable": {
                    "value": "segment",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.map_fn(lambda f: tf.image.decode_jpeg(tf.read_file(f), channels=num_channel), filenames, dtype=tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_75": {
                "variable": {
                    "value": "segment_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self._training_preprocess(segment, name, f_rand, s_rand, h_rand, w_rand)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self._test_preprocess(segment)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "multiply_84": {
                "variable": {
                    "value": "h_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([], 0, 2, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_85": {
                "variable": {
                    "value": "w_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([], 0, 2, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_91": {
                "variable": {
                    "value": "h_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([], 0, 2, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_92": {
                "variable": {
                    "value": "w_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([], 0, 2, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_98": {
                "variable": {
                    "value": "segment",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[segment_u, segment_v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_103": {
                "variable": {
                    "value": "h_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([], 0, 2, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_104": {
                "variable": {
                    "value": "w_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform([], 0, 2, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "segment_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[segment_u, segment_v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "map_fn_73": {
                "fn": {
                    "value": "lambda f: tf.image.decode_jpeg(tf.read_file(f), channels=num_channel)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_79": {
                "name": {
                    "value": "'Segment ' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "segment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "training_crop(segment, self.height, self.width, self.input_size, scales, s_rand, h_rand, w_rand)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.map_fn(lambda f: tf.image.decode_jpeg(tf.read_file(f), channels=num_channel), filenames, dtype=tf.uint8), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([segment_u, segment_v], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_124": {
                "name": {
                    "value": "Augmented Segment u",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(segment_aug[:, :, :, 0], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_125": {
                "name": {
                    "value": "Augmented Segment v",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(segment_aug[:, :, :, 1], -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_127": {
                "name": {
                    "value": "Augmented Segment",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "segment_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_training, lambda : self._training_preprocess(segment, name, f_rand, s_rand, h_rand, w_rand), lambda : self._test_preprocess(segment))",
                            "Call"
                        ],
                        [
                            "self.preprocess_flow_correct(filenames, is_training)",
                            "Call"
                        ],
                        [
                            "self.preprocess_image(filenames, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_jpeg_73": {
                "contents": {
                    "value": "tf.read_file(f)",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "num_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "expand_dims_124": {
                "input": {
                    "value": "segment_aug[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_125": {
                "input": {
                    "value": "segment_aug[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "read_file_73": {
                "filename": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/arch.py": {
        "tensorflow": {
            "truncated_normal_34": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "feat.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_39": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "feat.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(feat, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feat, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(feat, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feat, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_58": {
                "variable": {
                    "value": "d_h_fc0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(feat, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feat, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.initializers.truncated_normal(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "d_h_fc0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d_h_fc0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(feat, 100, kernel_initializer=tf.initializers.truncated_normal(stddev=0.1), name='first')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d_h_fc0)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(feat, 100, kernel_initializer=tf.initializers.truncated_normal(stddev=0.1), name='first')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d_h_fc0)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_62": {
                "variable": {
                    "value": "d_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "d_h_fc0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(feat, 100, kernel_initializer=tf.initializers.truncated_normal(stddev=0.1), name='first')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d_h_fc0)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(feat, 100, kernel_initializer=tf.initializers.truncated_normal(stddev=0.1), name='first')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d_h_fc0)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.initializers.truncated_normal(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "second",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_40": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_47": {
                "variable": {
                    "value": "d_h_fc0",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(feat, [-1, dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(feat, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.initializers.truncated_normal(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "d_h_fc0",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "d_h_fc0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(feat, 100, kernel_initializer=tf.initializers.truncated_normal(stddev=0.1), name='first')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d_h_fc0)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(feat, 100, kernel_initializer=tf.initializers.truncated_normal(stddev=0.1), name='first')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d_h_fc0)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_49": {
                "variable": {
                    "value": "d_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "d_h_fc0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(feat, 100, kernel_initializer=tf.initializers.truncated_normal(stddev=0.1), name='first')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d_h_fc0)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(feat, 100, kernel_initializer=tf.initializers.truncated_normal(stddev=0.1), name='first')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(d_h_fc0)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.initializers.truncated_normal(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "second",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_variables",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "Domain_Classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_58": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_63": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_47": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_50": {
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/flip_gradient.py": {
        "tensorflow": {
            "get_default_graph_19": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RegisterGradient_15": {
                "op_type": {
                    "value": "grad_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FlipGradient%d' % self.num_calls",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_21": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "negative_17": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/i3d.py": {
        "tensorflow": {
            "max_pool3d_179": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "flip_gradient(net, flip_weight)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_194": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "flip_gradient(net, flip_weight)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_257": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "flip_gradient(net, flip_weight)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_403": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "flip_gradient(net, flip_weight)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_mean_492": {
                "variable": {
                    "value": "averaged_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_497": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "averaged_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_224": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_252": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_286": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_314": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_342": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_370": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_398": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_432": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_460": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool3d_466": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "flip_gradient(net, flip_weight)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 7, 7, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.VALID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_469": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "flip_gradient(net, flip_weight)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_217": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "flip_gradient(net, flip_weight)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_246": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "flip_gradient(net, flip_weight)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_280": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "flip_gradient(net, flip_weight)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_308": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "flip_gradient(net, flip_weight)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_336": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "flip_gradient(net, flip_weight)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_347": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_364": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "flip_gradient(net, flip_weight)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_375": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_392": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "flip_gradient(net, flip_weight)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_409": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_426": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "flip_gradient(net, flip_weight)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_437": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_454": {
                "variable": {
                    "value": "branch_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ],
                        [
                            "flip_gradient(net, flip_weight)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_465": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "squeeze_491": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_245": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_264": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_267": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_273": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_279": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_292": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_295": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_301": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_323": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_329": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_335": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_348": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_351": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_357": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_376": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_379": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_385": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_391": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_410": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_413": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_419": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_425": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_438": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_441": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_447": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_453": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_482": {
                "variable": {
                    "value": "end_points[aux_classifier]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits_aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits_aux, [2, 3], name='SpatialSqueezeAux')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_473": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_481": {
                "variable": {
                    "value": "logits_aux",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits_aux, [2, 3], name='SpatialSqueezeAux')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueezeAux",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/mmd.py": {
        "tensorflow": {
            "placeholder_5": {
                "variable": {
                    "value": "seen",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_6": {
                "variable": {
                    "value": "unseen",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_16": {
                "variable": {
                    "value": "XX",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_17": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_18": {
                "variable": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_part_20": {
                "variable": {
                    "value": "X_sqnorms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(X, X, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_21": {
                "variable": {
                    "value": "Y_sqnorms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y, Y, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_46": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(K_XX)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(K_YY)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "seen",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "unseen",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_24": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_34": {
                "input_tensor": {
                    "value": "wts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(gammas)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "trace_58": {
                "variable": {
                    "value": "trace_X",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_XX + wt * tf.exp(-gamma * (-2 * XX + c(X_sqnorms) + r(X_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trace_59": {
                "variable": {
                    "value": "trace_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_YY + wt * tf.exp(-gamma * (-2 * YY + c(Y_sqnorms) + r(Y_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_30": {
                "x": {
                    "value": "-gamma * (-2 * XX + c(X_sqnorms) + r(X_sqnorms))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_31": {
                "x": {
                    "value": "-gamma * (-2 * XY + c(X_sqnorms) + r(Y_sqnorms))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_32": {
                "x": {
                    "value": "-gamma * (-2 * YY + c(Y_sqnorms) + r(Y_sqnorms))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_46": {
                "input": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_XX + wt * tf.exp(-gamma * (-2 * XX + c(X_sqnorms) + r(X_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_47": {
                "input": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_YY + wt * tf.exp(-gamma * (-2 * YY + c(Y_sqnorms) + r(Y_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_50": {
                "input_tensor": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_XX + wt * tf.exp(-gamma * (-2 * XX + c(X_sqnorms) + r(X_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_YY + wt * tf.exp(-gamma * (-2 * YY + c(Y_sqnorms) + r(Y_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_52": {
                "input_tensor": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_XY + wt * tf.exp(-gamma * (-2 * XY + c(X_sqnorms) + r(Y_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_63": {
                "input_tensor": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_XY + wt * tf.exp(-gamma * (-2 * XY + c(X_sqnorms) + r(Y_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_61": {
                "input_tensor": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_XX + wt * tf.exp(-gamma * (-2 * XX + c(X_sqnorms) + r(X_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_62": {
                "input_tensor": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_YY + wt * tf.exp(-gamma * (-2 * YY + c(Y_sqnorms) + r(Y_sqnorms)))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/utils.py": {
        "tensorflow": {
            "Saver_47": {
                "variable": {
                    "value": "variable_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_74": {
                "variable": {
                    "value": "variable_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_80": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_99": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/train/train.py": {
        "tensorflow": {
            "Graph_91": {
                "variable": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_97": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.results_dir + '/train'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FileWriter_98": {
                "variable": {
                    "value": "seen_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.results_dir + '/seen'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FileWriter_99": {
                "variable": {
                    "value": "unseen_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.results_dir + '/unseen'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_92": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_222": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_103": {
                "graph": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_228": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_147": {
                "variable": {
                    "value": "val_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_149": {
                "variable": {
                    "value": "domain_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_170": {
                "variable": {
                    "value": "val_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_172": {
                "variable": {
                    "value": "domain_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_103": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Summary_161": {
                "variable": {
                    "value": "val_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_183": {
                "variable": {
                    "value": "val_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_228": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/train/training_loops.py": {
        "tensorflow": {}
    }
}