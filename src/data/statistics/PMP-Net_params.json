{
    "PMPPlus-Jittor/models/misc/utils.py": {
        "sklearn": {
            "NearestNeighbors_41": {
                "variable": {
                    "value": "nbrs",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "D * K + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Chamfer3D/dist_chamfer_3D.py": {
        "torch": {
            "load_12": {
                "variable": {
                    "value": "chamfer_3D",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "chamfer_3D",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "['/'.join(os.path.abspath(__file__).split('/')[:-1] + ['chamfer_cuda.cpp']), '/'.join(os.path.abspath(__file__).split('/')[:-1] + ['chamfer3D.cu'])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "dist1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "gradxyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "gradxyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_43": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz1.device",
                            "Attribute"
                        ],
                        [
                            "graddist1.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "Chamfer3D/setup.py": {
        "torch": {}
    },
    "PMPPlus-Jittor/utils/helpers.py": {
        "torch": {
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PMPPlus-Jittor/utils/metrics.py": {
        "torch": {
            "mean_85": {
                "input": {
                    "value": "emd_distance(pred, gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_78": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "core/inference_c3d.py": {
        "torch": {
            "DataLoader_20": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.TEST)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CONST.WEIGHTS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_31": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(dataset=cfg.DATASET.TRAIN_DATASET)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "core/inference_pcn.py": {
        "torch": {
            "arange_24": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pcd.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.randperm(n, dtype=torch.long, device=device)[:n_points].reshape((1, -1)) for i in range(b)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.TEST)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_50": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CONST.WEIGHTS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_45": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(dataset=cfg.DATASET.TRAIN_DATASET)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_25": {
                "input": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_25": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pcd.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "core/test_c3d.py": {
        "torch": {
            "mean_23": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(d1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_24": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(d2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_35": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.VAL)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_51": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CONST.WEIGHTS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_18": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.sqrt(d2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_23": {
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.sqrt(d1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_24": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.sqrt(d2))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_47": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(dataset=cfg.DATASET.TRAIN_DATASET)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "torch.stack(pmd_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_87": {
                "input": {
                    "value": "delta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_89": {
                "tensors": {
                    "value": "pmd_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "core/test_pcn.py": {
        "torch": {
            "mean_23": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(d1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_24": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(d2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_38": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pcd.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.randperm(n, dtype=torch.long, device=device)[:n_points].reshape((1, -1)) for i in range(b)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.TEST)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_65": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CONST.WEIGHTS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_18": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.sqrt(d2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_23": {
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.sqrt(d1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_24": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.sqrt(d2))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_61": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(dataset=cfg.DATASET.TRAIN_DATASET)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_39": {
                "input": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "torch.stack(pmd_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_39": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pcd.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_102": {
                "input": {
                    "value": "delta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_104": {
                "tensors": {
                    "value": "pmd_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "core/train_c3d.py": {
        "torch": {
            "mean_27": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(d1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_28": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(d2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.TRAIN)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "val_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.VAL)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.TRAIN.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "cfg.TRAIN.BETAS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_86": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=cfg.TRAIN.LEARNING_RATE, weight_decay=cfg.TRAIN.WEIGHT_DECAY, betas=cfg.TRAIN.BETAS)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_79": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(dataset=cfg.DATASET.TRAIN_DATASET)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_94": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CONST.WEIGHTS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_22": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.sqrt(d2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_27": {
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.sqrt(d1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_28": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.sqrt(d2))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_182": {
                "obj": {
                    "value": "{'epoch_index': epoch_idx, 'best_metrics': best_metrics, 'model': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.DIR.CHECKPOINTS, file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_134": {
                "input": {
                    "value": "torch.stack(delta_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "delta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_134": {
                "tensors": {
                    "value": "delta_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "core/train_pcn.py": {
        "torch": {
            "arange_29": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pcd.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.randperm(n, dtype=torch.long, device=device)[:n_points].reshape((1, -1)) for i in range(b)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_41": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(d1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_42": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(d2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.TRAIN)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "val_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_loader.get_dataset(utils.data_loaders.DatasetSubset.TEST)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.CONST.NUM_WORKERS // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.data_loaders.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.TRAIN.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "cfg.TRAIN.BETAS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_100": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=cfg.TRAIN.LEARNING_RATE, weight_decay=cfg.TRAIN.WEIGHT_DECAY, betas=cfg.TRAIN.BETAS)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_93": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(dataset=cfg.DATASET.TRAIN_DATASET)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_108": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CONST.WEIGHTS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_36": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.sqrt(d2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_41": {
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.sqrt(d1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_42": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.sqrt(d2))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_30": {
                "input": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_196": {
                "obj": {
                    "value": "{'epoch_index': epoch_idx, 'best_metrics': best_metrics, 'model': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.DIR.CHECKPOINTS, file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_148": {
                "input": {
                    "value": "torch.stack(delta_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_30": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pcd.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_146": {
                "input": {
                    "value": "delta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_148": {
                "tensors": {
                    "value": "delta_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "main_c3d.py": {
        "torch": {
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_23": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_pcn.py": {
        "torch": {
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_24": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/model.py": {
        "torch": {
            "Sequential_61": {
                "variable": {
                    "value": "self.mlp_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mlp_conv",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "normal_88": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones((b, 32, n), device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.mlp_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mlp_conv",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "normal_131": {
                "variable": {
                    "value": "noise_points",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones((b, self.noise_dim if self.if_noise else 0, n), device=device) * self.noise_stdv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "l0_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l0_points, noise_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_150": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones((b, 32, n), device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "self.mlp_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mlp_conv",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "normal_227": {
                "variable": {
                    "value": "noise_points",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones((b, self.noise_dim if self.if_noise else 0, n), device=device) * self.noise_stdv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "l0_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l0_points, noise_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_247": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones((b, self.dim_tail, n), device=device) * self.noise_stdv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "l0_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l0_points, noise]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_31": {
                "tensors": {
                    "value": "[cur_x, prev_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "[cur_x, prev_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_33": {
                "tensors": {
                    "value": "[cur_x, r * prev_s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "tensors": {
                    "value": "[l0_xyz, l0_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "[l0_xyz, l0_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_176": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones((b, 128, npoint), dtype=torch.float, device=device) * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_177": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones((b, 128, 512), dtype=torch.float, device=device) * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_178": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones((b, 256, 128), dtype=torch.float, device=device) * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_244": {
                "tensors": {
                    "value": "[l0_xyz, l0_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_270": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones((b, 128, npoint), dtype=torch.float, device=device) * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_271": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones((b, 128, 512), dtype=torch.float, device=device) * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_272": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones((b, 256, 128), dtype=torch.float, device=device) * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "(b, 32, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tanh_89": {
                "input": {
                    "value": "self.mlp_conv(torch.cat([l0_points, noise], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_150": {
                "*size": {
                    "value": "(b, 32, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tanh_151": {
                "input": {
                    "value": "self.mlp_conv(torch.cat([l0_points, noise], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_249": {
                "input": {
                    "value": "self.mlp_conv(l0_points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_131": {
                "*size": {
                    "value": "(b, self.noise_dim if self.if_noise else 0, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_227": {
                "*size": {
                    "value": "(b, self.noise_dim if self.if_noise else 0, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_247": {
                "*size": {
                    "value": "(b, self.dim_tail, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "[l0_points, noise]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_151": {
                "tensors": {
                    "value": "[l0_points, noise]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_176": {
                "*size": {
                    "value": "(b, 128, npoint)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_177": {
                "*size": {
                    "value": "(b, 128, 512)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_178": {
                "*size": {
                    "value": "(b, 256, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_270": {
                "*size": {
                    "value": "(b, 128, npoint)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_271": {
                "*size": {
                    "value": "(b, 128, 512)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_272": {
                "*size": {
                    "value": "(b, 256, 128)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ],
                        [
                            "point_cloud.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "models/transformer.py": {
        "torch": {
            "Conv1d_9": {
                "variable": {
                    "value": "self.conv_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_10": {
                "variable": {
                    "value": "self.conv_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_11": {
                "variable": {
                    "value": "self.conv_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.pos_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, pos_hidden_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.attn_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim, dim * attn_hidden_multiplier, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_27": {
                "variable": {
                    "value": "self.linear_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_28": {
                "variable": {
                    "value": "self.linear_end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_58": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_mlp(qk_rel + pos_embedding)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attention, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_62": {
                "variable": {
                    "value": "agg",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b c i j, b c i j -> b c i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_mlp(qk_rel + pos_embedding)",
                            "Call"
                        ],
                        [
                            "torch.softmax(attention, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "pos_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "pos_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "pos_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim * attn_hidden_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "dim * attn_hidden_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "dim * attn_hidden_multiplier",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/utils.py": {
        "torch": {
            "zeros_116": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_118": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "nsample",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_11": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel + in_channel_points1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_13": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel + in_channel_points1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "self.mlp_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.mlp_conv",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_216": {
                "variable": {
                    "value": "self.mlp_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.mlp_conv",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_232": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recip_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / dist",
                            "BinOp"
                        ],
                        [
                            "1.0 / dist",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_266": {
                "variable": {
                    "value": "self.mlp_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.mlp_conv",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_282": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recip_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / dist",
                            "BinOp"
                        ],
                        [
                            "1.0 / dist",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_338": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_356": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_392": {
                "input": {
                    "value": "src ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_393": {
                "input": {
                    "value": "dst ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xyz, points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_points, points1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_points, points1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_391": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "dst.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argsort_400": {
                "input": {
                    "value": "sqrdists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "square_distance(new_xyz, xyz)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_190": {
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "Name"
                        ],
                        [
                            "torch.cat([grouped_xyz, grouped_points], 1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "Name"
                        ],
                        [
                            "grouped_xyz",
                            "Name"
                        ],
                        [
                            "torch.cat([xyz, points], 1)",
                            "Call"
                        ],
                        [
                            "points",
                            "Name"
                        ],
                        [
                            "new_points.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.mlp_conv(new_points)",
                            "Call"
                        ],
                        [
                            "torch.max(new_points, 3)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([interpolated_points, points1], 1)",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "Name"
                        ],
                        [
                            "self.mlp_conv(new_points)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_points, points1], 1)",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "Name"
                        ],
                        [
                            "self.mlp_conv(new_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_337": {
                "in_features": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv1d_355": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "layer_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_332": {
                "in_features": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_350": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ],
                        [
                            "in_channel",
                            "Name"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_334": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm1d_352": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp",
                            "Name"
                        ],
                        [
                            "mlp[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ],
                        [
                            "layer_dims[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pointnet2_ops_lib/pointnet2_ops/pointnet2_modules.py": {
        "torch": {
            "Sequential_19": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_101": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_102": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool2d_67": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_188": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_feats, unknow_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "mlp_spec[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp_spec[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "mlp_spec[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_ops_lib/pointnet2_ops/pointnet2_utils.py": {
        "torch": {
            "load_24": {
                "variable": {
                    "value": "_ext",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "_ext",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "_ext_sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob.glob(osp.join(_ext_src_root, 'src', '*.cpp')) + glob.glob(osp.join(_ext_src_root, 'src', '*.cu'))",
                            "BinOp"
                        ]
                    ]
                },
                "extra_include_paths": {
                    "value": "[osp.join(_ext_src_root, 'include')]",
                    "type": "List",
                    "possible_values": []
                },
                "extra_cflags": {
                    "value": "['-O3']",
                    "type": "List",
                    "possible_values": []
                },
                "extra_cuda_cflags": {
                    "value": "['-O3', '-Xfatbin', '-compress-all']",
                    "type": "List",
                    "possible_values": []
                },
                "with_cuda": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_125": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_188": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_237": {
                "input": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ball_query(self.radius, self.nsample, xyz, new_xyz)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_322": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2_ops_lib/setup.py": {
        "torch": {}
    },
    "utils/data_loaders.py": {
        "torch": {}
    },
    "utils/data_transforms.py": {
        "torch": {
            "from_numpy_55": {
                "ndarray": {
                    "value": "arr.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/helpers.py": {
        "torch": {
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/metrics.py": {
        "torch": {
            "mean_84": {
                "input": {
                    "value": "emd_distance(pred, gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_77": {
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}