{
    "data_gen/kinetics_gendata.py": {
        "torch": {}
    },
    "feeders/feeder.py": {
        "torch": {
            "DataLoader_117": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Feeder(data_path, label_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "feeders/feederBoth.py": {
        "torch": {
            "DataLoader_123": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Feeder(data_path, label_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "feeders/feeder_s.py": {
        "torch": {
            "DataLoader_117": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Feeder(data_path, label_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "gcn_search.py": {
        "torch": {
            "manual_seed_all_32": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_214": {
                "variable": {
                    "value": "self.data_loader[test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Feeder(**self.arg.test_feeder_args)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.arg.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.arg.num_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "init_seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_235": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_290": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "rel",
                    "type": "Constant",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_351": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(self.arg.weights)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cuda(output_device)] for (k, v) in weights.items()])",
                            "Call"
                        ],
                        [
                            "torch.ones(10, 8) * 0.125",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(es_param).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cpu()] for (k, v) in state_dict.items()])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(es_param).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.ones(n_layers, n_ops) * 0.125",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_540": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(self.arg.weights)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cuda(output_device)] for (k, v) in weights.items()])",
                            "Call"
                        ],
                        [
                            "torch.ones(10, 8) * 0.125",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(es_param).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cpu()] for (k, v) in state_dict.items()])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(es_param).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.ones(n_layers, n_ops) * 0.125",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_207": {
                "variable": {
                    "value": "self.data_loader[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Feeder(**self.arg.train_feeder_args)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.arg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.arg.num_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "init_seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_276": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.model.parameters())[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.arg.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "self.arg.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.arg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_349": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "es_param",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample.reshape(10, -1)",
                            "Call"
                        ],
                        [
                            "es_params[j]",
                            "Subscript"
                        ],
                        [
                            "es_param.reshape(10, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_403": {
                "variable": {
                    "value": "(value, predict_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_404": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(predict_label == label.data).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_244": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.arg.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_269": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.arg.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_device": {
                    "value": "output_device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.arg.device[0] if type(self.arg.device) is list else self.arg.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Adam_283": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.model.parameters())[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.arg.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.arg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_344": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_437": {
                "obj": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(self.arg.weights)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cuda(output_device)] for (k, v) in weights.items()])",
                            "Call"
                        ],
                        [
                            "torch.ones(10, 8) * 0.125",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(es_param).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cpu()] for (k, v) in state_dict.items()])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(es_param).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.ones(n_layers, n_ops) * 0.125",
                            "BinOp"
                        ]
                    ]
                },
                "f": {
                    "value": "self.arg.model_saved_name + '-' + str(epoch) + '-' + str(int(self.global_step)) + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_445": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "es_param",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sample.reshape(10, -1)",
                            "Call"
                        ],
                        [
                            "es_params[j]",
                            "Subscript"
                        ],
                        [
                            "es_param.reshape(10, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_446": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(self.arg.weights)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cuda(output_device)] for (k, v) in weights.items()])",
                            "Call"
                        ],
                        [
                            "torch.ones(10, 8) * 0.125",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(es_param).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cpu()] for (k, v) in state_dict.items()])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(es_param).float().cuda()",
                            "Call"
                        ],
                        [
                            "F.softmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.ones(n_layers, n_ops) * 0.125",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_490": {
                "variable": {
                    "value": "(_, predict_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_539": {
                "*size": {
                    "value": "n_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "n_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_all_25": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_207": {
                "variable": {
                    "value": "self.data_loader[test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Feeder(**self.arg.test_feeder_args)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.arg.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.arg.num_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "init_seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_226": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_281": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "rel",
                    "type": "Constant",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_200": {
                "variable": {
                    "value": "self.data_loader[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Feeder(**self.arg.train_feeder_args)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.arg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.arg.num_worker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "init_seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_267": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.arg.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "self.arg.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.arg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_379": {
                "variable": {
                    "value": "(value, predict_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_380": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(predict_label == label.data).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_235": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.arg.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_260": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.arg.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_device": {
                    "value": "output_device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.arg.device[0] if type(self.arg.device) is list else self.arg.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Adam_274": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.arg.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.arg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_411": {
                "obj": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(self.arg.weights)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cuda(output_device)] for (k, v) in weights.items()])",
                            "Call"
                        ],
                        [
                            "OrderedDict([[k.split('module.')[-1], v.cpu()] for (k, v) in state_dict.items()])",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.arg.model_saved_name + '-' + str(epoch) + '-' + str(int(self.global_step)) + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_449": {
                "variable": {
                    "value": "(_, predict_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/agcn.py": {
        "torch": {
            "normal_22": {
                "mean": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv.weight",
                            "Attribute"
                        ]
                    ]
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "math.sqrt(2.0 / (n * k1 * k2 * branches))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_65": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_94": {
                "variable": {
                    "value": "self.AvgAdpPool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_95": {
                "variable": {
                    "value": "self.MaxAdpPool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.conv_Attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_101": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_132": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_133": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_149": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_187": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_192": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_193": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_194": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_195": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_196": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_214": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_215": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_216": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_258": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_263": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_264": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_265": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_267": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_268": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_286": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_287": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_288": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_335": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_341": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_343": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_344": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_360": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_361": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_362": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_405": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_410": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_411": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_412": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_414": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_415": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_437": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_438": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_439": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_483": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_509": {
                "variable": {
                    "value": "self.data_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_person * in_channels * num_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_522": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "Name",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_279": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_353": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_430": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_523": {
                "mean": {
                    "value": "self.fc.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "math.sqrt(2.0 / num_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_187": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_258": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_260": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_335": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_337": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_366": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_405": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_407": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_423": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_424": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_470": {
                "input": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2(y).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "y.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1(y).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_78": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_199": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_201": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_203": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_204": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_209": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_245": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_271": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_272": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_273": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_275": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_276": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_280": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_281": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_322": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_347": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_349": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_350": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_354": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_355": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_392": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_420": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_431": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_432": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_462": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_467": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1(y).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2(y).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "y.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_170": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_236": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_240": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1(y).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2(y).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "y.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_291": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_313": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_317": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1(y).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2(y).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "y.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_387": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1(y).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2(y).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "y.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_366": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_291": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/agcn3.py": {
        "torch": {
            "normal_22": {
                "mean": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv.weight",
                            "Attribute"
                        ]
                    ]
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "math.sqrt(2.0 / (n * k1 * k2 * branches))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_66": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_67": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_69": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.conv_ST11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.conv_ST12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_97": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_157": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_158": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_159": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_161": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_162": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_164": {
                "variable": {
                    "value": "self.conv_ST11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_165": {
                "variable": {
                    "value": "self.conv_ST12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_188": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_189": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_190": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_239": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_244": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_245": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_246": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_248": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_249": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_267": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_268": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_269": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_316": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_321": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_323": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_324": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_340": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_341": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_342": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_385": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_390": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_391": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_392": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_394": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_395": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_397": {
                "variable": {
                    "value": "self.conv_ST11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_398": {
                "variable": {
                    "value": "self.conv_ST12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_421": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_422": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_423": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_479": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_484": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_486": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_487": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_503": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_504": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_505": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_545": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_566": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_587": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_608": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_628": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_649": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_678": {
                "variable": {
                    "value": "self.data_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_person * in_channels * num_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_691": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "Name",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_181": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_260": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_333": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_414": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_496": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_692": {
                "mean": {
                    "value": "self.fc.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "math.sqrt(2.0 / num_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_239": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_241": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_316": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_318": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_385": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_387": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_479": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_481": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_100": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_168": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_178": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_183": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_225": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_252": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_253": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_254": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_256": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_262": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_271": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_302": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_327": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_329": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_330": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_334": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_335": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_344": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_372": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_401": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_402": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_403": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_405": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_406": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_408": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_409": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_410": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_411": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_415": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_416": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_426": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_466": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_490": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_492": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_493": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_497": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_498": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_531": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_100": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_122": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_126": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_130": {
                "input": {
                    "value": "A_ST11",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_ST11[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_ST11, A_ST12) / A_ST11.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_ST11[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_ST11, A_ST12) / A_ST11.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_ST11[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_ST11, A_ST12) / A_ST11.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_ST12",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_ST12[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_ST12[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_ST12[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_211": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_215": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_219": {
                "input": {
                    "value": "A_ST11",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_ST11[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_ST11, A_ST12) / A_ST11.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_ST11[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_ST11, A_ST12) / A_ST11.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_ST11[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_ST11, A_ST12) / A_ST11.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_ST12",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_ST12[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_ST12[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_ST12[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_271": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_293": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_297": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_344": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_366": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_425": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_426": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_449": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1 + A_ST11",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_453": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_457": {
                "input": {
                    "value": "A_ST11",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_ST11[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_ST11, A_ST12) / A_ST11.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_ST11[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_ST11, A_ST12) / A_ST11.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_ST11[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_ST11, A_ST12) / A_ST11.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_ST12",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_ST12[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_ST12[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_ST12[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_526": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_425": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/agcn_c.py": {
        "torch": {
            "normal_22": {
                "mean": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv.weight",
                            "Attribute"
                        ]
                    ]
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "math.sqrt(2.0 / (n * k1 * k2 * branches))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_80": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_127": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_145": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_146": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_189": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_194": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_195": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_196": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_198": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_199": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_201": {
                "variable": {
                    "value": "self.conv_ST11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_202": {
                "variable": {
                    "value": "self.conv_ST12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_233": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_234": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_235": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_308": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_335": {
                "variable": {
                    "value": "self.data_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_person * in_channels * num_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_348": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "Name",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_352": {
                "variable": {
                    "value": "self.archi_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(10, 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_364": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.archi_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_398": {
                "variable": {
                    "value": "self.arch_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_349": {
                "mean": {
                    "value": "self.fc.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "math.sqrt(2.0 / num_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_118": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_191": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_243": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_245": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_352": {
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_398": {
                "*size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_104": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + weights[5] * A1 + weights[6] * A_T1 + weights[7] * A_ST11",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_140": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + weights[5] * A1 + weights[6] * A_T1 + weights[7] * A_ST11",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_207": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_209": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_215": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_217": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_227": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_228": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_244": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_245": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_294": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + weights[5] * A1 + weights[6] * A_T1 + weights[7] * A_ST11",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_101": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + weights[5] * A1 + weights[6] * A_T1 + weights[7] * A_ST11",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_167": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + weights[5] * A1 + weights[6] * A_T1 + weights[7] * A_ST11",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_171": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_242": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_243": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_277": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + weights[5] * A1 + weights[6] * A_T1 + weights[7] * A_ST11",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_281": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_285": {
                "input": {
                    "value": "A_ST11",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_ST11[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_ST11, A_ST12) / A_ST11.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_ST12",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_ST12[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_242": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/agcn_fusion.py": {
        "torch": {
            "normal_22": {
                "mean": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv.weight",
                            "Attribute"
                        ]
                    ]
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "math.sqrt(2.0 / (n * k1 * k2 * branches))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_65": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_94": {
                "variable": {
                    "value": "self.AvgAdpPool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_95": {
                "variable": {
                    "value": "self.MaxAdpPool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.conv_Attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_101": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_132": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_133": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_149": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_187": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_192": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_193": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_194": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_195": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_196": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_214": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_215": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_216": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_258": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_263": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_264": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_265": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_267": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_268": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_286": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_287": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_288": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_335": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_341": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_343": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_344": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_360": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_361": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_362": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_409": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_435": {
                "variable": {
                    "value": "self.data_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_person * in_channels * num_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_448": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "Name",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_482": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_class",
                    "type": "Name",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_279": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_353": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_449": {
                "mean": {
                    "value": "self.fc.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "math.sqrt(2.0 / num_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_483": {
                "mean": {
                    "value": "self.fc.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "math.sqrt(2.0 / num_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_187": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_258": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_260": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_292": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_335": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_337": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_366": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_78": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_199": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_201": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_203": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_204": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_209": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_245": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_271": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_272": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_273": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_275": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_276": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_280": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_281": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_322": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_347": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_349": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_350": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // 4",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_354": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_355": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_392": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_170": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_236": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_240": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_313": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv2(x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_317": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_387": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_292": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_366": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/agcn_search.py": {
        "torch": {
            "normal_22": {
                "mean": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv.weight",
                            "Attribute"
                        ]
                    ]
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "math.sqrt(2.0 / (n * k1 * k2 * branches))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_80": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_127": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_145": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_146": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_189": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_194": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_195": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_196": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_198": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_199": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_201": {
                "variable": {
                    "value": "self.conv_ST11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_202": {
                "variable": {
                    "value": "self.conv_ST12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_233": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_234": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_235": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_308": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_335": {
                "variable": {
                    "value": "self.data_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_person * in_channels * num_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_348": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "Name",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_349": {
                "mean": {
                    "value": "self.fc.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "math.sqrt(2.0 / num_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_118": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_191": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_243": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_245": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_104": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + weights[5] * A1 + weights[6] * A_T1 + weights[7] * A_ST11",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_140": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + weights[5] * A1 + weights[6] * A_T1 + weights[7] * A_ST11",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_207": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_209": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_215": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_217": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_227": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_228": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_244": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_245": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_294": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + weights[5] * A1 + weights[6] * A_T1 + weights[7] * A_ST11",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_101": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + weights[5] * A1 + weights[6] * A_T1 + weights[7] * A_ST11",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_167": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + weights[5] * A1 + weights[6] * A_T1 + weights[7] * A_ST11",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_171": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_242": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_243": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_277": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + A1 + A_T1",
                            "BinOp"
                        ],
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A[i] + weights[5] * A1 + weights[6] * A_T1 + weights[7] * A_ST11",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_281": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ],
                        [
                            "self.conv_T1[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "self.conv_T2[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_285": {
                "input": {
                    "value": "A_ST11",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_ST11[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_ST11, A_ST12) / A_ST11.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_ST12",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_ST12[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_242": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/agcn_srchannel.py": {
        "torch": {
            "normal_22": {
                "mean": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv.weight",
                            "Attribute"
                        ]
                    ]
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "math.sqrt(2.0 / (n * k1 * k2 * branches))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.ConvC0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.ConvC1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.ConvC2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_72": {
                "variable": {
                    "value": "y3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.ConvC3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "y4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.ConvC4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y0, weight[1] * y1, weight[2] * y2, weight[3] * y3, weight[4] * y4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_112": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.FC0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_113": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.FC1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_114": {
                "variable": {
                    "value": "y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.FC2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_115": {
                "variable": {
                    "value": "y3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.FC3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_116": {
                "variable": {
                    "value": "y4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.FC4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias4",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y0, weight[1] * y1, weight[2] * y2, weight[3] * y3, weight[4] * y4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_143": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.conv_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_149": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_150": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_165": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_166": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_204": {
                "variable": {
                    "value": "self.PA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(A.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_210": {
                "variable": {
                    "value": "self.conv_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_212": {
                "variable": {
                    "value": "self.conv_T1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_213": {
                "variable": {
                    "value": "self.conv_T2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_229": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Softmax_230": {
                "variable": {
                    "value": "self.soft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_231": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_278": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_304": {
                "variable": {
                    "value": "self.data_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_person * in_channels * num_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_321": {
                "variable": {
                    "value": "self.archi_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(11, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_331": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.archi_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_318": {
                "mean": {
                    "value": "self.fc.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "generator": {
                    "value": "math.sqrt(2.0 / num_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_145": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_204": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_206": {
                "ndarray": {
                    "value": "A.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_235": {
                "n": {
                    "value": "self.A.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_321": {
                "*size": {
                    "value": "11",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ],
                        [
                            "out_channels // coff_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_189": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_223": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_224": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_261": {
                "input": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_186": {
                "input": {
                    "value": "A1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_a[i](x).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A1, A2) / A1.size(-1))",
                            "Call"
                        ],
                        [
                            "A1 + A[i]",
                            "BinOp"
                        ],
                        [
                            "A[i] + A_T1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "A2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_b[i](x).view(N, self.inter_c * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ],
                        [
                            "x.view(N, C * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_256": {
                "input": {
                    "value": "A_T1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv_T1[i](x, weights).permute(0, 3, 1, 2).contiguous().view(N, V, self.inter_c * T)",
                            "Call"
                        ],
                        [
                            "self.soft(torch.matmul(A_T1, A_T2) / A_T1.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A_T2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_T2[i](x, weights).view(N, self.inter_c * T, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_235": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/architect.py": {
        "torch": {
            "cat_7": {
                "tensors": {
                    "value": "[x.view(-1) for x in xs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Adam_16": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[list(self.model.parameters())[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0003",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_85": {
                "variable": {
                    "value": "grads_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_90": {
                "variable": {
                    "value": "grads_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.arch_parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_25": {
                "variable": {
                    "value": "moment",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_concat(self.model.parameters()).data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "grad_26": {
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input_valid, target_valid)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ],
                        [
                            "self.model._loss(input, target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}