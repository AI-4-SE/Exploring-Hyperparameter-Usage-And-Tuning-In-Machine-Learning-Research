{
    "examples/binary_mnist_vae.py": {
        "torch": {
            "load_33": {
                "f": {
                    "value": "vae_params",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "examples/binary_mnist_vae_multiset.py": {
        "torch": {
            "load_33": {
                "f": {
                    "value": "vae_params",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "examples/torch_util.py": {
        "torch": {
            "from_numpy_17": {
                "ndarray": {
                    "value": "np.float32(arr)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/torch_vae.py": {
        "torch": {
            "manual_seed_10": {
                "seed": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_109": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('mnist', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), binariser]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('mnist', train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), binariser]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_24": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "h3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bernoulli_46": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "x_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decode(z)",
                            "Call"
                        ],
                        [
                            "self.decode(z)",
                            "Call"
                        ],
                        [
                            "self.decode(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_47": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist.log_prob(x.view(-1, 784))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_48": {
                "variable": {
                    "value": "p_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Normal(0, 1).log_prob(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_49": {
                "variable": {
                    "value": "q_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Normal(z_mu, z_std).log_prob(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_53": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_55": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "x_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decode(z)",
                            "Call"
                        ],
                        [
                            "self.decode(z)",
                            "Call"
                        ],
                        [
                            "self.decode(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "Bernoulli_65": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "x_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decode(z)",
                            "Call"
                        ],
                        [
                            "self.decode(z)",
                            "Call"
                        ],
                        [
                            "self.decode(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_67": {
                "variable": {
                    "value": "x_with_recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x_recon)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_146": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "vae_params",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_like_32": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_28": {
                "input": {
                    "value": "self.fc22(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_48": {
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_49": {
                "loc": {
                    "value": "z_mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "z_std",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Bernoulli_113": {
                "probs": {
                    "value": "pic",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "round_117": {
                "input": {
                    "value": "pic",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_145": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "vae_params",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_50": {
                "input": {
                    "value": "l + p_z - q_z",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}