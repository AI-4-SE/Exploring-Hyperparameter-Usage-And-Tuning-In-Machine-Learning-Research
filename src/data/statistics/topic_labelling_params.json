{
    "preprocess_wiki.py": {
        "sklearn": {
            "train_test_split_217": {
                "variable": {
                    "value": "(x_tr, x_val, y_tr, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.array(df['sents'])",
                    "type": "Call",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "np.array(df['titles'])",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_220": {
                "variable": {
                    "value": "(x_tr, x_test, y_tr, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_tr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_tr",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Tokenizer_225": {
                "variable": {
                    "value": "x_tokenizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tokenizer_233": {
                "variable": {
                    "value": "x_tokenizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_words": {
                    "value": "tot_cnt - rare_cnt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequences_242": {
                "variable": {
                    "value": "x_tr",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "x_tr_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_tokenizer.texts_to_sequences(x_tr)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_sent_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "30",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequences_243": {
                "variable": {
                    "value": "x_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "x_val_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_tokenizer.texts_to_sequences(x_val)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_sent_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "30",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequences_244": {
                "variable": {
                    "value": "x_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "x_test_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_tokenizer.texts_to_sequences(x_test)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_sent_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "30",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tokenizer_250": {
                "variable": {
                    "value": "y_tokenizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tokenizer_261": {
                "variable": {
                    "value": "y_tokenizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_words": {
                    "value": "tot_cnt - rare_cnt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_sequences_271": {
                "variable": {
                    "value": "y_tr",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "y_tr_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_tokenizer.texts_to_sequences(y_tr)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_title_len + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequences_272": {
                "variable": {
                    "value": "y_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "y_val_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_tokenizer.texts_to_sequences(y_val)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_title_len + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_sequences_273": {
                "variable": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "y_test_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_tokenizer.texts_to_sequences(y_test)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_title_len + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "train_tf.py": {
        "sklearn": {
            "shuffle_226": {
                "variable": {
                    "value": "(x_tr, y_tr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_tr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_tr",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_227": {
                "variable": {
                    "value": "(x_val, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "shuffle_262": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "BUFFER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(x_tr)",
                            "Call"
                        ]
                    ]
                }
            },
            "shuffle_265": {
                "variable": {
                    "value": "dataset_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "BUFFER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(x_tr)",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseCategoricalCrossentropy_294": {
                "variable": {
                    "value": "loss_object",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logical_not_60": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.equal(real, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_63": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.logical_not(tf.math.equal(real, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=loss_.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "loss_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_75": {
                "variable": {
                    "value": "dec_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[y_tokenizer.word_index['sostok']] * BATCH_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Checkpoint_305": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_optimizer(args.optimizer, args.learning_rate, args.latent_dim, args.schedule_flag)",
                            "Call"
                        ]
                    ]
                },
                "encoder": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_archi.Encoder_bigru_attention(vocab_inp_size, embedding_dim, latent_dim, BATCH_SIZE, x_tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "decoder": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_archi.Decoder_bigru_attention(vocab_tar_size, embedding_dim, latent_dim, BATCH_SIZE, y_tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Checkpoint_314": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_optimizer(args.optimizer, args.learning_rate, args.latent_dim, args.schedule_flag)",
                            "Call"
                        ]
                    ]
                },
                "encoder": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_archi.Encoder_bigru_attention(vocab_inp_size, embedding_dim, latent_dim, BATCH_SIZE, x_tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "decoder": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_archi.Decoder_bigru_attention(vocab_tar_size, embedding_dim, latent_dim, BATCH_SIZE, y_tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_gpu_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_built_with_cuda_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_46": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1.0, 2.0, 3.0, 4.0, 5.0, 6.0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_47": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1.0, 2.0, 3.0, 4.0, 5.0, 6.0]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_66": {
                "input_tensor": {
                    "value": "loss_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loss_object(real, pred)",
                            "Call"
                        ],
                        [
                            "loss_ * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_80": {
                "variable": {
                    "value": "dec_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targ[:, t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_91": {
                "variable": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_96": {
                "variable": {
                    "value": "arg1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RMSprop_120": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_choice",
                    "type": "Variable",
                    "possible_values": []
                },
                "rho": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_337": {
                "variable": {
                    "value": "dec_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[y_tokenizer.word_index['sostok']] * BATCH_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_45": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_60": {
                "x": {
                    "value": "real",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSprop_110": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CustomSchedule(latent_dims)",
                            "Call"
                        ]
                    ]
                },
                "rho": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_124": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_choice",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_345": {
                "variable": {
                    "value": "dec_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targ[:, t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rsqrt_99": {
                "x": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_99": {
                "x": {
                    "value": "arg1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.rsqrt(step)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "arg2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "step * self.warmup_steps ** (-1.5)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CustomSchedule(latent_dims)",
                            "Call"
                        ]
                    ]
                },
                "beta_1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model_archi_tf.py": {
        "tensorflow": {
            "Embedding_20": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_21": {
                "variable": {
                    "value": "self.forward_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.enc_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "recurrent_initializer": {
                    "value": "glorot_uniform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GRU_25": {
                "variable": {
                    "value": "self.back_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.enc_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "go_backwards": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "recurrent_initializer": {
                    "value": "glorot_uniform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_38": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[state_f, state_b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_41": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_f, output_b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_59": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_60": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dec_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "recurrent_initializer": {
                    "value": "glorot_uniform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_65": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_77": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(context_vector, 1), x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([output_f, output_b], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, (-1, output.shape[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, output.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_94": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dense_95": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dense_96": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_102": {
                "variable": {
                    "value": "hidden_with_time_axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.V(tf.nn.tanh(self.W1(values) + self.W2(hidden_with_time_axis)))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "variable": {
                    "value": "context_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "context_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_weights * values",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(context_vector, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "shape": {
                    "value": "(self.batch_sz, self.enc_units)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tanh_107": {
                "x": {
                    "value": "self.W1(values) + self.W2(hidden_with_time_axis)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_77": {
                "input": {
                    "value": "context_vector",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attention_weights * values",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(context_vector, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "support_methods.py": {
        "tensorflow": {
            "cast_43": {
                "variable": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_48": {
                "variable": {
                    "value": "arg1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RMSprop_59": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_choice",
                    "type": "Variable",
                    "possible_values": []
                },
                "rho": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_63": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_choice",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rsqrt_51": {
                "x": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_51": {
                "x": {
                    "value": "arg1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.rsqrt(step)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "arg2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "step * self.warmup_steps ** (-1.5)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "test_tf.py": {
        "tensorflow": {
            "SparseCategoricalCrossentropy_211": {
                "variable": {
                    "value": "loss_object",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Checkpoint_221": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sup_methods.get_optimizer(args.optimizer, args.learning_rate, args.latent_dim)",
                            "Call"
                        ]
                    ]
                },
                "encoder": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_archi.Encoder_bigru_attention(vocab_inp_size, embedding_dim, latent_dim, BATCH_SIZE, x_tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "decoder": {
                    "value": "decoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_archi.Decoder_bigru_attention(vocab_tar_size, embedding_dim, latent_dim, BATCH_SIZE, y_tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequences_37": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "30 + 2",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_40": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x_tokenizer.word_index[i] for i in sentence.split()]",
                            "ListComp"
                        ],
                        [
                            "tf.keras.preprocessing.sequence.pad_sequences([inputs], maxlen=max_text_len, padding='post')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_51": {
                "variable": {
                    "value": "dec_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[y_tokenizer.word_index['sostok']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_63": {
                "variable": {
                    "value": "predicted_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_71": {
                "variable": {
                    "value": "dec_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[predicted_id]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequences_182": {
                "variable": {
                    "value": "x_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "x_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load('data/' + data_name + '/x_test.npy')",
                            "Call"
                        ],
                        [
                            "tf.keras.preprocessing.sequence.pad_sequences(x_test, maxlen=max_text_len, padding='post')",
                            "Call"
                        ],
                        [
                            "x_test[:args.sub_set]",
                            "Subscript"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_text_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "30 + 2",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "shape": {
                    "value": "(1, latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(attention_weights, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}