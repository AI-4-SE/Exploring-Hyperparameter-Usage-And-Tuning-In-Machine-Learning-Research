{
    "QGNN_pytorch/train_graph_UnSup.py": {
        "sklearn": {
            "LogisticRegression_167": {
                "variable": {
                    "value": "cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_136": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "num_batches_per_epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int((len(graphs) - 1) / args.batch_size) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_6": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "Adj_block_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Adj_block_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate(edge_mat_list, 1)",
                            "Call"
                        ],
                        [
                            "np.concatenate([Adj_block_idx, self_loop_edge], 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Adj_block_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "Adj_block_elem",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Adj_block_elem",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones(Adj_block_idx.shape[1])",
                            "Call"
                        ],
                        [
                            "np.concatenate([Adj_block_elem, elem], 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Adj_block_elem)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_89": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "idx_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "idx_nodes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[torch.where(graph_indices == i)[0] for i in selected_graph_idx]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(idx_nodes)",
                            "Call"
                        ],
                        [
                            "get_idx_nodes(selected_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_109": {
                "variable": {
                    "value": "X_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_concat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate([graph.node_features for graph in batch_graph], 0)",
                            "Call"
                        ],
                        [
                            "np.tile(X_concat, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_concat).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_21": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_145": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(Adj_block, X_concat, idx_nodes)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__147": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_99": {
                "condition": {
                    "value": "graph_indices == i",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "QGNN_pytorch/utils_graph_cls.py": {
        "sklearn": {
            "StratifiedKFold_132": {
                "variable": {
                    "value": "skf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StratifiedKFold_148": {
                "variable": {
                    "value": "skf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "QGNN_tf/train_graph_UnSup.py": {
        "sklearn": {
            "LogisticRegression_193": {
                "variable": {
                    "value": "cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_random_seed_6": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_128": {
                "variable": {
                    "value": "session_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "args.allow_soft_placement",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "args.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_130": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_conf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto(allow_soft_placement=args.allow_soft_placement, log_device_placement=args.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_132": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_141": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_156": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "QGNN_tf/utils_graph_cls.py": {
        "sklearn": {
            "StratifiedKFold_132": {
                "variable": {
                    "value": "skf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StratifiedKFold_148": {
                "variable": {
                    "value": "skf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "QGNN_tf/inits.py": {
        "tensorflow": {
            "zeros_20": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_26": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_50": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_8": {
                "initial_value": {
                    "value": "initial",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "kwargs.get('name')",
                            "Call"
                        ],
                        [
                            "layer + '_' + str(get_layer_uid(layer))",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_15": {
                "initial_value": {
                    "value": "initial",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "kwargs.get('name')",
                            "Call"
                        ],
                        [
                            "layer + '_' + str(get_layer_uid(layer))",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_21": {
                "initial_value": {
                    "value": "initial",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "kwargs.get('name')",
                            "Call"
                        ],
                        [
                            "layer + '_' + str(get_layer_uid(layer))",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_27": {
                "initial_value": {
                    "value": "initial",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "kwargs.get('name')",
                            "Call"
                        ],
                        [
                            "layer + '_' + str(get_layer_uid(layer))",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "moments_114": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_115": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_116": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_50": {
                "x": {
                    "value": "random_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + tf.compat.v1.random_uniform(noise_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "kwargs.get('name')",
                            "Call"
                        ],
                        [
                            "layer + '_' + str(get_layer_uid(layer))",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_96": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_106": {
                "name": {
                    "value": "self.name + '/vars/' + var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vars[var]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_98": {
                "name": {
                    "value": "self.name + '/inputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "histogram_101": {
                "name": {
                    "value": "self.name + '/outputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "self._call(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "QGNN_tf/layers.py": {
        "tensorflow": {
            "split_10": {
                "variable": {
                    "value": "(r, i, j, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "glorot([input_dim, dim], name='quaternion_weights_' + name)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_11": {
                "variable": {
                    "value": "r2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[r, -i, -j, -k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_12": {
                "variable": {
                    "value": "i2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[i, r, -k, j]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_13": {
                "variable": {
                    "value": "j2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[j, k, r, -i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_14": {
                "variable": {
                    "value": "k2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[k, -j, i, r]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_15": {
                "variable": {
                    "value": "hamilton",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[r2, i2, j2, k2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "sparse_dropout(x, 1 - self.dropout, self.num_features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "hamilton",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([r2, i2, j2, k2], axis=1)",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(kernel)",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "self.vars['weights']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "'Q{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_67": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "sparse_dropout(x, 1 - self.dropout, self.num_features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "QGNN_tf/metrics.py": {
        "tensorflow": {
            "softmax_cross_entropy_with_logits_v2_7": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_8": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_16": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(preds, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_17": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(preds, 1), tf.argmax(labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_18": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_9": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_11": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.compat.v1.nn.softmax_cross_entropy_with_logits_v2(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_19": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_21": {
                "input_tensor": {
                    "value": "accuracy_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(correct_prediction, tf.float32)",
                            "Call"
                        ],
                        [
                            "accuracy_all * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_16": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "QGNN_tf/model_graph_Sup.py": {
        "tensorflow": {
            "sparse_placeholder_8": {
                "variable": {
                    "value": "self.Adj_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Adj_block",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_placeholder_9": {
                "variable": {
                    "value": "self.X_concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, feature_dim_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X_concat",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_placeholder_10": {
                "variable": {
                    "value": "self.graph_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "graph_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "self.one_hot_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "one_hot_labels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_12": {
                "variable": {
                    "value": "self.num_features_nonzero",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "num_features_nonzero",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_49": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_60": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.compat.v1.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_40": {
                "variable": {
                    "value": "self.graph_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.graph_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_52": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_smoothing(self.one_hot_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_53": {
                "variable": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.compat.v1.nn.softmax_cross_entropy_with_logits_v2(logits=self.scores, labels=label_smoothing(self.one_hot_labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_57": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.one_hot_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_58": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, 'float')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "info_61": {
                "msg": {
                    "value": "Seting up the main structure",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([num_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_51": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_56": {
                "name": {
                    "value": "accuracy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "'layer_%d' % idx_layer",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "xw_plus_b_46": {
                "x": {
                    "value": "self.graph_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "glorot([hidden_size, num_classes], name='W_layer_%d' % idx_layer)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([num_classes]))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_57": {
                "input": {
                    "value": "self.one_hot_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_58": {
                "x": {
                    "value": "correct_predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(self.predictions, tf.argmax(self.one_hot_labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "shape": {
                    "value": "[num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "QGNN_tf/model_graph_UnSup.py": {
        "tensorflow": {
            "sparse_placeholder_8": {
                "variable": {
                    "value": "self.Adj_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Adj_block",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_placeholder_9": {
                "variable": {
                    "value": "self.X_concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, feature_dim_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X_concat",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_10": {
                "variable": {
                    "value": "self.num_features_nonzero",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "num_features_nonzero",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_12": {
                "variable": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_40": {
                "variable": {
                    "value": "self.output_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.output_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_41": {
                "variable": {
                    "value": "self.output_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.output_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_47": {
                "variable": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sampled_softmax_loss(weights=self.embedding_matrix, biases=self.softmax_biases, inputs=self.output_vectors, labels=self.input_y, num_sampled=num_sampled, num_classes=vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_51": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "self.softmax_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([vocab_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_52": {
                "msg": {
                    "value": "Seting up the main structure",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_43": {
                "name": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sampled_softmax_loss_48": {
                "weights": {
                    "value": "self.embedding_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "biases": {
                    "value": "self.softmax_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.output_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.input_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_sampled": {
                    "value": "num_sampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_45": {
                "shape": {
                    "value": "[vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "QGNN_tf/train_graph_Sup.py": {
        "tensorflow": {
            "set_random_seed_6": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_125": {
                "variable": {
                    "value": "session_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "args.allow_soft_placement",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "args.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_127": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_conf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto(allow_soft_placement=args.allow_soft_placement, log_device_placement=args.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_129": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_137": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_152": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "QGNN_tf/train_node_cls.py": {
        "tensorflow": {
            "Session_60": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_10": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "123",
                            "Constant"
                        ]
                    ]
                }
            },
            "disable_eager_execution_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_placeholder_48": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.constant(adj[2], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_placeholder_49": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.constant(features[2], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, y_train.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_52": {
                "input": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_48": {
                "value": {
                    "value": "adj[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_49": {
                "value": {
                    "value": "features[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "QGNN_pytorch/log_uniform/test.py": {
        "torch": {
            "Tensor_10": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multinomial_32": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_uniform_distribution(N)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8192",
                            "Constant"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_37": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_uniform_distribution(N)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "remainder_12": {
                "input": {
                    "value": "value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(x * log_N).long() - 1",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "793471",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_19": {
                "ndarray": {
                    "value": "distribution",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray([log_uniform(idx, range_max) for idx in range(range_max)])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_11": {
                "input": {
                    "value": "x * log_N",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "QGNN_pytorch/model_graph_Sup.py": {
        "torch": {
            "ModuleList_15": {
                "variable": {
                    "value": "self.q4gnnlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_22": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_23": {
                "variable": {
                    "value": "self.dropouts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_51": {
                "variable": {
                    "value": "true_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "label_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Size((true_labels.size(0), classes))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "true_labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "QGNN_pytorch/model_graph_UnSup.py": {
        "torch": {
            "ModuleList_19": {
                "variable": {
                    "value": "self.q4gnnlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dropouts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "output_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_vectors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output_vectors, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropouts(output_vectors)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "QGNN_pytorch/q4gnn.py": {
        "torch": {
            "split_14": {
                "variable": {
                    "value": "(r, i, j, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[dim, dim, dim, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_15": {
                "variable": {
                    "value": "r2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, -i, -j, -k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_16": {
                "variable": {
                    "value": "i2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i, r, -k, j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_17": {
                "variable": {
                    "value": "j2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[j, k, r, -i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_18": {
                "variable": {
                    "value": "k2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, -j, i, r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_19": {
                "variable": {
                    "value": "hamilton",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r2, i2, j2, k2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_92": {
                "variable": {
                    "value": "(C, D)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[dim, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_95": {
                "variable": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A_hamilton",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_quaternion_mul(A)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_96": {
                "variable": {
                    "value": "AD",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A_hamilton",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_quaternion_mul(A)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_97": {
                "variable": {
                    "value": "BC",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "B_hamilton",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_quaternion_mul(B)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.in_features // 4, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_40": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "hamilton",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([r2, i2, j2, k2], dim=1)",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ],
                        [
                            "hamilton.double()",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_54": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_99": {
                "tensors": {
                    "value": "[AC, AD_plus_BC]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.in_features // 8, self.out_features // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.in_features // 8, self.out_features // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_113": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_133": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.in_features // 4, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_147": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.spmm(adj, input)",
                            "Call"
                        ],
                        [
                            "torch.spmm(adj, new_input)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "hamilton",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([r2, i2, j2, k2], dim=1)",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ],
                        [
                            "hamilton.double()",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.in_features // 4, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.in_features, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_75": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dropout(input)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "hamilton",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([r2, i2, j2, k2], dim=1)",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ],
                        [
                            "hamilton.double()",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_77": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dropout(input)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "QGNN_pytorch/sampled_softmax.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(ntokens, nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_45": {
                "variable": {
                    "value": "true_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_48": {
                "variable": {
                    "value": "sample_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "sample_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(sample_ids)).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_51": {
                "variable": {
                    "value": "true_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.mul(inputs, true_weights), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_52": {
                "variable": {
                    "value": "sample_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(inputs, torch.t(sample_weights))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_51": {
                "input": {
                    "value": "torch.mul(inputs, true_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_52": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(sample_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_54": {
                "input": {
                    "value": "true_logits / torch.sum(sample_logits, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_51": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "true_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(self.weight, 0, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_52": {
                "input": {
                    "value": "sample_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(self.weight, 0, sample_ids).double()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_54": {
                "input": {
                    "value": "sample_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(torch.matmul(inputs, torch.t(sample_weights)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "QGNN_pytorch/train_graph_Sup.py": {
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_133": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "num_batches_per_epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int((len(train_graphs) - 1) / args.batch_size) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_6": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "Adj_block_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Adj_block_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate(edge_mat_list, 1)",
                            "Call"
                        ],
                        [
                            "np.concatenate([Adj_block_idx, self_loop_edge], 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Adj_block_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "Adj_block_elem",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Adj_block_elem",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.ones(Adj_block_idx.shape[1])",
                            "Call"
                        ],
                        [
                            "np.concatenate([Adj_block_elem, elem], 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Adj_block_elem)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_88": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "X_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_concat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate([graph.node_features for graph in batch_graph], 0)",
                            "Call"
                        ],
                        [
                            "np.tile(X_concat, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_concat).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "graph_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "graph_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array([graph.label for graph in batch_graph])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(graph_labels).to(device)",
                            "Call"
                        ],
                        [
                            "label_smoothing(graph_labels, num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "LogSoftmax_127": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "prediction_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prediction_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(prediction_output, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_all_19": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_128": {
                "input": {
                    "value": "torch.sum(-soft_targets * logsoftmax(pred), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "-soft_targets * logsoftmax(pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__146": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "QGNN_pytorch/train_node_cls.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(labels).to(device)",
                            "Call"
                        ],
                        [
                            "torch.where(labels == 1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_39": {
                "variable": {
                    "value": "idx_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.from_numpy(train_mask) == True",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_40": {
                "variable": {
                    "value": "idx_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.from_numpy(val_mask) == True",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_41": {
                "variable": {
                    "value": "idx_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.from_numpy(test_mask) == True",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Adam_90": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_98": {
                "variable": {
                    "value": "loss_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_108": {
                "variable": {
                    "value": "loss_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_120": {
                "variable": {
                    "value": "loss_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_all_16": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_38": {
                "condition": {
                    "value": "labels == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "ndarray": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "quaternion_preprocess_features(features)",
                            "Call"
                        ],
                        [
                            "r_mat_inv.dot(features)",
                            "Call"
                        ],
                        [
                            "features.todense()",
                            "Call"
                        ],
                        [
                            "np.tile(features, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_39": {
                "ndarray": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "ndarray": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "ndarray": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_86": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.q4gnn1(x, adj)",
                            "Call"
                        ],
                        [
                            "self.q4gnn2(x, adj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "SimQGNN/main_SimQGNN.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_11": {
                "seed": {
                    "value": "1337",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_14": {
                "seed": {
                    "value": "1337",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_117": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "e1_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "r_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "e2_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sort_77": {
                "variable": {
                    "value": "(sort_values, sort_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.forward(e1_idx, r_idx, lst_indexes).detach()",
                            "Call"
                        ],
                        [
                            "model.forward(e1_idx, r_idx, lst_ents)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "e1_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "r_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__145": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "SimQGNN/models_SimQGNN.py": {
        "torch": {
            "split_102": {
                "variable": {
                    "value": "(r, i, j, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "quaternion",
                    "type": "Call",
                    "possible_values": [
                        [
                            "quaternion.reshape(-1, 4, size)",
                            "Call"
                        ],
                        [
                            "quaternion / torch.sqrt(torch.sum(quaternion ** 2, 1, True))",
                            "BinOp"
                        ],
                        [
                            "quaternion.reshape(-1, 4 * size)",
                            "Call"
                        ],
                        [
                            "quaternion.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "quaternion.view(-1, 4, size)",
                            "Call"
                        ],
                        [
                            "torch.sum(quaternion, 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "size",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "quaternion.size(split_dim) // 4",
                            "BinOp"
                        ],
                        [
                            "quaternion.size(1) // 4",
                            "BinOp"
                        ],
                        [
                            "quaternion.size(1) // 4",
                            "BinOp"
                        ],
                        [
                            "quaternion.size(1) // 4",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "r2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, -i, -j, -k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "i2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i, r, -k, j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "j2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[j, k, r, -i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "k2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, -j, i, r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_112": {
                "variable": {
                    "value": "quaternion",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "quaternion",
                    "type": "Call",
                    "possible_values": [
                        [
                            "quaternion.reshape(-1, 4, size)",
                            "Call"
                        ],
                        [
                            "quaternion / torch.sqrt(torch.sum(quaternion ** 2, 1, True))",
                            "BinOp"
                        ],
                        [
                            "quaternion.reshape(-1, 4 * size)",
                            "Call"
                        ],
                        [
                            "quaternion.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "quaternion.view(-1, 4, size)",
                            "Call"
                        ],
                        [
                            "torch.sum(quaternion, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_127": {
                "variable": {
                    "value": "(r, i, j, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "quaternion",
                    "type": "Call",
                    "possible_values": [
                        [
                            "quaternion.reshape(-1, 4, size)",
                            "Call"
                        ],
                        [
                            "quaternion / torch.sqrt(torch.sum(quaternion ** 2, 1, True))",
                            "BinOp"
                        ],
                        [
                            "quaternion.reshape(-1, 4 * size)",
                            "Call"
                        ],
                        [
                            "quaternion.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "quaternion.view(-1, 4, size)",
                            "Call"
                        ],
                        [
                            "torch.sum(quaternion, 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "size",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "quaternion.size(split_dim) // 4",
                            "BinOp"
                        ],
                        [
                            "quaternion.size(1) // 4",
                            "BinOp"
                        ],
                        [
                            "quaternion.size(1) // 4",
                            "BinOp"
                        ],
                        [
                            "quaternion.size(1) // 4",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_134": {
                "variable": {
                    "value": "(r, i, j, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[dim, dim, dim, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "r2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, -i, -j, -k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "i2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i, r, -k, j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "j2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[j, k, r, -i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "k2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, -j, i, r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "hamilton",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r2, i2, j2, k2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_25": {
                "variable": {
                    "value": "self.entity_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_entities",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_26": {
                "variable": {
                    "value": "self.relation_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_relations",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hid_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.lst_gnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_44": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hid_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "variable": {
                    "value": "self.hidden_dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_46": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_55": {
                "variable": {
                    "value": "hrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h * r",
                            "BinOp"
                        ],
                        [
                            "self.bn1(hr)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(hr)",
                            "Call"
                        ],
                        [
                            "h * r",
                            "BinOp"
                        ],
                        [
                            "self.bn1(hr)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(hr)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "X.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_64": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hrt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(hr, X.t())",
                            "Call"
                        ],
                        [
                            "self.score(e1_idx, r_idx, X)",
                            "Call"
                        ],
                        [
                            "torch.mm(hr, X.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_71": {
                "variable": {
                    "value": "self.entity_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_entities",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_72": {
                "variable": {
                    "value": "self.relation_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_relations",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_75": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "variable": {
                    "value": "self.hidden_dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_77": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_86": {
                "variable": {
                    "value": "hrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h * r",
                            "BinOp"
                        ],
                        [
                            "self.bn1(hr)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(hr)",
                            "Call"
                        ],
                        [
                            "h * r",
                            "BinOp"
                        ],
                        [
                            "self.bn1(hr)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(hr)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "X.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_87": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hrt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(hr, X.t())",
                            "Call"
                        ],
                        [
                            "self.score(e1_idx, r_idx, X)",
                            "Call"
                        ],
                        [
                            "torch.mm(hr, X.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "[qp_r, qp_i, qp_j, qp_k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_150": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.in_features // 4, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_152": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_160": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "hamilton",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([r2, i2, j2, k2], dim=1)",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_171": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_178": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_187": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_94": {
                "input": {
                    "value": "torch.sum(quaternion ** 2, 1, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_128": {
                "input": {
                    "value": "i ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "quaternion ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "SimQGNN/utils_KGE.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_12": {
                "seed": {
                    "value": "1337",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_30": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_15": {
                "seed": {
                    "value": "1337",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TextQGNN/model_TextQGNN.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "split_14": {
                "variable": {
                    "value": "(r, i, j, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[dim, dim, dim, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_15": {
                "variable": {
                    "value": "r2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, -i, -j, -k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_16": {
                "variable": {
                    "value": "i2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i, r, -k, j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_17": {
                "variable": {
                    "value": "j2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[j, k, r, -i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_18": {
                "variable": {
                    "value": "k2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, -j, i, r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_19": {
                "variable": {
                    "value": "hamilton",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r2, i2, j2, k2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.dropout_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.soft_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.emb_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(feature_dim_size // 4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.z0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size // 4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.z1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size // 4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.r0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size // 4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.r1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size // 4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size // 4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.h1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size // 4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size // 4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_57": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(torch.matmul(x, make_quaternion_mul(self.ln)))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "self.emb_encode(x)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(self.ln(x))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_59": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "make_quaternion_mul(self.z0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(torch.matmul(x, make_quaternion_mul(self.ln)))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "self.emb_encode(x)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(self.ln(x))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "make_quaternion_mul(self.z1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z0 + z1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "r0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "make_quaternion_mul(self.r0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "variable": {
                    "value": "r1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(torch.matmul(x, make_quaternion_mul(self.ln)))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "self.emb_encode(x)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(self.ln(x))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "make_quaternion_mul(self.r1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_65": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r0 + r1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "make_quaternion_mul(self.h0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_68": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "make_quaternion_mul(self.h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(torch.matmul(x, make_quaternion_mul(self.ln)))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "self.emb_encode(x)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(self.ln(x))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "make_quaternion_mul(self.emb_encode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "soft_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.soft_att(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.emb_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_dim_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_99": {
                "variable": {
                    "value": "self.dropout_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.z0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.z1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.r0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.r1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.h1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.soft_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_109": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_112": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(torch.matmul(x, make_quaternion_mul(self.ln)))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "self.emb_encode(x)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(self.ln(x))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_116": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z0 + z1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_118": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.r0(a) + self.r1(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_132": {
                "variable": {
                    "value": "soft_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.soft_att(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_82": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(torch.matmul(x, make_quaternion_mul(self.ln)))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "self.emb_encode(x)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(self.ln(x))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "make_quaternion_mul(self.ln)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(torch.matmul(x, make_quaternion_mul(self.ln)))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "self.emb_encode(x)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(self.ln(x))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "amax_85": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(torch.matmul(x, make_quaternion_mul(self.ln)))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "self.emb_encode(x)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(self.ln(x))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_136": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(torch.matmul(x, make_quaternion_mul(self.ln)))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "self.emb_encode(x)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(self.ln(x))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "amax_136": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(torch.matmul(x, make_quaternion_mul(self.ln)))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "self.emb_encode(x)",
                            "Call"
                        ],
                        [
                            "x * mask",
                            "BinOp"
                        ],
                        [
                            "self.gatedGNN(x, adj) * mask",
                            "BinOp"
                        ],
                        [
                            "self.act(self.ln(x))",
                            "Call"
                        ],
                        [
                            "soft_att * x * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "TextQGNN/train_TextQGNN.py": {
        "torch": {
            "device_16": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_62": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_65": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_66": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_68": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "num_batches_per_epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int((train_y.shape[0] - 1) / args.batch_size) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_6": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_64": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "GatedQGNN(feature_dim_size=feature_dim_size, hidden_size=args.hidden_size, num_steps=args.num_GNN_layers, num_classes=num_classes, dropout=args.dropout).to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tmp_y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__85": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "ndarray": {
                    "value": "train_feature[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "ndarray": {
                    "value": "train_adj[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "ndarray": {
                    "value": "train_mask[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "ndarray": {
                    "value": "train_y[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "ndarray": {
                    "value": "tmp_feature",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "ndarray": {
                    "value": "tmp_adj",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "ndarray": {
                    "value": "tmp_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "q4gnn.py": {
        "torch": {
            "split_14": {
                "variable": {
                    "value": "(r, i, j, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[dim, dim, dim, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_15": {
                "variable": {
                    "value": "r2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r, -i, -j, -k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_16": {
                "variable": {
                    "value": "i2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i, r, -k, j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_17": {
                "variable": {
                    "value": "j2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[j, k, r, -i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_18": {
                "variable": {
                    "value": "k2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, -j, i, r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_19": {
                "variable": {
                    "value": "hamilton",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r2, i2, j2, k2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_144": {
                "variable": {
                    "value": "(C, D)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[dim, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_147": {
                "variable": {
                    "value": "AC",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A_hamilton",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_quaternion_mul(A)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_148": {
                "variable": {
                    "value": "AD",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A_hamilton",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_quaternion_mul(A)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_149": {
                "variable": {
                    "value": "BC",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "B_hamilton",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_quaternion_mul(B)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_29": {
                "variable": {
                    "value": "self.dropout_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.emb_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(feature_dim_size // 4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.z0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size // 4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.z1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size // 4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.r0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size // 4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.r1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size // 4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size // 4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.h1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size // 4, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "self.gatedGNN(x, adj)",
                            "Call"
                        ],
                        [
                            "self.dropout(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "make_quaternion_mul(self.z0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "self.gatedGNN(x, adj)",
                            "Call"
                        ],
                        [
                            "self.dropout(input)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "make_quaternion_mul(self.z1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z0 + z1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_57": {
                "variable": {
                    "value": "r0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "make_quaternion_mul(self.r0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "variable": {
                    "value": "r1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "self.gatedGNN(x, adj)",
                            "Call"
                        ],
                        [
                            "self.dropout(input)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "make_quaternion_mul(self.r1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_59": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r0 + r1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "make_quaternion_mul(self.h0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "make_quaternion_mul(self.h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "self.gatedGNN(x, adj)",
                            "Call"
                        ],
                        [
                            "self.dropout(input)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "make_quaternion_mul(self.emb_encode)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.in_features // 4, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_84": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_92": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "hamilton",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([r2, i2, j2, k2], dim=1)",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ],
                        [
                            "hamilton.double()",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_105": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_106": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_151": {
                "tensors": {
                    "value": "[AC, AD_plus_BC]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_161": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.in_features // 8, self.out_features // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_162": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.in_features // 8, self.out_features // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_165": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.in_features // 4, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_199": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.spmm(adj, input)",
                            "Call"
                        ],
                        [
                            "torch.spmm(adj, new_input)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "hamilton",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([r2, i2, j2, k2], dim=1)",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ],
                        [
                            "hamilton.double()",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.in_features // 4, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.in_features, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_127": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "self.gatedGNN(x, adj)",
                            "Call"
                        ],
                        [
                            "self.dropout(input)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "hamilton",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([r2, i2, j2, k2], dim=1)",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ],
                        [
                            "hamilton.double()",
                            "Call"
                        ],
                        [
                            "make_quaternion_mul(self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_129": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.dropout_encode(x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, make_quaternion_mul(self.emb_encode))",
                            "Call"
                        ],
                        [
                            "self.gatedGNN(x, adj)",
                            "Call"
                        ],
                        [
                            "self.dropout(input)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}