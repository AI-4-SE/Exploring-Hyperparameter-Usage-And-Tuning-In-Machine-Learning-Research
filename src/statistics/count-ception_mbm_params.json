{
    "model.py": {
        "torch": {
            "ConvBlock_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_14": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_chan",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_chan",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "ksize",
                        "possible_values": [
                            [
                                "3",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "pad",
                        "possible_values": [
                            [
                                "0",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "self.activation": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "nn.LeakyReLU()",
                            "MethodArgument"
                        ],
                        [
                            "nn.LeakyReLU()",
                            "MethodArgument"
                        ]
                    ]
                },
                "BatchNorm2d_16": {
                    "variable": {
                        "value": "self.batch_norm",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "out_chan",
                        "possible_values": []
                    }
                }
            },
            "SimpleBlock_22": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ModelCountception_35": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.inplanes": {
                    "value": "inplanes",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.outplanes": {
                    "value": "outplanes",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "LeakyReLU_41": {
                    "variable": {
                        "value": "self.activation",
                        "possible_values": []
                    },
                    "negative_slope": {
                        "value": "0.01",
                        "possible_values": []
                    }
                },
                "LeakyReLU_42": {
                    "variable": {
                        "value": "self.final_activation",
                        "possible_values": []
                    },
                    "negative_slope": {
                        "value": "0.01",
                        "possible_values": []
                    }
                },
                "self.use_logits": {
                    "value": "use_logits",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.logits_per_output": {
                    "value": "logits_per_output",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.debug": {
                    "value": "debug",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_31": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[conv1_out, conv2_out]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_12": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LeakyReLU_23": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.conv6",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvBlock(64, logits_per_output, ksize=1, activation=self.final_activation) for _ in range(outplanes)]",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_24": {
                "variable": {
                    "value": "test_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "possible_values": [
                        [
                            "MBM(pkl_file=args.pkl_file, transform=transforms.Compose([transforms.ToTensor()]), mode='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "L1Loss_26": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_31": {
                "variable": {
                    "value": "from_before",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_24": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "MBM(pkl_file=args.pkl_file, transform=transforms.Compose([transforms.ToTensor()]), mode='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "DataLoader_27": {
                "variable": {
                    "value": "val_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "possible_values": [
                        [
                            "MBM(pkl_file=args.pkl_file, transform=transforms.Compose([transforms.ToTensor()]), mode='valid')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "L1Loss_29": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_31": {
                "variable": {
                    "value": "solver",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_56": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{'model_weights': model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "'checkpoints/after_{0}_epochs.model'.format(epoch)",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataset.py": {
        "torch": {
            "MBM_8": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.transform": {
                    "value": "transform",
                    "possible_values": []
                },
                "self.mode": {
                    "value": "mode",
                    "possible_values": [
                        [
                            "'train'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "label",
                    "possible_values": [
                        [
                            "self.y[index]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}