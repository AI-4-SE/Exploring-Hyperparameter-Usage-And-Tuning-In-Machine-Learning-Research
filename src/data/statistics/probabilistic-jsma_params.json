{
    "attacks/generate_attacks.py": {
        "tensorflow": {
            "placeholder_73": {
                "variable": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + x_set.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_74": {
                "variable": {
                    "value": "y_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_124": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + x_set.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_127": {
                "variable": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + y_set.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_256": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_258": {
                "variable": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + x_set.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_344": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_346": {
                "variable": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + x_set.shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_362": {
                "variable": {
                    "value": "model_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_363": {
                "variable": {
                    "value": "oracle_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "oracle(x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "attacks/tf_jsma.py": {
        "tensorflow": {
            "constant_46": {
                "variable": {
                    "value": "zero_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((nb_features, nb_features), int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_113": {
                "variable": {
                    "value": "(x_adv, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[x, y, search_domain, 0, True]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x < clip_max, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x > clip_min, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_60": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(x_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_61": {
                "variable": {
                    "value": "preds_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_jacobian(logits, x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_classes, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_64": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(logits, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.transpose(derivatives, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(y_in, perm=(1, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nb_classes, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_67": {
                "variable": {
                    "value": "other_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(target_class, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_69": {
                "variable": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "derivatives * target_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "variable": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "derivatives * other_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_88": {
                "variable": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(scores, shape=(-1, nb_features * nb_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_90": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_div_91": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_92": {
                "variable": {
                    "value": "p1_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_93": {
                "variable": {
                    "value": "p2_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor_div(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "cond_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "to_mod_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p1_one_hot + p2_one_hot) * cond_float",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, width, height, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_106": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_107": {
                "variable": {
                    "value": "cond_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(y_in * preds_onehot, axis=1), 0) & (tf.reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logical_and_56": {
                "x": {
                    "value": "tf.less(i_in, max_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cond_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_in",
                            "Method Argument"
                        ],
                        [
                            "cond_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_102": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in + to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_104": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in - to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_51": {
                "x": {
                    "value": "x < clip_max",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_53": {
                "x": {
                    "value": "x > clip_min",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_56": {
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "60",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_61": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_66": {
                "a": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_in",
                            "Method Argument"
                        ],
                        [
                            "y_in",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "not_equal_67": {
                "x": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(y_in, perm=(1, 0)), shape=(nb_classes, -1, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_72": {
                "x": {
                    "value": "tf.equal(domain_in, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_75": {
                "tensor": {
                    "value": "target_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target - increase_coef * tf.reduce_max(tf.abs(grads_target), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(target_sum, shape=(-1, nb_features, 1)) + tf.reshape(target_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "tensor": {
                    "value": "target_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target - increase_coef * tf.reduce_max(tf.abs(grads_target), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(target_sum, shape=(-1, nb_features, 1)) + tf.reshape(target_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "tensor": {
                    "value": "other_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other + increase_coef * tf.reduce_max(tf.abs(grads_other), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(other_sum, shape=(-1, nb_features, 1)) + tf.reshape(other_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "tensor": {
                    "value": "other_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other + increase_coef * tf.reduce_max(tf.abs(grads_other), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(other_sum, shape=(-1, nb_features, 1)) + tf.reshape(other_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(scores_masks, cast) * (-target_sum * other_sum) * zero_diagonal",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features * nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_95": {
                "x": {
                    "value": "tf.reduce_sum(y_in * preds_onehot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_96": {
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(y_in * preds_onehot, axis=1), 0) & (tf.reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_72": {
                "x": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_74": {
                "input_tensor": {
                    "value": "tf.abs(grads_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_78": {
                "input_tensor": {
                    "value": "tf.abs(grads_other)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_87": {
                "x": {
                    "value": "scores_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_95": {
                "input_tensor": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_74": {
                "x": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives * target_class, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_78": {
                "x": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives * other_classes, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "attacks/tf_jsma_nt.py": {
        "tensorflow": {
            "one_hot_48": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(original_preds, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_preds.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_52": {
                "variable": {
                    "value": "zero_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((nb_features, nb_features), int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_127": {
                "variable": {
                    "value": "(x_adv, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[x, y, search_domain, 0, True]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x < clip_max, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x > clip_min, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_66": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(x_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_67": {
                "variable": {
                    "value": "preds_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_preds.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_74": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(logits, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_jacobian(preds, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.transpose(derivatives, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(y_in, perm=(1, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nb_classes, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_77": {
                "variable": {
                    "value": "other_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(target_class, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_79": {
                "variable": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "derivatives * target_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_80": {
                "variable": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "derivatives * other_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_98": {
                "variable": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(scores, shape=(-1, nb_features * nb_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_100": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_div_101": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_102": {
                "variable": {
                    "value": "p1_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_103": {
                "variable": {
                    "value": "p2_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor_div(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "cond_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "to_mod_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p1_one_hot + p2_one_hot) * cond_float",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, width, height, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_120": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_121": {
                "variable": {
                    "value": "cond_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(y_in * preds_onehot, axis=1), 1) & (tf.reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(domain_in, axis=1) >= 2",
                            "Compare"
                        ]
                    ]
                }
            },
            "argmax_48": {
                "input": {
                    "value": "original_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logical_and_62": {
                "x": {
                    "value": "tf.less(i_in, max_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cond_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_in",
                            "Method Argument"
                        ],
                        [
                            "cond_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_jacobian(logits, x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_classes, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_jacobian(preds, x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_classes, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "minimum_116": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in + to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_118": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in - to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_57": {
                "x": {
                    "value": "x < clip_max",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_59": {
                "x": {
                    "value": "x > clip_min",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_62": {
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "60",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_67": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_76": {
                "a": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_in",
                            "Method Argument"
                        ],
                        [
                            "y_in",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "not_equal_77": {
                "x": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(y_in, perm=(1, 0)), shape=(nb_classes, -1, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_82": {
                "x": {
                    "value": "tf.equal(domain_in, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_85": {
                "tensor": {
                    "value": "target_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target - increase_coef * tf.reduce_max(tf.abs(grads_target), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(target_sum, shape=(-1, nb_features, 1)) + tf.reshape(target_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "tensor": {
                    "value": "target_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target - increase_coef * tf.reduce_max(tf.abs(grads_target), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(target_sum, shape=(-1, nb_features, 1)) + tf.reshape(target_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "tensor": {
                    "value": "other_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other + increase_coef * tf.reduce_max(tf.abs(grads_other), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(other_sum, shape=(-1, nb_features, 1)) + tf.reshape(other_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "tensor": {
                    "value": "other_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other + increase_coef * tf.reduce_max(tf.abs(grads_other), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(other_sum, shape=(-1, nb_features, 1)) + tf.reshape(other_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(scores_masks, cast) * (-target_sum * other_sum) * zero_diagonal",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features * nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_110": {
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(y_in * preds_onehot, axis=1), 1) & (tf.reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(domain_in, axis=1) >= 2",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_82": {
                "x": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_84": {
                "input_tensor": {
                    "value": "tf.abs(grads_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_88": {
                "input_tensor": {
                    "value": "tf.abs(grads_other)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "scores_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_106": {
                "x": {
                    "value": "tf.reduce_sum(y_in * preds_onehot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_108": {
                "input_tensor": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_84": {
                "x": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives * target_class, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_88": {
                "x": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives * other_classes, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_106": {
                "input_tensor": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "attacks/tf_maximal_jsma.py": {
        "tensorflow": {
            "one_hot_44": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(original_preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_preds.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "previous_mods",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_50": {
                "variable": {
                    "value": "zero_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((nb_features, nb_features), int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_127": {
                "variable": {
                    "value": "(x_adv, _, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[x, y, search_domain, previous_mods, 0, True]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_57": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(x_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_58": {
                "variable": {
                    "value": "preds_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_preds.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_65": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(logits, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_jacobian(preds, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.transpose(derivatives, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "variable": {
                    "value": "gradients_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(logits, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_jacobian(preds, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.transpose(derivatives, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_77": {
                "variable": {
                    "value": "remove_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack([remove_mask] * nb_classes, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_79": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "-alphas * betas",
                    "type": "BinOp",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_82": {
                "variable": {
                    "value": "max_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(product, shape=(-1, nb_classes, nb_features * nb_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_83": {
                "variable": {
                    "value": "max_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.reshape(product, shape=(-1, nb_classes, nb_features * nb_features)), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_84": {
                "variable": {
                    "value": "max_class_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "max_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(max_classes, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_preds.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_86": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(max_class_one_hot, shape=(-1, nb_classes, 1, 1)) * product",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_87": {
                "variable": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(scores * zero_diagonal, shape=(-1, nb_features * nb_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_89": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores * zero_diagonal, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floordiv_90": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores * zero_diagonal, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_91": {
                "variable": {
                    "value": "p1_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_92": {
                "variable": {
                    "value": "p2_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floordiv(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_94": {
                "variable": {
                    "value": "target_gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(max_class_one_hot, shape=(-1, nb_classes, 1)) * tf.transpose(derivatives, perm=(1, 0, 2))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_98": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(target_gradient * (p1_one_hot + p2_one_hot), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "cond_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond, dtype=cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "not_equal_108": {
                "variable": {
                    "value": "cond_mod_p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(mods_in * p1_one_hot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-thetas",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "not_equal_109": {
                "variable": {
                    "value": "cond_mod_p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(mods_in * p2_one_hot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-thetas",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "cond_mod_p1_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond_mod_p1, dtype=cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "cond_mod_p2_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond_mod_p2, dtype=cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "to_mod_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_mod_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_mod * tf.reshape(thetas, shape=(-1, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, width, height, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_117": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(clip_min, tf.minimum(clip_max, x_in + to_mod_reshape))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_122": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_123": {
                "variable": {
                    "value": "cond_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.reduce_sum(domain_in, axis=1) >= 2) & tf.not_equal(tf.reduce_max(max_classes, axis=1), 0)",
                            "BinOp"
                        ],
                        [
                            "cond & tf.equal(tf.reduce_sum(y_in * preds_one_hot, axis=1), 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_44": {
                "input": {
                    "value": "original_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_46": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_and_53": {
                "x": {
                    "value": "tf.less(i_in, max_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cond_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_in",
                            "Method Argument"
                        ],
                        [
                            "cond_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_jacobian(logits, x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_classes, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_jacobian(preds, x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_classes, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "less_53": {
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "60",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_58": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "tensor": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(logits, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_jacobian(preds, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.transpose(derivatives, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(nb_classes, -1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "tensor": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(logits, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_jacobian(preds, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.transpose(derivatives, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(nb_classes, -1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "tensor": {
                    "value": "gradients_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "tensor": {
                    "value": "gradients_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "tensor": {
                    "value": "1 - domain_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "tensor": {
                    "value": "1 - domain_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_77": {
                "values": {
                    "value": "[remove_mask] * nb_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "tensor": {
                    "value": "tf.reduce_max(tf.abs(product), axis=(1, 2, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "tensor": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(-alphas * betas, perm=(1, 0, 2, 3))",
                            "Call"
                        ],
                        [
                            "product - remove_mask * tf.reshape(tf.reduce_max(tf.abs(product), axis=(1, 2, 3)), shape=(-1, 1, 1, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_classes, nb_features * nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "tensor": {
                    "value": "scores * zero_diagonal",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_features * nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "target_gradient * (p1_one_hot + p2_one_hot)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "not_equal_101": {
                "x": {
                    "value": "tf.reduce_max(max_classes, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_104": {
                "x": {
                    "value": "tf.reduce_sum(y_in * preds_one_hot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_106": {
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.reduce_sum(domain_in, axis=1) >= 2) & tf.not_equal(tf.reduce_max(max_classes, axis=1), 0)",
                            "BinOp"
                        ],
                        [
                            "cond & tf.equal(tf.reduce_sum(y_in * preds_one_hot, axis=1), 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_108": {
                "input_tensor": {
                    "value": "mods_in * p1_one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "input_tensor": {
                    "value": "mods_in * p2_one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_110": {
                "x": {
                    "value": "cond_mod_p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(tf.reduce_sum(mods_in * p1_one_hot, axis=1), -thetas)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_111": {
                "x": {
                    "value": "cond_mod_p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(tf.reduce_sum(mods_in * p2_one_hot, axis=1), -thetas)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_114": {
                "tensor": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_sum(target_gradient * (p1_one_hot + p2_one_hot), axis=1))",
                            "Call"
                        ],
                        [
                            "thetas * (-2 * tf.reduce_sum(y_in * max_class_one_hot, axis=1) + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "maximum_117": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.minimum(clip_max, x_in + to_mod_reshape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_119": {
                "x": {
                    "value": "to_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_float * (p1_one_hot * cond_mod_p1_float + p2_one_hot * cond_mod_p2_float)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_80": {
                "input_tensor": {
                    "value": "tf.abs(product)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "tensor": {
                    "value": "max_class_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(max_class, depth=nb_classes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_classes, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "max_class_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(max_class, depth=nb_classes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_classes, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_95": {
                "a": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(logits, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_jacobian(preds, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.transpose(derivatives, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "input_tensor": {
                    "value": "y_in * max_class_one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_101": {
                "input_tensor": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_101": {
                "input_tensor": {
                    "value": "max_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.reshape(product, shape=(-1, nb_classes, nb_features * nb_features)), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_104": {
                "input_tensor": {
                    "value": "y_in * preds_one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_117": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in + to_mod_reshape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_80": {
                "x": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(-alphas * betas, perm=(1, 0, 2, 3))",
                            "Call"
                        ],
                        [
                            "product - remove_mask * tf.reshape(tf.reduce_max(tf.abs(product), axis=(1, 2, 3)), shape=(-1, 1, 1, 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_120": {
                "input": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_sum(target_gradient * (p1_one_hot + p2_one_hot), axis=1))",
                            "Call"
                        ],
                        [
                            "thetas * (-2 * tf.reduce_sum(y_in * max_class_one_hot, axis=1) + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "attacks/tf_maximal_wjsma.py": {
        "tensorflow": {
            "one_hot_44": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(original_preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_preds.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.ones_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "previous_mods",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "zero_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((nb_features, nb_features), int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_129": {
                "variable": {
                    "value": "(x_adv, _, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[x, y, search_domain, previous_mods, 0, True]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_58": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(x_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_59": {
                "variable": {
                    "value": "preds_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_preds.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_66": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(logits, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_jacobian(preds, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.transpose(derivatives, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_68": {
                "variable": {
                    "value": "preds_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(preds, shape=(-1, nb_classes, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "variable": {
                    "value": "gradients_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "derivatives * preds_transpose",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_79": {
                "variable": {
                    "value": "remove_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack([remove_mask] * nb_classes, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_81": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "-alphas * betas",
                    "type": "BinOp",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_84": {
                "variable": {
                    "value": "max_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(product, shape=(-1, nb_classes, nb_features * nb_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_85": {
                "variable": {
                    "value": "max_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.reshape(product, shape=(-1, nb_classes, nb_features * nb_features)), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_86": {
                "variable": {
                    "value": "max_class_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "max_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(max_classes, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_preds.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_88": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(max_class_one_hot, shape=(-1, nb_classes, 1, 1)) * product",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_89": {
                "variable": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(scores * zero_diagonal, shape=(-1, nb_features * nb_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_91": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores * zero_diagonal, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floordiv_92": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores * zero_diagonal, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_93": {
                "variable": {
                    "value": "p1_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_94": {
                "variable": {
                    "value": "p2_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floordiv(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_96": {
                "variable": {
                    "value": "target_gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(max_class_one_hot, shape=(-1, nb_classes, 1)) * tf.transpose(derivatives, perm=(1, 0, 2))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_100": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(target_gradient * (p1_one_hot + p2_one_hot), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "cond_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond, dtype=cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "not_equal_110": {
                "variable": {
                    "value": "cond_mod_p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(mods_in * p1_one_hot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-thetas",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "not_equal_111": {
                "variable": {
                    "value": "cond_mod_p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(mods_in * p2_one_hot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-thetas",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "cond_mod_p1_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond_mod_p1, dtype=cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "cond_mod_p2_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond_mod_p2, dtype=cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "to_mod_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_mod_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_mod * tf.reshape(thetas, shape=(-1, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, width, height, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_119": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(clip_min, tf.minimum(clip_max, x_in + to_mod_reshape))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_124": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_125": {
                "variable": {
                    "value": "cond_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.reduce_sum(domain_in, axis=1) >= 2) & tf.not_equal(tf.reduce_max(max_classes, axis=1), 0)",
                            "BinOp"
                        ],
                        [
                            "cond & tf.equal(tf.reduce_sum(y_in * preds_one_hot, axis=1), 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_44": {
                "input": {
                    "value": "original_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_46": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_47": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_and_54": {
                "x": {
                    "value": "tf.less(i_in, max_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cond_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_in",
                            "Method Argument"
                        ],
                        [
                            "cond_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_jacobian(logits, x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_classes, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_jacobian(preds, x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_classes, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "less_54": {
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "60",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_59": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "tensor": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_classes, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "tensor": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(logits, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_jacobian(preds, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.transpose(derivatives, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(nb_classes, -1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "tensor": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(logits, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_jacobian(preds, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.transpose(derivatives, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(nb_classes, -1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "tensor": {
                    "value": "gradients_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives * preds_transpose, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "tensor": {
                    "value": "gradients_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives * preds_transpose, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "tensor": {
                    "value": "preds_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.reshape(preds, shape=(-1, nb_classes, 1)), perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(nb_classes, -1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "tensor": {
                    "value": "1 - domain_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "tensor": {
                    "value": "1 - domain_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_79": {
                "values": {
                    "value": "[remove_mask] * nb_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "tensor": {
                    "value": "tf.reduce_max(tf.abs(product), axis=(1, 2, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "tensor": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(-alphas * betas, perm=(1, 0, 2, 3))",
                            "Call"
                        ],
                        [
                            "product - remove_mask * tf.reshape(tf.reduce_max(tf.abs(product), axis=(1, 2, 3)), shape=(-1, 1, 1, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_classes, nb_features * nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "tensor": {
                    "value": "scores * zero_diagonal",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_features * nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "input_tensor": {
                    "value": "target_gradient * (p1_one_hot + p2_one_hot)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "not_equal_103": {
                "x": {
                    "value": "tf.reduce_max(max_classes, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_106": {
                "x": {
                    "value": "tf.reduce_sum(y_in * preds_one_hot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_108": {
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.reduce_sum(domain_in, axis=1) >= 2) & tf.not_equal(tf.reduce_max(max_classes, axis=1), 0)",
                            "BinOp"
                        ],
                        [
                            "cond & tf.equal(tf.reduce_sum(y_in * preds_one_hot, axis=1), 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_110": {
                "input_tensor": {
                    "value": "mods_in * p1_one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "input_tensor": {
                    "value": "mods_in * p2_one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_112": {
                "x": {
                    "value": "cond_mod_p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(tf.reduce_sum(mods_in * p1_one_hot, axis=1), -thetas)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_113": {
                "x": {
                    "value": "cond_mod_p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(tf.reduce_sum(mods_in * p2_one_hot, axis=1), -thetas)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_116": {
                "tensor": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_sum(target_gradient * (p1_one_hot + p2_one_hot), axis=1))",
                            "Call"
                        ],
                        [
                            "thetas * (-2 * tf.reduce_sum(y_in * max_class_one_hot, axis=1) + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "maximum_119": {
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.minimum(clip_max, x_in + to_mod_reshape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_121": {
                "x": {
                    "value": "to_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_float * (p1_one_hot * cond_mod_p1_float + p2_one_hot * cond_mod_p2_float)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_82": {
                "input_tensor": {
                    "value": "tf.abs(product)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "tensor": {
                    "value": "max_class_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(max_class, depth=nb_classes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_classes, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "tensor": {
                    "value": "max_class_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(max_class, depth=nb_classes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_classes, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_97": {
                "a": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(logits, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_jacobian(preds, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.transpose(derivatives, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_101": {
                "input_tensor": {
                    "value": "y_in * max_class_one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_103": {
                "input_tensor": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_103": {
                "input_tensor": {
                    "value": "max_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.reshape(product, shape=(-1, nb_classes, nb_features * nb_features)), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "input_tensor": {
                    "value": "y_in * preds_one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_119": {
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in + to_mod_reshape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_82": {
                "x": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(-alphas * betas, perm=(1, 0, 2, 3))",
                            "Call"
                        ],
                        [
                            "product - remove_mask * tf.reshape(tf.reduce_max(tf.abs(product), axis=(1, 2, 3)), shape=(-1, 1, 1, 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_122": {
                "input": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_sum(target_gradient * (p1_one_hot + p2_one_hot), axis=1))",
                            "Call"
                        ],
                        [
                            "thetas * (-2 * tf.reduce_sum(y_in * max_class_one_hot, axis=1) + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "attacks/tf_tjsma.py": {
        "tensorflow": {
            "constant_44": {
                "variable": {
                    "value": "zero_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((nb_features, nb_features), int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_114": {
                "variable": {
                    "value": "(x_adv, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[x, y, search_domain, 0, True]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x < clip_max, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x > clip_min, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_58": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(x_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_59": {
                "variable": {
                    "value": "preds_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_jacobian(logits, x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_classes, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(y_in, perm=(1, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nb_classes, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "other_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(target_class, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_67": {
                "variable": {
                    "value": "preds_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(preds, shape=(-1, nb_classes, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "variable": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "derivatives * target_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "variable": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "derivatives * other_classes_weighted",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_89": {
                "variable": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(scores, shape=(-1, nb_features * nb_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_91": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_div_92": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_93": {
                "variable": {
                    "value": "p1_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_94": {
                "variable": {
                    "value": "p2_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor_div(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "cond_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "to_mod_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p1_one_hot + p2_one_hot) * cond_float",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, width, height, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_107": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_108": {
                "variable": {
                    "value": "cond_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(y_in * preds_onehot, axis=1), 0) & (tf.reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logical_and_54": {
                "x": {
                    "value": "tf.less(i_in, max_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cond_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_in",
                            "Method Argument"
                        ],
                        [
                            "cond_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_103": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in + to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_105": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in - to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_49": {
                "x": {
                    "value": "x < clip_max",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_51": {
                "x": {
                    "value": "x > clip_min",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_54": {
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "60",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_59": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "tensor": {
                    "value": "1 - x_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_62": {
                "a": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(logits, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(1 - x_in, shape=(-1, nb_features)) * tf.transpose(derivatives, perm=(1, 0, 2))",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_64": {
                "a": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_in",
                            "Method Argument"
                        ],
                        [
                            "y_in",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "not_equal_65": {
                "x": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(y_in, perm=(1, 0)), shape=(nb_classes, -1, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "tensor": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_classes, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_73": {
                "x": {
                    "value": "tf.equal(domain_in, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_76": {
                "tensor": {
                    "value": "target_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target - increase_coef * tf.reduce_max(tf.abs(grads_target), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(target_sum, shape=(-1, nb_features, 1)) + tf.reshape(target_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "tensor": {
                    "value": "target_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target - increase_coef * tf.reduce_max(tf.abs(grads_target), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(target_sum, shape=(-1, nb_features, 1)) + tf.reshape(target_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "tensor": {
                    "value": "other_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other + increase_coef * tf.reduce_max(tf.abs(grads_other), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(other_sum, shape=(-1, nb_features, 1)) + tf.reshape(other_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "tensor": {
                    "value": "other_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other + increase_coef * tf.reduce_max(tf.abs(grads_other), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(other_sum, shape=(-1, nb_features, 1)) + tf.reshape(other_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(scores_masks, cast) * (-target_sum * other_sum) * zero_diagonal",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features * nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_96": {
                "x": {
                    "value": "tf.reduce_sum(y_in * preds_onehot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(y_in * preds_onehot, axis=1), 0) & (tf.reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_73": {
                "x": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_75": {
                "input_tensor": {
                    "value": "tf.abs(grads_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_79": {
                "input_tensor": {
                    "value": "tf.abs(grads_other)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "scores_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_96": {
                "input_tensor": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_75": {
                "x": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives * target_class, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_79": {
                "x": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives * other_classes_weighted, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "attacks/tf_tjsma_nt.py": {
        "tensorflow": {
            "one_hot_46": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(original_preds, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_preds.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_50": {
                "variable": {
                    "value": "zero_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((nb_features, nb_features), int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_128": {
                "variable": {
                    "value": "(x_adv, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[x, y, search_domain, 0, True]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x < clip_max, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x > clip_min, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(x_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_65": {
                "variable": {
                    "value": "preds_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_preds.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(y_in, perm=(1, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nb_classes, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_75": {
                "variable": {
                    "value": "other_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(target_class, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_77": {
                "variable": {
                    "value": "preds_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(preds, shape=(-1, nb_classes, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_80": {
                "variable": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "derivatives * target_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "derivatives * other_classes_weighted",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_99": {
                "variable": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(scores, shape=(-1, nb_features * nb_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_101": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_div_102": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_103": {
                "variable": {
                    "value": "p1_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_104": {
                "variable": {
                    "value": "p2_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor_div(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "cond_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "to_mod_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p1_one_hot + p2_one_hot) * cond_float",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, width, height, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_121": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_122": {
                "variable": {
                    "value": "cond_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(y_in * preds_onehot, axis=1), 1) & (tf.reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(domain_in, axis=1) >= 2",
                            "Compare"
                        ]
                    ]
                }
            },
            "argmax_46": {
                "input": {
                    "value": "original_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logical_and_60": {
                "x": {
                    "value": "tf.less(i_in, max_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cond_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_in",
                            "Method Argument"
                        ],
                        [
                            "cond_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_jacobian(logits, x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_classes, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_jacobian(preds, x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_classes, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "minimum_117": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in + to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_119": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in - to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_55": {
                "x": {
                    "value": "x < clip_max",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_57": {
                "x": {
                    "value": "x > clip_min",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_60": {
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "60",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_65": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "tensor": {
                    "value": "1 - x_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_72": {
                "a": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(logits, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_jacobian(preds, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(1 - x_in, shape=(-1, nb_features)) * tf.transpose(derivatives, perm=(1, 0, 2))",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_74": {
                "a": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_in",
                            "Method Argument"
                        ],
                        [
                            "y_in",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "not_equal_75": {
                "x": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(y_in, perm=(1, 0)), shape=(nb_classes, -1, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "tensor": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_classes, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_83": {
                "x": {
                    "value": "tf.equal(domain_in, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_86": {
                "tensor": {
                    "value": "target_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target - increase_coef * tf.reduce_max(tf.abs(grads_target), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(target_sum, shape=(-1, nb_features, 1)) + tf.reshape(target_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "tensor": {
                    "value": "target_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target - increase_coef * tf.reduce_max(tf.abs(grads_target), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(target_sum, shape=(-1, nb_features, 1)) + tf.reshape(target_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "tensor": {
                    "value": "other_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other + increase_coef * tf.reduce_max(tf.abs(grads_other), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(other_sum, shape=(-1, nb_features, 1)) + tf.reshape(other_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "tensor": {
                    "value": "other_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other + increase_coef * tf.reduce_max(tf.abs(grads_other), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(other_sum, shape=(-1, nb_features, 1)) + tf.reshape(other_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(scores_masks, cast) * (-target_sum * other_sum) * zero_diagonal",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features * nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_111": {
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(y_in * preds_onehot, axis=1), 1) & (tf.reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(domain_in, axis=1) >= 2",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_83": {
                "x": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_85": {
                "input_tensor": {
                    "value": "tf.abs(grads_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_89": {
                "input_tensor": {
                    "value": "tf.abs(grads_other)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_98": {
                "x": {
                    "value": "scores_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_107": {
                "x": {
                    "value": "tf.reduce_sum(y_in * preds_onehot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "input_tensor": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_85": {
                "x": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives * target_class, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_89": {
                "x": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives * other_classes_weighted, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "attacks/tf_wjsma.py": {
        "tensorflow": {
            "constant_44": {
                "variable": {
                    "value": "zero_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((nb_features, nb_features), int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_114": {
                "variable": {
                    "value": "(x_adv, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[x, y, search_domain, 0, True]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x < clip_max, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x > clip_min, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_58": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(x_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_59": {
                "variable": {
                    "value": "preds_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_jacobian(logits, x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_classes, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_62": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(logits, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.transpose(derivatives, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(y_in, perm=(1, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nb_classes, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "other_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(target_class, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_67": {
                "variable": {
                    "value": "preds_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(preds, shape=(-1, nb_classes, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "variable": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "derivatives * target_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "variable": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "derivatives * other_classes_weighted",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_89": {
                "variable": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(scores, shape=(-1, nb_features * nb_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_91": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_div_92": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_93": {
                "variable": {
                    "value": "p1_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_94": {
                "variable": {
                    "value": "p2_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor_div(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "cond_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "to_mod_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p1_one_hot + p2_one_hot) * cond_float",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, width, height, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_107": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_108": {
                "variable": {
                    "value": "cond_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(y_in * preds_onehot, axis=1), 0) & (tf.reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logical_and_54": {
                "x": {
                    "value": "tf.less(i_in, max_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cond_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_in",
                            "Method Argument"
                        ],
                        [
                            "cond_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_103": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in + to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_105": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in - to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_49": {
                "x": {
                    "value": "x < clip_max",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_51": {
                "x": {
                    "value": "x > clip_min",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_54": {
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "60",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_59": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_64": {
                "a": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_in",
                            "Method Argument"
                        ],
                        [
                            "y_in",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "not_equal_65": {
                "x": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(y_in, perm=(1, 0)), shape=(nb_classes, -1, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "tensor": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_classes, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_73": {
                "x": {
                    "value": "tf.equal(domain_in, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_76": {
                "tensor": {
                    "value": "target_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target - increase_coef * tf.reduce_max(tf.abs(grads_target), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(target_sum, shape=(-1, nb_features, 1)) + tf.reshape(target_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "tensor": {
                    "value": "target_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target - increase_coef * tf.reduce_max(tf.abs(grads_target), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(target_sum, shape=(-1, nb_features, 1)) + tf.reshape(target_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "tensor": {
                    "value": "other_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other + increase_coef * tf.reduce_max(tf.abs(grads_other), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(other_sum, shape=(-1, nb_features, 1)) + tf.reshape(other_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "tensor": {
                    "value": "other_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other + increase_coef * tf.reduce_max(tf.abs(grads_other), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(other_sum, shape=(-1, nb_features, 1)) + tf.reshape(other_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(scores_masks, cast) * (-target_sum * other_sum) * zero_diagonal",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features * nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_96": {
                "x": {
                    "value": "tf.reduce_sum(y_in * preds_onehot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(y_in * preds_onehot, axis=1), 0) & (tf.reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_73": {
                "x": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_75": {
                "input_tensor": {
                    "value": "tf.abs(grads_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_79": {
                "input_tensor": {
                    "value": "tf.abs(grads_other)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "scores_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_96": {
                "input_tensor": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_75": {
                "x": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives * target_class, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_79": {
                "x": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives * other_classes_weighted, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "attacks/tf_wjsma_nt.py": {
        "tensorflow": {
            "one_hot_46": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(original_preds, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_preds.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_50": {
                "variable": {
                    "value": "zero_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((nb_features, nb_features), int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_128": {
                "variable": {
                    "value": "(x_adv, _, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[x, y, search_domain, 0, True]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x < clip_max, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "search_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(x > clip_min, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nb_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(x_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_65": {
                "variable": {
                    "value": "preds_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.argmax(preds, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_preds.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_72": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(logits, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.reshape(batch_jacobian(preds, x_in), shape=(-1, nb_classes, nb_features))",
                            "Call"
                        ],
                        [
                            "tf.transpose(derivatives, perm=(1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(y_in, perm=(1, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(nb_classes, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_75": {
                "variable": {
                    "value": "other_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(target_class, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_77": {
                "variable": {
                    "value": "preds_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(preds, shape=(-1, nb_classes, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_80": {
                "variable": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "derivatives * target_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "derivatives * other_classes_weighted",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_99": {
                "variable": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(scores, shape=(-1, nb_features * nb_features))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_101": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_div_102": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(scores, shape=(-1, nb_features * nb_features)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_103": {
                "variable": {
                    "value": "p1_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.mod(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "one_hot_104": {
                "variable": {
                    "value": "p2_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor_div(best, nb_features)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "nb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * depth",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_111": {
                "variable": {
                    "value": "cond_float",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(cond, cast)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "to_mod_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "to_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p1_one_hot + p2_one_hot) * cond_float",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, width, height, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_121": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_122": {
                "variable": {
                    "value": "cond_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(y_in * preds_onehot, axis=1), 1) & (tf.reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(domain_in, axis=1) >= 2",
                            "Compare"
                        ]
                    ]
                }
            },
            "argmax_46": {
                "input": {
                    "value": "original_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logical_and_60": {
                "x": {
                    "value": "tf.less(i_in, max_iter)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cond_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_in",
                            "Method Argument"
                        ],
                        [
                            "cond_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_jacobian(logits, x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_classes, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_jacobian(preds, x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nb_classes, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "minimum_117": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in + to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_119": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "x_in - to_mod_reshape * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_55": {
                "x": {
                    "value": "x < clip_max",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_57": {
                "x": {
                    "value": "x > clip_min",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_60": {
                "x": {
                    "value": "i_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_in",
                            "Method Argument"
                        ],
                        [
                            "i_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "60",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_65": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_74": {
                "a": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_in",
                            "Method Argument"
                        ],
                        [
                            "y_in",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "not_equal_75": {
                "x": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(y_in, perm=(1, 0)), shape=(nb_classes, -1, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "tensor": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_classes, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_83": {
                "x": {
                    "value": "tf.equal(domain_in, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_86": {
                "tensor": {
                    "value": "target_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target - increase_coef * tf.reduce_max(tf.abs(grads_target), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(target_sum, shape=(-1, nb_features, 1)) + tf.reshape(target_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "tensor": {
                    "value": "target_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_target - increase_coef * tf.reduce_max(tf.abs(grads_target), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(target_sum, shape=(-1, nb_features, 1)) + tf.reshape(target_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "tensor": {
                    "value": "other_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other + increase_coef * tf.reduce_max(tf.abs(grads_other), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(other_sum, shape=(-1, nb_features, 1)) + tf.reshape(other_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "tensor": {
                    "value": "other_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_other + increase_coef * tf.reduce_max(tf.abs(grads_other), axis=1, keep_dims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(other_sum, shape=(-1, nb_features, 1)) + tf.reshape(other_sum, shape=(-1, 1, nb_features))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(scores_masks, cast) * (-target_sum * other_sum) * zero_diagonal",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, nb_features * nb_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_111": {
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.reduce_sum(y_in * preds_onehot, axis=1), 1) & (tf.reduce_sum(domain_in, axis=1) >= 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(domain_in, axis=1) >= 2",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_83": {
                "x": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_85": {
                "input_tensor": {
                    "value": "tf.abs(grads_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_89": {
                "input_tensor": {
                    "value": "tf.abs(grads_other)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_98": {
                "x": {
                    "value": "scores_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_sum < 0) & (other_sum > 0)",
                            "BinOp"
                        ],
                        [
                            "(target_sum > 0) & (other_sum < 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_107": {
                "x": {
                    "value": "tf.reduce_sum(y_in * preds_onehot, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "input_tensor": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_85": {
                "x": {
                    "value": "grads_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives * target_class, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_89": {
                "x": {
                    "value": "grads_other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(derivatives * other_classes_weighted, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "domain_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "domain_in",
                            "Method Argument"
                        ],
                        [
                            "domain_in",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/cleverhans_utils.py": {
        "tensorflow": {
            "max_pool2d_34": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + self.pool_size + (1,)",
                            "BinOp"
                        ],
                        [
                            "pool_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1,) + self.strides + (1,)",
                            "BinOp"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_utils.py": {
        "tensorflow": {
            "Session_115": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_165": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_173": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, img_rows, img_cols, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_174": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_224": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_232": {
                "variable": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, width, height, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_233": {
                "variable": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_237": {
                "variable": {
                    "value": "y_out_substitute",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_logits(x_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_240": {
                "variable": {
                    "value": "target_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.one_hot(tf.argmax(y_in, axis=1), depth=classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, classes, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_242": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_jacobian(y_out_substitute, x_in)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, classes, width, height, depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_243": {
                "variable": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "derivatives * target_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_245": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.minimum(1.0, x_in + lamb * tf.sign(derivatives))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_240": {
                "indices": {
                    "value": "tf.argmax(y_in, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_train.shape[1]",
                            "Subscript"
                        ],
                        [
                            "y_train.shape[1]",
                            "Subscript"
                        ],
                        [
                            "y_train.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "minimum_245": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "x_in + lamb * tf.sign(derivatives)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_240": {
                "input": {
                    "value": "y_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, classes))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_245": {
                "x": {
                    "value": "derivatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(batch_jacobian(y_out_substitute, x_in), shape=(-1, classes, width, height, depth))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(derivatives * target_class, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}