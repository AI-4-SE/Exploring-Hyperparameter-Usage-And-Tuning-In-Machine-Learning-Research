{
    "graph.py": {
        "torch": {
            "from_numpy_48": {
                "ndarray": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((nV, nV))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "sum_11": {
                "variable": {
                    "value": "Dl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A_ - I",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "Dn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_node, num_node)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_17": {
                "input": {
                    "value": "Dn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((num_node, num_node))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A_ - I",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_41": {
                "variable": {
                    "value": "A_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A_ - I",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.bases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_77": {
                "variable": {
                    "value": "self.coeff_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_bases * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_108": {
                "variable": {
                    "value": "bases_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bases_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(bases_matrix, dim=1)",
                            "Call"
                        ],
                        [
                            "self.build_local_filter()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_116": {
                "variable": {
                    "value": "features_bases",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "bases_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(bases_matrix, dim=1)",
                            "Call"
                        ],
                        [
                            "self.build_local_filter()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_160": {
                "variable": {
                    "value": "self.coeff_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_bases * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_219": {
                "variable": {
                    "value": "bases_template",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bases_template",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_bases_template(A_)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(bases_template, dim=0)",
                            "Call"
                        ],
                        [
                            "bases_template + [L2]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "features_bases",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features_bases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(input, bases_matrix)",
                            "Call"
                        ],
                        [
                            "self.coeff_conv(features_bases)",
                            "Call"
                        ],
                        [
                            "features_bases + self.bias.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features_bases, dim=1)",
                            "Call"
                        ],
                        [
                            "self.coeff_conv(features_bases)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_271": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_272": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_283": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool1d_286": {
                "variable": {
                    "value": "self.max_pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_288": {
                "variable": {
                    "value": "self.global_avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_290": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_335": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_345": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_349": {
                "variable": {
                    "value": "self.global_avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_352": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_25": {
                "n": {
                    "value": "A.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_28": {
                "input": {
                    "value": "torch.eig(normed_L, eigenvectors=False)[0][:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_29": {
                "n": {
                    "value": "A.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_40": {
                "n": {
                    "value": "A.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_86": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_150": {
                "variable": {
                    "value": "self.bases_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*self.bases_template.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "self.bases_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_169": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_313": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gconv1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.max_pool1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.gconv2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.gconv1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_363": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gconv1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.max_pool1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.gconv2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.gconv1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_193": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "A_.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_232": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rec_kernel",
                            "Name"
                        ]
                    ]
                }
            },
            "sum_342": {
                "input": {
                    "value": "self.gconv1.bases_template",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eig_28": {
                "input": {
                    "value": "normed_L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(A.shape[0]) - normalize_undigraph(A)",
                            "BinOp"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_98": {
                "input": {
                    "value": "self.bases[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, self.num_nodes - 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_100": {
                "input": {
                    "value": "self.bases[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(self.num_nodes - 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_102": {
                "input": {
                    "value": "self.bases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(i - 1, self.num_nodes - 2 - i)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_279": {
                "input": {
                    "value": "conv.bases_template",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_210": {
                "input": {
                    "value": "L_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A2normed_scaled_L(A)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "L1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L_",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_75": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Toy_Dataset(partition='train', graph_type=graph_type)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Toy_Dataset(partition='val', graph_type=graph_type)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_80": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "nll_loss_101": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_119": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}