{
    "XrayData.py": {
        "torch": {
            "is_tensor_38": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ],
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_53": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ],
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_122": {
                "dataset": {
                    "value": "datasets[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "x == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "softmax_57": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(N, C, H * W)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_59": {
                "variable": {
                    "value": "h_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "(H - 1) / H",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-2 / H",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_60": {
                "variable": {
                    "value": "w_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-(W - 1) / W",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "2 / W",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_61": {
                "variable": {
                    "value": "(h_grid, w_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "h_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange((H - 1) / H, -1, -2 / H, device=x.device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "w_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(-(W - 1) / W, 1, 2 / W, device=x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_63": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_grid, w_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "mass",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p * x.unsqueeze(4), mass)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.conv1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "cw[:, [1], :, :].cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.layer3[5].conv2.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.layer3[5].bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 * 3 * levels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.regressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.regressor(out)",
                            "Call"
                        ],
                        [
                            "self.resnet(batched)",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(N * multi, -1)",
                            "Call"
                        ],
                        [
                            "self.regressor(out)",
                            "Call"
                        ],
                        [
                            "out.view(N, multi, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(out, R.transpose(2, 3) / scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_94": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.regressor(out)",
                            "Call"
                        ],
                        [
                            "self.resnet(batched)",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(N * multi, -1)",
                            "Call"
                        ],
                        [
                            "self.regressor(out)",
                            "Call"
                        ],
                        [
                            "out.view(N, multi, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(out, R.transpose(2, 3) / scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_121": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(torch.rand((pos.shape[0], pos.shape[1], 1, 1), device=device) * 2 - 1) * 0.05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rcos, -rsin, rsin, rcos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(R * scale, pos_fix.unsqueeze(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_151": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.regressor(out)",
                            "Call"
                        ],
                        [
                            "self.resnet(batched)",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(N * multi, -1)",
                            "Call"
                        ],
                        [
                            "self.regressor(out)",
                            "Call"
                        ],
                        [
                            "out.view(N, multi, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(out, R.transpose(2, 3) / scale)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.regressor(out)",
                            "Call"
                        ],
                        [
                            "self.resnet(batched)",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(N * multi, -1)",
                            "Call"
                        ],
                        [
                            "self.regressor(out)",
                            "Call"
                        ],
                        [
                            "out.view(N, multi, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(out, R.transpose(2, 3) / scale)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "R.transpose(2, 3) / scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_175": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'Models/{name}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "ones_124": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(pos.shape[0], pos.shape[1], 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_167": {
                "f": {
                    "value": "f'Models/{name}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "rand_120": {
                "*size": {
                    "value": "(pos.shape[0], pos.shape[1], 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_121": {
                "*size": {
                    "value": "(pos.shape[0], pos.shape[1], 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0].device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "pyramid.py": {
        "torch": {
            "cat_30": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Minv, torch.mm(-Minv, t))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "stacked",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pym[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "len(pym)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "pym[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_42": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-(size - 1) / size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "2 / size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "pym[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_43": {
                "variable": {
                    "value": "(gy, gx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(-(size - 1) / size, 1, 2 / size, device=pym[0].device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(-(size - 1) / size, 1, 2 / size, device=pym[0].device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_44": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gx, gy, torch.ones((size, size), device=pym[0].device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[size / W, size / W, 1, size / H, size / H, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pym[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "wH",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * (2 * lw + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "wH",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "wV",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * (2 * lw + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "wV",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_104": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Transform(HeadXrays('images/RawImage'), tx=trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid.view(N, C, size * size, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Tl.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_53": {
                "variable": {
                    "value": "stacked[:, :, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pym[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(grid.view(N, C, size * size, 3), Tl.transpose(2, 3)).view(N, size * C, size, 2)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_86": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "wH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(weights).reshape(1, 1, 1, 2 * lw + 1).to(input.device)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "(0, lw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_87": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(input, wH, padding=(0, lw))",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, wV, padding=(lw, 0), stride=(2, 2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "wV",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(weights).reshape(1, 1, 2 * lw + 1, 1).to(input.device)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "(lw, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[size / W, size / W, 1, size / H, size / H, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "T.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_23": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "[2 ** i, 2 ** i, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "T.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_85": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[cos(theta), -sin(theta), 1], [sin(theta), cos(theta), 0]], [[1, 0, -1], [0, 1, -1920 / 2432.0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "pnt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, -1, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_142": {
                "variable": {
                    "value": "pnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_151": {
                "variable": {
                    "value": "pnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, -1, 1.0], device='cuda').reshape(1, 3)",
                            "Call"
                        ],
                        [
                            "torch.matmul(pnt, t.t())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "t.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_31": {
                "input": {
                    "value": "-Minv",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T[:, [2]]",
                            "Subscript"
                        ],
                        [
                            "pyramid_transform(TR, 2432, 1920, sz, start_level, level)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_56": {
                "*size": {
                    "value": "stacked.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pym[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "[2 ** i, 2 ** i, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "pym[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_44": {
                "*size": {
                    "value": "(size, size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "pym[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tester.py": {
        "torch": {
            "tensor_48": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pnts.mean(0, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_64": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_92": {
                "variable": {
                    "value": "labels_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(junior_labels, senior_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_92": {
                "variable": {
                    "value": "labels_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_121": {
                "variable": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_59": {
                "f": {
                    "value": "setting['loadpath']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_grad_enabled_102": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(errors, 0).detach().cpu().numpy() / 2 * 192",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "tensors": {
                    "value": "doc_errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(doc_errors, 0).detach().cpu().numpy() / 2 * 192",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_127": {
                "input": {
                    "value": "junior_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "senior_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_127": {
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "tensor_44": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pnts.mean(0, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "stddevs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pnts.std(0, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_61": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_116": {
                "variable": {
                    "value": "labels_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(junior_labels, senior_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_116": {
                "variable": {
                    "value": "labels_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rcos, -rsin, rsin, rcos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(R, pos.unsqueeze(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_125": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "normal_128": {
                "variable": {
                    "value": "guess",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "means.expand(2, 2, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "stddevs.expand(2, 2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_137": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "guess + model(pym, guess, phase == 'train')",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "labels_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((junior_labels, senior_labels), dim=0).mean(0).to(device).to(torch.float32)",
                            "Call"
                        ],
                        [
                            "junior_labels.to(device).to(torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "pnt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p, torch.ones((p.shape[0], 1), device=device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_202": {
                "variable": {
                    "value": "pnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id % 10 * 2",
                            "BinOp"
                        ],
                        [
                            "id % 5 * 4",
                            "BinOp"
                        ],
                        [
                            "torch.cat((p, torch.ones((p.shape[0], 1), device=device)), 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(pnt, TR.t())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "TR.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_212": {
                "tensors": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(errors, 0).detach().cpu().numpy() / 2 * 192",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "tensors": {
                    "value": "doc_errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(doc_errors, 0).detach().cpu().numpy() / 2 * 192",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_153": {
                "input": {
                    "value": "junior_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "senior_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_153": {
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_141": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "guess + model(pym, guess, phase == 'train')",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "labels_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((junior_labels, senior_labels), dim=0).mean(0).to(device).to(torch.float32)",
                            "Call"
                        ],
                        [
                            "junior_labels.to(device).to(torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_141": {
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "backward_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_143": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "guess + model(pym, guess, phase == 'train')",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "labels_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((junior_labels, senior_labels), dim=0).mean(0).to(device).to(torch.float32)",
                            "Call"
                        ],
                        [
                            "junior_labels.to(device).to(torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "backward_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_201": {
                "*size": {
                    "value": "(p.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "rand_160": {
                "*size": {
                    "value": "(pos.shape[0], pos.shape[1], 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "pym[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}