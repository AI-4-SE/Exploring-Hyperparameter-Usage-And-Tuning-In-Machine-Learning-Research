{
    "src/BERT/utils_glue.py": {
        "sklearn": {
            "f1_score_715": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[line.rstrip() for line in open(join(data_dir, 'labels.train'))]",
                            "ListComp"
                        ],
                        [
                            "['contradiction', 'entailment', 'neutral']",
                            "List"
                        ],
                        [
                            "[line.rstrip() for line in open(join(data_dir, 'labels.test'))]",
                            "ListComp"
                        ],
                        [
                            "[line.rstrip() for line in open(join(data_dir, 'labels.' + set_type))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "normalize_52": {
                "variable": {
                    "value": "prem_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prem_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f.normalize(prem_matrix, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "prem_matrix * p_mask.view(prem_matrix.shape[0], prem_matrix.shape[1], 1).float()",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_53": {
                "variable": {
                    "value": "hyp_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hyp_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f.normalize(hyp_matrix, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "hyp_matrix * h_mask.view(hyp_matrix.shape[0], hyp_matrix.shape[1], 1).float()",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "similarity_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sim_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_89": {
                "variable": {
                    "value": "p_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_90": {
                "variable": {
                    "value": "h_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_68": {
                "variable": {
                    "value": "(y, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_replace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "similarity.clone()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_74": {
                "variable": {
                    "value": "h_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "sum_similarity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(similarity_matrix, 2)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_59": {
                "input": {
                    "value": "similarity_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hyp_matrix.bmm(prem_matrix.transpose(2, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_81": {
                "input": {
                    "value": "similarity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(similarity_matrix, 2)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_92": {
                "input": {
                    "value": "torch.max(p_lengths - h_lengths, torch.ones_like(p_lengths)).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_92": {
                "input": {
                    "value": "p_lengths - h_lengths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_92": {
                "input": {
                    "value": "p_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(p_mask, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/BERT/eval_utils.py": {
        "torch": {
            "tensor_253": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_255": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_256": {
                "variable": {
                    "value": "all_label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_226": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_259": {
                "variable": {
                    "value": "all_h_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.h_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_260": {
                "variable": {
                    "value": "all_h_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask_h for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "variable": {
                    "value": "all_p_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.p_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "all_p_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask_p for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "variable": {
                    "value": "all_have_overlap",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.have_overlap for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_264": {
                "variable": {
                    "value": "all_overlap_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.overlap_rate for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "variable": {
                    "value": "all_subsequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.subsequence for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_266": {
                "variable": {
                    "value": "all_constituent",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.constituent for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_267": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_307": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_308": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_357": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_358": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_250": {
                "obj": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, label_list, args.max_seq_length, tokenizer, 'classification', cls_token_at_end=bool(args.model_type in ['xlnet']), cls_token=tokenizer.cls_token, sep_token=tokenizer.sep_token, cls_token_segment_id=2 if args.model_type in ['xlnet'] else 0, pad_on_left=bool(args.model_type in ['xlnet']), pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0, rubi=args.rubi or args.hypothesis_only or args.focal_loss or args.poe_loss or args.hans_only, rubi_text=args.rubi_text, hans=args.hans and (not evaluate) or args.hans_only, hans_features=args.hans_features)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_273": {
                "variable": {
                    "value": "all_h_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.h_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_274": {
                "variable": {
                    "value": "all_h_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask_h for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_275": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_278": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_335": {
                "variable": {
                    "value": "results[eval_task]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/BERT/mutils.py": {
        "torch": {}
    },
    "src/BERT/run_glue.py": {
        "torch": {
            "RandomSampler_57": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_188": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_42": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_50": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_279": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__139": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__142": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/BERT/utils_bert.py": {
        "torch": {
            "Dropout_43": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config.hidden_size, config.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "hans_h_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(simialrity_score, have_overlap.view(-1, 1), overlap_rate.view(-1, 1), subsequence.view(-1, 1), constituent.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "hans_h_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hans_h_inputs, length_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_204": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.h_classifier1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4 + len(self.similarity)",
                            "BinOp"
                        ],
                        [
                            "num_features + len(self.length_features)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_labels_bias_only",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.num_labels",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.h_classifier1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_features, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(config.hidden_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "int(config.hidden_size / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(config.hidden_size / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_109": {
                "in_features": {
                    "value": "int(config.hidden_size / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 1.0, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_233": {
                "variable": {
                    "value": "h_loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([0.5, 1.0, 0.5]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor([0.5, 1.0, 0.5]).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_237": {
                "variable": {
                    "value": "h_loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4 + len(self.similarity)",
                            "BinOp"
                        ],
                        [
                            "num_features + len(self.length_features)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4 + len(self.similarity)",
                            "BinOp"
                        ],
                        [
                            "num_features + len(self.length_features)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tanh_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4 + len(self.similarity)",
                            "BinOp"
                        ],
                        [
                            "num_features + len(self.length_features)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4 + len(self.similarity)",
                            "BinOp"
                        ],
                        [
                            "num_features + len(self.length_features)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tanh_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4 + len(self.similarity)",
                            "BinOp"
                        ],
                        [
                            "num_features + len(self.length_features)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_labels_bias_only",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.num_labels",
                            "Attribute"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_235": {
                "variable": {
                    "value": "h_loss_fct_second",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_220": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_217": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 1.0, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_218": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([0.5, 1.0, 0.5]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor([0.5, 1.0, 0.5]).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/InferSent/data.py": {
        "torch": {
            "from_numpy_22": {
                "ndarray": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((max_len, len(batch), emb_dim))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/InferSent/models.py": {
        "torch": {
            "LSTM_39": {
                "variable": {
                    "value": "self.enc_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.word_emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dpout_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_73": {
                "variable": {
                    "value": "sent_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sent.index_select(1, idx_sort)",
                            "Call"
                        ],
                        [
                            "sentences",
                            "Name"
                        ],
                        [
                            "sent.split() if not tokenize else self.tokenize(sent)",
                            "IfExp"
                        ],
                        [
                            "[[self.bos] + [word for word in sent if word in self.word_vec] + [self.eos]]",
                            "List"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sent_len_sorted",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sent_len_sorted.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_263": {
                "variable": {
                    "value": "(output, idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "self.classifier(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_321": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u, v, torch.abs(u - v), u * v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_356": {
                "variable": {
                    "value": "self.loss_fct_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "sent_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_85": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_85": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_300": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=self.dpout_fc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_311": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, self.fc_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_376": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=self.dpout_fc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_387": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(int(self.inputdim / 4), self.fc_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "from_numpy_69": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda() if self.is_cuda() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_75": {
                "sequence": {
                    "value": "sent_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_78": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda() if self.is_cuda() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ],
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_301": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_302": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_304": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_305": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_307": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_308": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_312": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_313": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_314": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_321": {
                "input": {
                    "value": "u - v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_353": {
                "variable": {
                    "value": "self.loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_377": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_378": {
                "in_features": {
                    "value": "int(self.inputdim / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_380": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_381": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_383": {
                "p": {
                    "value": "self.dpout_fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_384": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_388": {
                "in_features": {
                    "value": "int(self.inputdim / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_389": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_390": {
                "in_features": {
                    "value": "self.fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_90": {
                "input": {
                    "value": "sent_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_lstm(sent_packed)[0]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(sent_output)[0]",
                            "Subscript"
                        ],
                        [
                            "sent_output.index_select(1, idx_unsort)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/InferSent/mutils.py": {
        "torch": {}
    },
    "src/InferSent/train_nli.py": {
        "torch": {
            "load_361": {
                "variable": {
                    "value": "debias_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(params.outputdir, params.outputmodelname)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_98": {
                "device": {
                    "value": "params.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_114": {
                "seed": {
                    "value": "params.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_115": {
                "seed": {
                    "value": "params.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_332": {
                "obj": {
                    "value": "debias_net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DebiasNet(config_debias_model)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(params.outputdir, params.outputmodelname))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(params.outputdir, params.outputmodelname)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/losses.py": {
        "torch": {
            "cat_7": {
                "variable": {
                    "value": "prob_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(prob_dist[:, 0] / 2.0).view(-1, 1), prob_dist[:, 1].view(-1, 1), (prob_dist[:, 0] / 2.0).view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_24": {
                "variable": {
                    "value": "prob_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(-1, self.num_labels)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "variable": {
                    "value": "prob_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(-1, self.num_labels)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_97": {
                "variable": {
                    "value": "self.loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "prob_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(-1, self.num_labels)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_121": {
                "input": {
                    "value": "torch.clamp(x, min=epsilon, max=1 - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "joint_pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(pt) + torch.log(pt_adv) + torch.log(pt_adv_second)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "joint_pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(pt) + self.poe_alpha * torch.log(pt_adv)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_121": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_50": {
                "input": {
                    "value": "1 - pt_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_82": {
                "input": {
                    "value": "joint_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "joint_pt.gather(1, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_108": {
                "input": {
                    "value": "inputs_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs_adv.view(-1, self.num_labels)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_49": {
                "input": {
                    "value": "pt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prob_dist.gather(1, targets)",
                            "Call"
                        ],
                        [
                            "self.compute_probs(inputs, targets)",
                            "Call"
                        ],
                        [
                            "self.compute_probs(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_47": {
                "input": {
                    "value": "pt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prob_dist.gather(1, targets)",
                            "Call"
                        ],
                        [
                            "self.compute_probs(inputs, targets)",
                            "Call"
                        ],
                        [
                            "self.compute_probs(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_49": {
                "input": {
                    "value": "1 - pt_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_78": {
                "input": {
                    "value": "pt_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_probs(inputs_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_80": {
                "input": {
                    "value": "pt_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_probs(inputs_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_47": {
                "input": {
                    "value": "1 - pt_scale_total",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}