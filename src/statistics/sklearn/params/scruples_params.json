{
    "src/scruples/baselines/labels.py": {
        "Pipeline_9": {
            "variable": {
                "value": "PriorBaseline",
                "possible_values": []
            },
            "steps": {
                "value": "[('classifier', DummyClassifier(strategy='prior'))]",
                "possible_values": []
            }
        },
        "Pipeline_20": {
            "variable": {
                "value": "StratifiedBaseline",
                "possible_values": []
            },
            "steps": {
                "value": "[('classifier', DummyClassifier(strategy='stratified'))]",
                "possible_values": []
            }
        },
        "DummyClassifier_10": {
            "strategy": {
                "value": "prior",
                "possible_values": []
            }
        },
        "DummyClassifier_21": {
            "strategy": {
                "value": "stratified",
                "possible_values": []
            }
        }
    },
    "src/scruples/baselines/linear.py": {
        "Pipeline_15": {
            "variable": {
                "value": "LogisticRegressionBaseline",
                "possible_values": []
            },
            "steps": {
                "value": "[('concatenator', FunctionTransformer(func=utils.concat_title_and_text, validate=False)), ('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='strict', preprocessor=None, tokenizer=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', max_features=None, vocabulary=None)), ('tfidf', TfidfTransformer(smooth_idf=True)), ('scaler', MaxAbsScaler()), ('classifier', LogisticRegression(penalty='l2', dual=False, tol=0.0001, intercept_scaling=1.0, solver='lbfgs', max_iter=100, warm_start=True))]",
                "possible_values": []
            }
        },
        "Pipeline_80": {
            "variable": {
                "value": "LogisticRankerBaseline",
                "possible_values": []
            },
            "steps": {
                "value": "[('featurizer', utils.ResourceTransformer(transformer=Pipeline([('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='featurizer', preprocessor=None, tokenizer=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', max_features=None, vocabulary=None)), ('tfidf', TfidfTransformer(smooth_idf=True)), ('scaler', MaxAbsScaler())]))), ('classifier', LogisticRegression(penalty='l2', dual=False, tol=0.0001, fit_intercept=False, intercept_scaling=1.0, solver='lbfgs', max_iter=100, warm_start=True))]",
                "possible_values": []
            }
        },
        "FunctionTransformer_18": {
            "func": {
                "value": "utils.concat_title_and_text",
                "possible_values": []
            },
            "validate": {
                "value": "False",
                "possible_values": []
            }
        },
        "CountVectorizer_22": {
            "input": {
                "value": "content",
                "possible_values": []
            },
            "encoding": {
                "value": "utf-8",
                "possible_values": []
            },
            "decode_error": {
                "value": "strict",
                "possible_values": []
            },
            "preprocessor": {
                "value": "None",
                "possible_values": []
            },
            "tokenizer": {
                "value": "None",
                "possible_values": []
            },
            "token_pattern": {
                "value": "(?u)\\\\b\\\\w\\\\w+\\\\b",
                "possible_values": []
            },
            "max_features": {
                "value": "None",
                "possible_values": []
            },
            "vocabulary": {
                "value": "None",
                "possible_values": []
            }
        },
        "TfidfTransformer_34": {
            "smooth_idf": {
                "value": "True",
                "possible_values": []
            }
        },
        "MaxAbsScaler_38": {
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "LogisticRegression_42": {
            "penalty": {
                "value": "l2",
                "possible_values": []
            },
            "dual": {
                "value": "False",
                "possible_values": []
            },
            "tol": {
                "value": "0.0001",
                "possible_values": []
            },
            "intercept_scaling": {
                "value": "1.0",
                "possible_values": []
            },
            "solver": {
                "value": "lbfgs",
                "possible_values": []
            },
            "max_iter": {
                "value": "100",
                "possible_values": []
            },
            "warm_start": {
                "value": "True",
                "possible_values": []
            }
        },
        "LogisticRegression_109": {
            "penalty": {
                "value": "l2",
                "possible_values": []
            },
            "dual": {
                "value": "False",
                "possible_values": []
            },
            "tol": {
                "value": "0.0001",
                "possible_values": []
            },
            "fit_intercept": {
                "value": "False",
                "possible_values": []
            },
            "intercept_scaling": {
                "value": "1.0",
                "possible_values": []
            },
            "solver": {
                "value": "lbfgs",
                "possible_values": []
            },
            "max_iter": {
                "value": "100",
                "possible_values": []
            },
            "warm_start": {
                "value": "True",
                "possible_values": []
            }
        },
        "Pipeline_84": {
            "steps": {
                "value": "[('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='featurizer', preprocessor=None, tokenizer=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', max_features=None, vocabulary=None)), ('tfidf', TfidfTransformer(smooth_idf=True)), ('scaler', MaxAbsScaler())]",
                "possible_values": []
            }
        },
        "CountVectorizer_87": {
            "input": {
                "value": "content",
                "possible_values": []
            },
            "encoding": {
                "value": "utf-8",
                "possible_values": []
            },
            "decode_error": {
                "value": "featurizer",
                "possible_values": []
            },
            "preprocessor": {
                "value": "None",
                "possible_values": []
            },
            "tokenizer": {
                "value": "None",
                "possible_values": []
            },
            "token_pattern": {
                "value": "(?u)\\\\b\\\\w\\\\w+\\\\b",
                "possible_values": []
            },
            "max_features": {
                "value": "None",
                "possible_values": []
            },
            "vocabulary": {
                "value": "None",
                "possible_values": []
            }
        },
        "TfidfTransformer_99": {
            "smooth_idf": {
                "value": "True",
                "possible_values": []
            }
        },
        "MaxAbsScaler_103": {
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "src/scruples/baselines/metrics.py": {},
    "src/scruples/baselines/naivebayes.py": {
        "Pipeline_16": {
            "variable": {
                "value": "BernoulliNBBaseline",
                "possible_values": []
            },
            "steps": {
                "value": "[('concatenator', FunctionTransformer(func=utils.concat_title_and_text, validate=False)), ('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='strict', preprocessor=None, tokenizer=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', max_features=None, vocabulary=None, binary=True)), ('classifier', BernoulliNB(binarize=None, fit_prior=True))]",
                "possible_values": []
            }
        },
        "Pipeline_60": {
            "variable": {
                "value": "MultinomialNBBaseline",
                "possible_values": []
            },
            "steps": {
                "value": "[('concatenator', FunctionTransformer(func=utils.concat_title_and_text, validate=False)), ('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='strict', preprocessor=None, tokenizer=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', max_features=None, vocabulary=None, binary=False)), ('classifier', MultinomialNB(fit_prior=True))]",
                "possible_values": []
            }
        },
        "Pipeline_104": {
            "variable": {
                "value": "ComplementNBBaseline",
                "possible_values": []
            },
            "steps": {
                "value": "[('concatenator', FunctionTransformer(func=utils.concat_title_and_text, validate=False)), ('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='strict', preprocessor=None, tokenizer=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', max_features=None, vocabulary=None, binary=False)), ('classifier', ComplementNB(fit_prior=True))]",
                "possible_values": []
            }
        },
        "FunctionTransformer_19": {
            "func": {
                "value": "utils.concat_title_and_text",
                "possible_values": []
            },
            "validate": {
                "value": "False",
                "possible_values": []
            }
        },
        "CountVectorizer_23": {
            "input": {
                "value": "content",
                "possible_values": []
            },
            "encoding": {
                "value": "utf-8",
                "possible_values": []
            },
            "decode_error": {
                "value": "strict",
                "possible_values": []
            },
            "preprocessor": {
                "value": "None",
                "possible_values": []
            },
            "tokenizer": {
                "value": "None",
                "possible_values": []
            },
            "token_pattern": {
                "value": "(?u)\\\\b\\\\w\\\\w+\\\\b",
                "possible_values": []
            },
            "max_features": {
                "value": "None",
                "possible_values": []
            },
            "vocabulary": {
                "value": "None",
                "possible_values": []
            },
            "binary": {
                "value": "True",
                "possible_values": []
            }
        },
        "BernoulliNB_36": {
            "binarize": {
                "value": "None",
                "possible_values": []
            },
            "fit_prior": {
                "value": "True",
                "possible_values": []
            }
        },
        "FunctionTransformer_63": {
            "func": {
                "value": "utils.concat_title_and_text",
                "possible_values": []
            },
            "validate": {
                "value": "False",
                "possible_values": []
            }
        },
        "CountVectorizer_67": {
            "input": {
                "value": "content",
                "possible_values": []
            },
            "encoding": {
                "value": "utf-8",
                "possible_values": []
            },
            "decode_error": {
                "value": "strict",
                "possible_values": []
            },
            "preprocessor": {
                "value": "None",
                "possible_values": []
            },
            "tokenizer": {
                "value": "None",
                "possible_values": []
            },
            "token_pattern": {
                "value": "(?u)\\\\b\\\\w\\\\w+\\\\b",
                "possible_values": []
            },
            "max_features": {
                "value": "None",
                "possible_values": []
            },
            "vocabulary": {
                "value": "None",
                "possible_values": []
            },
            "binary": {
                "value": "False",
                "possible_values": []
            }
        },
        "MultinomialNB_80": {
            "fit_prior": {
                "value": "True",
                "possible_values": []
            }
        },
        "FunctionTransformer_107": {
            "func": {
                "value": "utils.concat_title_and_text",
                "possible_values": []
            },
            "validate": {
                "value": "False",
                "possible_values": []
            }
        },
        "CountVectorizer_111": {
            "input": {
                "value": "content",
                "possible_values": []
            },
            "encoding": {
                "value": "utf-8",
                "possible_values": []
            },
            "decode_error": {
                "value": "strict",
                "possible_values": []
            },
            "preprocessor": {
                "value": "None",
                "possible_values": []
            },
            "tokenizer": {
                "value": "None",
                "possible_values": []
            },
            "token_pattern": {
                "value": "(?u)\\\\b\\\\w\\\\w+\\\\b",
                "possible_values": []
            },
            "max_features": {
                "value": "None",
                "possible_values": []
            },
            "vocabulary": {
                "value": "None",
                "possible_values": []
            },
            "binary": {
                "value": "False",
                "possible_values": []
            }
        },
        "ComplementNB_124": {
            "fit_prior": {
                "value": "True",
                "possible_values": []
            }
        }
    },
    "src/scruples/baselines/style.py": {
        "LengthRanker_27": {
            "base_class_0": {
                "value": "sklearn.base.BaseEstimator",
                "possible_values": []
            },
            "base_class_1": {
                "value": "sklearn.base.ClassifierMixin",
                "possible_values": []
            }
        },
        "StyleFeaturizer_161": {
            "base_class_0": {
                "value": "sklearn.base.BaseEstimator",
                "possible_values": []
            },
            "base_class_1": {
                "value": "sklearn.base.TransformerMixin",
                "possible_values": []
            }
        },
        "Pipeline_315": {
            "variable": {
                "value": "StylisticXGBoostBaseline",
                "possible_values": []
            },
            "steps": {
                "value": "[('featurizer', ColumnTransformer([('title_style', StyleFeaturizer(), 'title'), ('text_style', StyleFeaturizer(), 'text')], remainder='drop')), ('classifier', XGBClassifier(n_estimators=100, verbosity=0, objective='multi:softprob', booster='gbtree', n_jobs=1, max_delta_step=0, colsample_bylevel=1.0, colsample_bynode=1.0))]",
                "possible_values": []
            }
        },
        "Pipeline_365": {
            "variable": {
                "value": "FewestWordsBaseline",
                "possible_values": []
            },
            "steps": {
                "value": "[('classifier', LengthRanker(choose='shortest', length='words'))]",
                "possible_values": []
            }
        },
        "Pipeline_373": {
            "variable": {
                "value": "MostWordsBaseline",
                "possible_values": []
            },
            "steps": {
                "value": "[('classifier', LengthRanker(choose='longest', length='words'))]",
                "possible_values": []
            }
        },
        "Pipeline_381": {
            "variable": {
                "value": "FewestCharactersBaseline",
                "possible_values": []
            },
            "steps": {
                "value": "[('classifier', LengthRanker(choose='shortest', length='characters'))]",
                "possible_values": []
            }
        },
        "Pipeline_389": {
            "variable": {
                "value": "MostCharactersBaseline",
                "possible_values": []
            },
            "steps": {
                "value": "[('classifier', LengthRanker(choose='longest', length='characters'))]",
                "possible_values": []
            }
        },
        "Pipeline_400": {
            "variable": {
                "value": "StyleRankerBaseline",
                "possible_values": []
            },
            "steps": {
                "value": "[('featurizer', utils.ResourceTransformer(transformer=Pipeline([('featurizer', StyleFeaturizer()), ('scaler', MaxAbsScaler())]))), ('classifier', LogisticRegression(penalty='l2', dual=False, tol=0.0001, fit_intercept=False, intercept_scaling=1.0, solver='lbfgs', max_iter=100, warm_start=True))]",
                "possible_values": []
            }
        },
        "ColumnTransformer_318": {
            "transformers": {
                "value": "[('title_style', StyleFeaturizer(), 'title'), ('text_style', StyleFeaturizer(), 'text')]",
                "possible_values": []
            },
            "remainder": {
                "value": "drop",
                "possible_values": []
            }
        },
        "LogisticRegression_417": {
            "penalty": {
                "value": "l2",
                "possible_values": []
            },
            "dual": {
                "value": "False",
                "possible_values": []
            },
            "tol": {
                "value": "0.0001",
                "possible_values": []
            },
            "fit_intercept": {
                "value": "False",
                "possible_values": []
            },
            "intercept_scaling": {
                "value": "1.0",
                "possible_values": []
            },
            "solver": {
                "value": "lbfgs",
                "possible_values": []
            },
            "max_iter": {
                "value": "100",
                "possible_values": []
            },
            "warm_start": {
                "value": "True",
                "possible_values": []
            }
        },
        "Pipeline_404": {
            "steps": {
                "value": "[('featurizer', StyleFeaturizer()), ('scaler', MaxAbsScaler())]",
                "possible_values": []
            }
        },
        "MaxAbsScaler_411": {
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "src/scruples/baselines/trees.py": {
        "Pipeline_15": {
            "variable": {
                "value": "RandomForestBaseline",
                "possible_values": []
            },
            "steps": {
                "value": "[('concatenator', FunctionTransformer(func=utils.concat_title_and_text, validate=False)), ('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='strict', preprocessor=None, tokenizer=None, token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', max_features=None, vocabulary=None)), ('tfidf', TfidfTransformer(smooth_idf=True)), ('classifier', RandomForestClassifier(n_estimators=100, max_depth=None, max_features='auto', max_leaf_nodes=None, min_impurity_decrease=0.0, oob_score=False, n_jobs=1, verbose=0, warm_start=False))]",
                "possible_values": []
            }
        },
        "FunctionTransformer_18": {
            "func": {
                "value": "utils.concat_title_and_text",
                "possible_values": []
            },
            "validate": {
                "value": "False",
                "possible_values": []
            }
        },
        "CountVectorizer_22": {
            "input": {
                "value": "content",
                "possible_values": []
            },
            "encoding": {
                "value": "utf-8",
                "possible_values": []
            },
            "decode_error": {
                "value": "strict",
                "possible_values": []
            },
            "preprocessor": {
                "value": "None",
                "possible_values": []
            },
            "tokenizer": {
                "value": "None",
                "possible_values": []
            },
            "token_pattern": {
                "value": "(?u)\\\\b\\\\w\\\\w+\\\\b",
                "possible_values": []
            },
            "max_features": {
                "value": "None",
                "possible_values": []
            },
            "vocabulary": {
                "value": "None",
                "possible_values": []
            }
        },
        "TfidfTransformer_34": {
            "smooth_idf": {
                "value": "True",
                "possible_values": []
            }
        },
        "RandomForestClassifier_38": {
            "n_estimators": {
                "value": "100",
                "possible_values": []
            },
            "max_depth": {
                "value": "None",
                "possible_values": []
            },
            "max_features": {
                "value": "auto",
                "possible_values": []
            },
            "max_leaf_nodes": {
                "value": "None",
                "possible_values": []
            },
            "min_impurity_decrease": {
                "value": "0.0",
                "possible_values": []
            },
            "oob_score": {
                "value": "False",
                "possible_values": []
            },
            "n_jobs": {
                "value": "1",
                "possible_values": []
            },
            "verbose": {
                "value": "0",
                "possible_values": []
            },
            "warm_start": {
                "value": "False",
                "possible_values": []
            }
        }
    },
    "src/scruples/baselines/utils.py": {
        "ResourceTransformer_56": {
            "base_class_0": {
                "value": "sklearn.base.BaseEstimator",
                "possible_values": []
            },
            "base_class_1": {
                "value": "sklearn.base.TransformerMixin",
                "possible_values": []
            }
        }
    },
    "src/scruples/demos/scoracle/app.py": {},
    "src/scruples/scripts/analyze/corpus/extractions.py": {},
    "src/scruples/scripts/analyze/corpus/predictions.py": {},
    "src/scruples/scripts/analyze/oracle_estimator.py": {},
    "src/scruples/scripts/analyze/resource/predictions.py": {},
    "src/scruples/scripts/analyze/resource/topics.py": {
        "Pipeline_46": {
            "variable": {
                "value": "model",
                "possible_values": []
            },
            "steps": {
                "value": "[('vectorizer', CountVectorizer(input='content', encoding='utf-8', decode_error='strict', strip_accents=None, lowercase=True, preprocessor=None, tokenizer=None, stop_words='english', token_pattern='(?u)\\\\b\\\\w\\\\w+\\\\b', ngram_range=(1, 1), analyzer='word', max_df=1.0, min_df=2, max_features=None, vocabulary=None, binary=False)), ('topic_model', LatentDirichletAllocation(n_components=N_COMPONENTS))]",
                "possible_values": []
            }
        },
        "CountVectorizer_49": {
            "input": {
                "value": "content",
                "possible_values": []
            },
            "encoding": {
                "value": "utf-8",
                "possible_values": []
            },
            "decode_error": {
                "value": "strict",
                "possible_values": []
            },
            "strip_accents": {
                "value": "None",
                "possible_values": []
            },
            "lowercase": {
                "value": "True",
                "possible_values": []
            },
            "preprocessor": {
                "value": "None",
                "possible_values": []
            },
            "tokenizer": {
                "value": "None",
                "possible_values": []
            },
            "stop_words": {
                "value": "english",
                "possible_values": []
            },
            "token_pattern": {
                "value": "(?u)\\\\b\\\\w\\\\w+\\\\b",
                "possible_values": []
            },
            "ngram_range": {
                "value": "(1, 1)",
                "possible_values": []
            },
            "analyzer": {
                "value": "word",
                "possible_values": []
            },
            "max_df": {
                "value": "1.0",
                "possible_values": []
            },
            "min_df": {
                "value": "2",
                "possible_values": []
            },
            "max_features": {
                "value": "None",
                "possible_values": []
            },
            "vocabulary": {
                "value": "None",
                "possible_values": []
            },
            "binary": {
                "value": "False",
                "possible_values": []
            }
        },
        "LatentDirichletAllocation_70": {
            "n_components": {
                "value": "N_COMPONENTS",
                "possible_values": [
                    "5"
                ]
            }
        }
    },
    "src/scruples/scripts/evaluate/corpus/run_shallow.py": {},
    "src/scruples/scripts/evaluate/resource/run_shallow.py": {},
    "src/scruples/utils.py": {},
    "tests/scruples/baselines/utils.py": {
        "BaselineTestMixin_18": {}
    },
    "tests/scruples/demos/scoracle/test_app.py": {
        "AppTestCase_13": {}
    }
}