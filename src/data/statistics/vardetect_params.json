{
    "sss/kmeans_sss.py": {
        "sklearn": {
            "pairwise_distances_argmin_min_99": {
                "variable": {
                    "value": "(closest, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "center_vec.reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "one_cluster_tf_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((len(data_idx_in_i_cluster), cluster_centers.shape[1]))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "limit_epochs_46": {
                "tensor": {
                    "value": "tf.convert_to_tensor(points, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_46": {
                "value": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Y_vec",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "attacks/deepfool.py": {
        "tensorflow": {
            "stop_gradient_81": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_model_X + delta * (1 + eta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_82": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(original_model_X + delta * (1 + eta))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(original_model_X + z * (1 + eta), clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(original_model_X + z * (1 + eta), clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(original_model_X + z * (1 + eta), clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_109": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(model.prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y0, [-1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(model.prob)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_111": {
                "variable": {
                    "value": "k0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(model.prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y0, [-1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(model.prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "while_loop_169": {
                "variable": {
                    "value": "(_, noise)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[0, tf.zeros_like(original_model_X)]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "_deepfoolx",
                    "type": "str",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_178": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_181": {
                "variable": {
                    "value": "k0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(model.prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y0, [-1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(model.prob)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_182": {
                "variable": {
                    "value": "k0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.range(B), k0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_224": {
                "variable": {
                    "value": "(_, noise)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[0, tf.zeros_like(original_model_X)]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "_deepfoolx_batch",
                    "type": "str",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "map_fn_76": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "_f",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "original_model_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.X",
                            "Attribute"
                        ],
                        [
                            "model.X",
                            "Attribute"
                        ],
                        [
                            "model.X",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "deepfool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_118": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "original_model_X + z * (1 + eta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_125": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.prob",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(model.prob, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model.prob, [-1])",
                            "Call"
                        ],
                        [
                            "model.prob",
                            "Attribute"
                        ]
                    ]
                }
            },
            "argmax_126": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.prob",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(model.prob, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model.prob, [-1])",
                            "Call"
                        ],
                        [
                            "model.prob",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clip_by_value_138": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "original_model_X + z * (1 + eta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reshape(tf.gradients(y[j], xadv)[0], [-1]) for j in range(ydim)]",
                            "ListComp"
                        ],
                        [
                            "[tf.gradients(y[:, j], xadv)[0] for j in range(ydim)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_158": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "yo - yk",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_160": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "go - gk",
                            "BinOp"
                        ],
                        [
                            "g - gk",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_162": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a / c",
                            "BinOp"
                        ],
                        [
                            "a / c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "si * bi",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(dx, [-1] + xdim)",
                            "Call"
                        ],
                        [
                            "si * bi",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + xdim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_194": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "original_model_X + z * (1 + eta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_203": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reshape(tf.gradients(y[j], xadv)[0], [-1]) for j in range(ydim)]",
                            "ListComp"
                        ],
                        [
                            "[tf.gradients(y[:, j], xadv)[0] for j in range(ydim)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_204": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(gs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.stack(gs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(g, perm)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(xshape) + 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_206": {
                "variable": {
                    "value": "yk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather_nd(y, k0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_207": {
                "variable": {
                    "value": "gk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather_nd(g, k0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_209": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y - yk",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_211": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(b, [-1, ydim, xdim])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmin_216": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a / c",
                            "BinOp"
                        ],
                        [
                            "a / c",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_217": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.range(B), ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "si",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "si",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(si, [-1] + [1] * len(xshape))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + [1] * len(xshape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_71": {
                "variable": {
                    "value": "xi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(xi, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_132": {
                "x": {
                    "value": "tf.less(i, epochs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(k0, k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_191": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y.get_shape().as_list()[1] > 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_133": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y.get_shape().as_list()[1] > 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_134": {
                "x": {
                    "value": "k0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(y0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(y0, axis=1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.stack((tf.range(B), k0), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_149": {
                "tensor": {
                    "value": "tf.gradients(y[j], xadv)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_152": {
                "values": {
                    "value": "(y[:k0], y[k0 + 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_153": {
                "values": {
                    "value": "(g[:k0], g[k0 + 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_169": {
                "input": {
                    "value": "original_model_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.X",
                            "Attribute"
                        ],
                        [
                            "model.X",
                            "Attribute"
                        ],
                        [
                            "model.X",
                            "Attribute"
                        ]
                    ]
                }
            },
            "shape_179": {
                "input": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(model.prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y0, [-1])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(model.prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_206": {
                "params": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.prob",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(model.prob, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(model.prob, [-1])",
                            "Call"
                        ],
                        [
                            "model.prob",
                            "Attribute"
                        ]
                    ]
                },
                "indices": {
                    "value": "k0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(y0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(y0, axis=1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.stack((tf.range(B), k0), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_207": {
                "params": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(gs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.stack(gs, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(g, perm)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "k0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(y0)",
                            "Call"
                        ],
                        [
                            "tf.argmax(y0, axis=1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.stack((tf.range(B), k0), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_211": {
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "go - gk",
                            "BinOp"
                        ],
                        [
                            "g - gk",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, ydim, xdim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_219": {
                "params": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "go - gk",
                            "BinOp"
                        ],
                        [
                            "g - gk",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmin(score)",
                            "Call"
                        ],
                        [
                            "tf.argmin(score, axis=1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.stack((tf.range(B), ind), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_224": {
                "input": {
                    "value": "original_model_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.X",
                            "Attribute"
                        ],
                        [
                            "model.X",
                            "Attribute"
                        ],
                        [
                            "model.X",
                            "Attribute"
                        ]
                    ]
                }
            },
            "gradients_202": {
                "ys": {
                    "value": "y[:, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(original_model_X + delta * (1 + eta))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(original_model_X + z * (1 + eta), clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(original_model_X + z * (1 + eta), clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(original_model_X + z * (1 + eta), clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_149": {
                "ys": {
                    "value": "y[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(original_model_X + delta * (1 + eta))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(original_model_X + z * (1 + eta), clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(original_model_X + z * (1 + eta), clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(original_model_X + z * (1 + eta), clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "attacks/fast_gradient.py": {
        "tensorflow": {
            "identity_47": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.X",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_57": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(eps)",
                            "Call"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_81": {
                "variable": {
                    "value": "(xadv, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(xadv, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "fast_gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_73": {
                "variable": {
                    "value": "(dy_dx,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.mean_squared_error(y, model.mean)",
                            "Call"
                        ],
                        [
                            "model.loss_fn(labels=y, logits=logits)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(model.X)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(xadv + perturbation_multiplier * eps * noise_fn(dy_dx))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_77": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xadv + perturbation_multiplier * eps * noise_fn(dy_dx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_78": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(model.X)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(xadv + perturbation_multiplier * eps * noise_fn(dy_dx))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_60": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_squared_error_68": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predictions_one_hot",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "model.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "attacks/grad0.py": {
        "tensorflow": {
            "map_fn_53": {
                "variable": {
                    "value": "(xadv, changed_count)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "_f",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "(model.X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(tf.float32, tf.int32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "grad0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_67": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.X",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_68": {
                "variable": {
                    "value": "k0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(y, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "while_loop_110": {
                "variable": {
                    "value": "(xadv, changed_count, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(xadv, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "_grad0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "variable": {
                    "value": "xi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xi_yi[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_49": {
                "variable": {
                    "value": "yi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xi_yi[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_76": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(model.prob, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_88": {
                "variable": {
                    "value": "(dy_dx,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.loss_fn(labels=y, logits=logits)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(model.X)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(xadv * result_prime + x_prime * result)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_92": {
                "variable": {
                    "value": "x_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.sign(dy_dx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_94": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dy_dx",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "x_prime - xadv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(dy_dx, x_prime - xadv)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(delta_y.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.one_hot(indices=tf.nn.top_k(temp, k=eps)[1], depth=temp.shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.one_hot(indices=tf.nn.top_k(temp, k=eps)[1], depth=temp.shape[1]), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, delta_y.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "delta_y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_104": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xadv * result_prime + x_prime * result",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predictions_one_hot",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_78": {
                "x": {
                    "value": "tf.less(i, epochs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(k0, k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_102": {
                "x": {
                    "value": "tf.reduce_sum(result)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "tensor": {
                    "value": "model.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_78": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_79": {
                "x": {
                    "value": "k0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(y, [-1]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(tf.reshape(model.prob, [-1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_92": {
                "x": {
                    "value": "dy_dx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "one_hot_97": {
                "indices": {
                    "value": "tf.nn.top_k(temp, k=eps)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "temp.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "input_tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.one_hot(indices=tf.nn.top_k(temp, k=eps)[1], depth=temp.shape[1]), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, delta_y.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_97": {
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(delta_y, shape=(delta_y.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "attacks/jsma.py": {
        "tensorflow": {
            "cond_61": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(0, tf.rank(y))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros([n], dtype=tf.int32) + y",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : y",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.range(n), target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_125": {
                "variable": {
                    "value": "(_, xadv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(0, tf.identity(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "_jsma_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "while_loop_177": {
                "variable": {
                    "value": "(_, xadv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(0, tf.identity(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "_jsma2_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_int32_68": {
                "variable": {
                    "value": "epochs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(tmp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_97": {
                "variable": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ybar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(xadv)",
                            "Call"
                        ],
                        [
                            "model(xadv)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "yind",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_or_103": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eps < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "xadv < clip_max",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_or_104": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eps > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "xadv > clip_min",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_105": {
                "variable": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[dt_dx >= 0, do_dx <= 0, c0, c1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_106": {
                "variable": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all([dt_dx >= 0, do_dx <= 0, c0, c1], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(cond)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all([dt_dx >= 0, do_dx <= 0, c0, c1], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(cond)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond * score_fn(dt_dx, do_dx)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [-1, dim])",
                            "Call"
                        ],
                        [
                            "cond * score_fn(dt_dx, do_dx)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_116": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond * score_fn(dt_dx, do_dx)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [-1, dim])",
                            "Call"
                        ],
                        [
                            "cond * score_fn(dt_dx, do_dx)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_117": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(score, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_prod(shape[1:])",
                            "Call"
                        ],
                        [
                            "_prod(shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "on_value": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(ind, dim, on_value=eps, off_value=0.0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dx, [-1] + shape[1:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(dxi + dxj, [-1] + shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_120": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xadv + dx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_121": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(xadv + dx)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(xadv + dx)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_nd_142": {
                "variable": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "ybar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(xadv)",
                            "Call"
                        ],
                        [
                            "model(xadv)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "yind",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_or_148": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eps < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "xadv < clip_max",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_or_149": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eps > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "xadv > clip_min",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_150": {
                "variable": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[dt_dx >= 0, do_dx <= 0, c0, c1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_151": {
                "variable": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all([dt_dx >= 0, do_dx <= 0, c0, c1], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(cond)",
                            "Call"
                        ],
                        [
                            "tf.reduce_all([dt_dx >= 0, do_dx <= 0, c0, c1], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.to_float(cond)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_158": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond * score_fn(dt_dx, do_dx)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [-1, dim])",
                            "Call"
                        ],
                        [
                            "cond * score_fn(dt_dx, do_dx)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_160": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond * score_fn(dt_dx, do_dx)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [-1, dim])",
                            "Call"
                        ],
                        [
                            "cond * score_fn(dt_dx, do_dx)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_161": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond * score_fn(dt_dx, do_dx)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [-1, dim])",
                            "Call"
                        ],
                        [
                            "cond * score_fn(dt_dx, do_dx)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(score, [-1, dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_162": {
                "variable": {
                    "value": "score2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a + b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim * dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_163": {
                "variable": {
                    "value": "ij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(a + b, [-1, dim * dim])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_165": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ij / dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_168": {
                "variable": {
                    "value": "dxi",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(ij / dim)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_prod(shape[1:])",
                            "Call"
                        ],
                        [
                            "_prod(shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "on_value": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "one_hot_169": {
                "variable": {
                    "value": "dxj",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(ij) % dim",
                            "BinOp"
                        ]
                    ]
                },
                "depth": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_prod(shape[1:])",
                            "Call"
                        ],
                        [
                            "_prod(shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "on_value": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dxi + dxj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1] + shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_172": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xadv + dx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_173": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(xadv + dx)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(xadv + dx)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "clip_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_59": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iterable",
                            "variable"
                        ]
                    ]
                }
            },
            "equal_61": {
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.rank(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_89": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(ij / dim)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.floor(tmp))",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_134": {
                "x": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.floor(tmp))",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_34": {
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rank_61": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_67": {
                "x": {
                    "value": "tf.size(x[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_68": {
                "x": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.size(x[0])) * epochs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gradients_94": {
                "ys": {
                    "value": "ybar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(xadv)",
                            "Call"
                        ],
                        [
                            "model(xadv)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(xadv + dx)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(xadv + dx)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_98": {
                "ys": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(ybar, yind)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(ybar, yind)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(xadv + dx)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(xadv + dx)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_125": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iterable",
                            "variable"
                        ]
                    ]
                }
            },
            "gradients_139": {
                "ys": {
                    "value": "ybar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(xadv)",
                            "Call"
                        ],
                        [
                            "model(xadv)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(xadv + dx)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(xadv + dx)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_143": {
                "ys": {
                    "value": "yt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(ybar, yind)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(ybar, yind)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(xadv + dx)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(xadv + dx)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(xadv, clip_min, clip_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_166": {
                "x": {
                    "value": "ij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(score2, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_177": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iterable",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "shape": {
                    "value": "[n]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "size_67": {
                "input": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "attacks/pgd.py": {
        "tensorflow": {}
    },
    "attacks/stg.py": {
        "tensorflow": {
            "map_fn_51": {
                "variable": {
                    "value": "(xadv, changed_count)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "_f",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "(model.X, target, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(tf.float32, tf.int32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "stg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_64": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.X",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_65": {
                "variable": {
                    "value": "k0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(model.prob, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "while_loop_106": {
                "variable": {
                    "value": "(xadv, changed_count, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(xadv, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "_stg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_45": {
                "variable": {
                    "value": "xi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xi_yi[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "yi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xi_yi[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_76": {
                "variable": {
                    "value": "(dy_dx,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.loss_fn(labels=y, logits=logits)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(model.X)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(xadv * result_prime + x_prime * result)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_80": {
                "variable": {
                    "value": "x_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.sign(dy_dx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_83": {
                "variable": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dy_dx",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "x_prime - xadv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "delta_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(dy_dx, x_prime - xadv)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(delta_y.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.one_hot(indices=tf.nn.top_k(-temp, k=k)[1], depth=temp.shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.one_hot(indices=tf.nn.top_k(-temp, k=k)[1], depth=temp.shape[1]), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, delta_y.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "delta_y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_100": {
                "variable": {
                    "value": "xadv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xadv * result_prime + x_prime * result",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "tensor": {
                    "value": "model.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_68": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_94": {
                "x": {
                    "value": "tf.reduce_sum(result)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_80": {
                "x": {
                    "value": "dy_dx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "one_hot_86": {
                "indices": {
                    "value": "tf.nn.top_k(-temp, k=k)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "temp.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.one_hot(indices=tf.nn.top_k(-temp, k=k)[1], depth=temp.shape[1]), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, delta_y.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_86": {
                "input": {
                    "value": "-temp",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cfg.py": {
        "tensorflow": {
            "ConfigProto_164": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DEFINE_float_13": {
                "name": {
                    "value": "dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Dropout keep probability (default: 0.5)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_14": {
                "name": {
                    "value": "lm_dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Dropout keep probability (default: 0.5)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_15": {
                "name": {
                    "value": "l2_reg_lambda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 regularization lambda (default: 0.0)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_16": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_17": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "adam",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Custom optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "filter_sizes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3,4,5",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Comma-separated filter sizes (default: '3,4,5')\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_21": {
                "name": {
                    "value": "num_filters",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of filters per filter size (default: 64)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_22": {
                "name": {
                    "value": "sequence_length",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "seq length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_23": {
                "name": {
                    "value": "vocab_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "vocab size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_24": {
                "name": {
                    "value": "copy_filter_sizes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3,4,5",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Comma-separated filter sizes (default: '3,4,5')\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_25": {
                "name": {
                    "value": "copy_num_filters",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of filters per filter size (default: 64)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "mem_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "mem size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_29": {
                "name": {
                    "value": "lm_learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_30": {
                "name": {
                    "value": "lm_early_stop_tolerance",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Early stop (default: 200 evaluations)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_34": {
                "name": {
                    "value": "padding_loc",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "right",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "padding loc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "embedding_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "emb size)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "defender_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "defender type",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_47": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch Size (default: 150)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_48": {
                "name": {
                    "value": "num_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training epochs (default: 100)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "evaluate_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Evaluate model on dev set after this many steps (default: 1)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_50": {
                "name": {
                    "value": "gan_evaluate_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "GAN evaluate every",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_51": {
                "name": {
                    "value": "early_stop_tolerance",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Early stop (default: 20 evaluations)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_53": {
                "name": {
                    "value": "copy_early_stop_tolerance",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Early stop (default: 20 evaluations)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "dae_early_stop_tolerance",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Early stop (default: 10 evaluations)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_62": {
                "name": {
                    "value": "copy_num_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of training epochs (default: 1000)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_63": {
                "name": {
                    "value": "copy_evaluate_every",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Evaluate copy model after this many epochs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_75": {
                "name": {
                    "value": "svm_threshold",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "svm threshold",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_77": {
                "name": {
                    "value": "anomaly_ratio",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "anomaly ratio",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_81": {
                "name": {
                    "value": "eps",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "eps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_82": {
                "name": {
                    "value": "jtype",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "jsma",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "jsma",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_85": {
                "name": {
                    "value": "noise_mean",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "noise mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_89": {
                "name": {
                    "value": "disc_threshold",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Disc threshold",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_90": {
                "name": {
                    "value": "recon_threshold",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Recon threshold",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_91": {
                "name": {
                    "value": "gan_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "GAN epochs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_94": {
                "name": {
                    "value": "vnoise",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "noise volume",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_97": {
                "name": {
                    "value": "vnoise_min",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "noise volume min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_98": {
                "name": {
                    "value": "vnoise_max",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "noise volume max",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_99": {
                "name": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_100": {
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_106": {
                "name": {
                    "value": "latent_dim",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "latent dim",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_109": {
                "name": {
                    "value": "grad0_prate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "grad0_prate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_116": {
                "name": {
                    "value": "num_checkpoints",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of checkpoints to store (default: 5)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_119": {
                "name": {
                    "value": "source_model",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Source model type(eg DeepCNN/DNN) to copy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_120": {
                "name": {
                    "value": "copy_model",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Copy model type(eg DeepCNN/DNN)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_121": {
                "name": {
                    "value": "true_dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Source model will be trained on this",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_122": {
                "name": {
                    "value": "noise_dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Source model will be copied using this",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_123": {
                "name": {
                    "value": "sampling_method",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "random",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "sampling method",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_125": {
                "name": {
                    "value": "kmeans_iter",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "K means iteration",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_127": {
                "name": {
                    "value": "phase1_fac",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Multiple of samples to use in Phase 1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_128": {
                "name": {
                    "value": "phase2_fac",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Multiple of samples to use in Phase 2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_131": {
                "name": {
                    "value": "phase1_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Multiple of samples to use in Phase 1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_132": {
                "name": {
                    "value": "phase2_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Multiple of samples to use in Phase 2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_135": {
                "name": {
                    "value": "subsampling_start_batch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Start Batch of imagenet to use for subsampling experiments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_136": {
                "name": {
                    "value": "subsampling_end_batch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "End Batch of imagenet to use for subsampling experiments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_138": {
                "name": {
                    "value": "num_to_keep",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of samples to make use of for imagenet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_140": {
                "name": {
                    "value": "query_budget",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "total query budget",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_141": {
                "name": {
                    "value": "initial_seed",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "intial seed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_142": {
                "name": {
                    "value": "num_iter",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "num of iterations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_143": {
                "name": {
                    "value": "val_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "validation size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_144": {
                "name": {
                    "value": "k",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "add queries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_146": {
                "name": {
                    "value": "seed",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1337",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "seed for RNGs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_149": {
                "name": {
                    "value": "linesearch_budget",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "validation size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_153": {
                "name": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_157": {
                "name": {
                    "value": "home",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "expanduser('~')",
                    "type": "Call",
                    "possible_values": []
                },
                "help": {
                    "value": "Home directory",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/deepcnn.py": {
        "tensorflow": {}
    },
    "models/defended_model.py": {
        "tensorflow": {
            "one_hot_37": {
                "variable": {
                    "value": "self.predictions_one_hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/nn.py": {
        "tensorflow": {}
    },
    "models/vae.py": {
        "tensorflow": {}
    },
    "run.py": {
        "tensorflow": {}
    },
    "sss/kcenter_sss.py": {
        "tensorflow": {
            "Session_56": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/class_loader.py": {
        "tensorflow": {
            "AdagradOptimizer_202": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "cfg.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_204": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/helper.py": {
        "tensorflow": {}
    },
    "utils/kcenter.py": {
        "tensorflow": {
            "reduce_sum_34": {
                "variable": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(A)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_35": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(B)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "na",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(A), 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(na, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(B), 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(nb, [1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_40": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(na - 2 * tf.matmul(A, B, False, True) + nb, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_min_52": {
                "variable": {
                    "value": "D_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.maximum(na - 2 * tf.matmul(A, B, False, True) + nb, 0.0))",
                            "Call"
                        ],
                        [
                            "pairwise_distances(self.A, self.B)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_53": {
                "variable": {
                    "value": "self.D_min_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "D_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(D, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_54": {
                "variable": {
                    "value": "self.D_min_argmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "D_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(D, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_34": {
                "x": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_35": {
                "x": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_40": {
                "x": {
                    "value": "na - 2 * tf.matmul(A, B, False, True) + nb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/model.py": {
        "tensorflow": {}
    },
    "utils/vocab.py": {
        "tensorflow": {}
    }
}