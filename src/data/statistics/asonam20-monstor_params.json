{
    "IE.py": {
        "torch": {
            "set_num_threads_13": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_28": {
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bg[lstr].number_of_nodes()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "n_features + n_stacks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_49": {
                "variable": {
                    "value": "x[:, n_features - 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "_sX[lstr][idx:idx + batch_size].view(-1).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "_sy[lstr][idx + i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "x[:, n_features + n_stacks - 1][i * V:(i + 1) * V]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "IM.py": {
        "torch": {
            "set_num_threads_15": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_80": {
                "variable": {
                    "value": "graph.ndata[ub]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_graph.number_of_nodes()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_81": {
                "variable": {
                    "value": "graph.ndata[a]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_graph.number_of_nodes()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "target_graph.number_of_nodes()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "V * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "*size": {
                    "value": "V * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_134": {
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "x[i:i + _V, now]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_90": {
                "input": {
                    "value": "ub_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.ndata.pop('ub_delta')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_32": {
                "input": {
                    "value": "x[:, prv]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.fc_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc_neigh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats + in_feats",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_49": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_68": {
                "variable": {
                    "value": "ub",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lb + graph.ndata['delta_ub'].squeeze()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_70": {
                "input": {
                    "value": "lb + h.squeeze()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_39": {
                "tensors": {
                    "value": "(feat, h_neigh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scalability.py": {
        "torch": {
            "set_num_threads_13": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_34": {
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "test_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "bg.number_of_nodes()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_47": {
                "n": {
                    "value": "bg.number_of_nodes()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "submodularity.py": {
        "torch": {
            "set_num_threads_14": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_graph.number_of_nodes()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.input_dim",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "x[:, now]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_45": {
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "x[:, prv]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_58": {
                "n": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randperm_59": {
                "n": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_63": {
                "input": {
                    "value": "A.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_64": {
                "input": {
                    "value": "B.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_65": {
                "input": {
                    "value": "(A + B).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_66": {
                "input": {
                    "value": "(A * B).float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "set_num_threads_15": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_20": {
                "input": {
                    "value": "torch.abs(gt - preds)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_92": {
                "variable": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X[lstr][dataseq[lstr][idx:idx + batch_size]].permute(1, 0, 2).reshape(args.input_dim, -1).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_95": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_fn(preds, gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_100": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/{}.pkt'.format(checkpoint_path, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_20": {
                "input": {
                    "value": "torch.sum(gt, dim=1) - torch.sum(preds, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "_bg[lstr].number_of_nodes()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "n_features + n_max_stacks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(bg[lstr], _input).view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "np.array([torch.sum(x[:, j][i * V:(i + 1) * V]).data for i in range(batch_size)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_113": {
                "variable": {
                    "value": "x[:, n_features - 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "_sX[lstr][idx:idx + batch_size].view(-1).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_112": {
                "input": {
                    "value": "_sy[lstr][idx + i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_117": {
                "input": {
                    "value": "x[:, j][i * V:(i + 1) * V]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "from_numpy_40": {
                "variable": {
                    "value": "g[lstr].edata[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.float32(data[0].data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "_g[lstr].edata[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.float32(data[0].data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "_g[lstr].edata[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.float32(data[0].data)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}