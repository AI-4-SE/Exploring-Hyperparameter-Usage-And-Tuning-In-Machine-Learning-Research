{
    "dataset/dataset.py": {
        "tensorflow": {
            "BERTDataset_10": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "self.vocab_word2idx": {
                    "value": "vocab_word2idx",
                    "possible_values": []
                },
                "self.maxlen": {
                    "value": "maxlen",
                    "possible_values": []
                }
            },
            "cast_84": {
                "variable": {
                    "value": "seq",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.equal(seq, 0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "pad_sequences_77": {
                "sequences": {
                    "value": "_masked_training_ids_batch",
                    "possible_values": []
                },
                "value": {
                    "value": "PAD_ID",
                    "possible_values": []
                },
                "padding": {
                    "value": "post",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "maxlen",
                    "possible_values": []
                }
            },
            "equal_84": {
                "x": {
                    "value": "seq",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.equal(seq, 0), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/vocab_tokenizer.py": {
        "tensorflow": {
            "pad_sequences_224": {
                "variable": {
                    "value": "padded_token_ids_batch",
                    "possible_values": []
                },
                "sequences": {
                    "value": "token_ids_batch",
                    "possible_values": []
                },
                "value": {
                    "value": "pad_id",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "'post'",
                            "MethodArgument"
                        ]
                    ]
                },
                "truncating": {
                    "value": "truncating",
                    "possible_values": [
                        [
                            "'post'",
                            "MethodArgument"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen",
                    "possible_values": []
                }
            }
        }
    },
    "model/bert.py": {
        "tensorflow": {
            "BERT_22": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "self.config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "latest_checkpoint_197": {
                "variable": {
                    "value": "init_checkpoint",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "possible_values": [
                        [
                            "'../save_model'",
                            "Constant"
                        ]
                    ]
                }
            },
            "list_variables_63": {
                "variable": {
                    "value": "init_vars",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_dir)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/bert_wrapper.py": {
        "tensorflow": {
            "BERTWrapper_10": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "self.bert": {
                    "value": "bert",
                    "possible_values": [
                        [
                            "BERT(config=config)",
                            "Call"
                        ]
                    ]
                },
                "Dense_14": {
                    "variable": {
                        "value": "self.final_linear",
                        "possible_values": []
                    },
                    "units": {
                        "value": "100",
                        "possible_values": []
                    }
                }
            },
            "convert_to_tensor_158": {
                "variable": {
                    "value": "X_train",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array(pad_nsp_sent_ids_batch)[:sample_num]",
                    "possible_values": []
                }
            },
            "convert_to_tensor_159": {
                "variable": {
                    "value": "tar_real",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array(pad_nsp_sparse_label_batch)[:sample_num]",
                    "possible_values": []
                }
            },
            "convert_to_tensor_160": {
                "variable": {
                    "value": "pad_seg_embed_token_batch",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array(pad_seg_embed_token_batch)[:sample_num]",
                    "possible_values": []
                }
            },
            "convert_to_tensor_161": {
                "variable": {
                    "value": "enc_padding_mask",
                    "possible_values": []
                },
                "value": {
                    "value": "bert_dataset.create_masks(X_train)[:sample_num]",
                    "possible_values": []
                }
            },
            "latest_checkpoint_169": {
                "variable": {
                    "value": "init_checkpoint",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "possible_values": [
                        [
                            "'../save_model_estimator'",
                            "Constant"
                        ]
                    ]
                }
            },
            "list_variables_171": {
                "variable": {
                    "value": "init_vars",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "list_variables_42": {
                "variable": {
                    "value": "init_vars",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "init_from_checkpoint_180": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_dir)",
                            "Call"
                        ]
                    ]
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/embedding/bert.py": {
        "tensorflow": {
            "BERTEmbedding_7": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "self.embed_dim": {
                    "value": "embed_dim",
                    "possible_values": []
                },
                "Embedding_11": {
                    "variable": {
                        "value": "self.token_embed",
                        "possible_values": []
                    },
                    "input_dim": {
                        "value": "vocab_size",
                        "possible_values": []
                    },
                    "output_dim": {
                        "value": "embed_dim",
                        "possible_values": []
                    },
                    "input_shape": {
                        "value": "(None,)",
                        "possible_values": []
                    }
                },
                "Embedding_12": {
                    "variable": {
                        "value": "self.seg_embed",
                        "possible_values": []
                    },
                    "input_dim": {
                        "value": "3",
                        "possible_values": []
                    },
                    "output_dim": {
                        "value": "embed_dim",
                        "possible_values": []
                    }
                }
            },
            "cast_30": {
                "x": {
                    "value": "pos_encoding",
                    "possible_values": [
                        [
                            "np.concatenate([sines, cosines], axis=-1)",
                            "Call"
                        ],
                        [
                            "pos_encoding[np.newaxis, ...]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "shape_33": {
                "input": {
                    "value": "x",
                    "possible_values": []
                }
            }
        }
    },
    "model/embedding/positional_encoding.py": {
        "tensorflow": {
            "PositionalEncoding_5": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                }
            },
            "cast_29": {
                "x": {
                    "value": "pos_encoding",
                    "possible_values": [
                        [
                            "np.concatenate([sines, cosines], axis=-1)",
                            "Call"
                        ],
                        [
                            "pos_encoding[np.newaxis, ...]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "shape_33": {
                "input": {
                    "value": "x",
                    "possible_values": []
                }
            }
        }
    },
    "model/embedding/segment_embedding.py": {
        "tensorflow": {
            "SegmentEmbedding_4": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "Embedding_7": {
                    "variable": {
                        "value": "self.seg_embed",
                        "possible_values": []
                    },
                    "input_dim": {
                        "value": "3",
                        "possible_values": []
                    },
                    "output_dim": {
                        "value": "embed_dim",
                        "possible_values": []
                    }
                }
            }
        }
    },
    "model/embedding/token_embedding.py": {
        "tensorflow": {
            "TokenEmbedding_4": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "Embedding_7": {
                    "variable": {
                        "value": "self.embed",
                        "possible_values": []
                    },
                    "input_dim": {
                        "value": "vocab_size",
                        "possible_values": []
                    },
                    "output_dim": {
                        "value": "embed_dim",
                        "possible_values": []
                    },
                    "input_shape": {
                        "value": "(None,)",
                        "possible_values": []
                    }
                }
            }
        }
    },
    "model/language_model.py": {
        "tensorflow": {
            "BERTLM_8": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "self.bert": {
                    "value": "bert",
                    "possible_values": []
                }
            },
            "NextSentencePrediction_25": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "Dense_28": {
                    "variable": {
                        "value": "self.NSP_linear",
                        "possible_values": []
                    },
                    "units": {
                        "value": "2",
                        "possible_values": []
                    }
                },
                "Softmax_29": {
                    "variable": {
                        "value": "self.NSP_softmax",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "MaskedLanguageModel_34": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "Dense_37": {
                    "variable": {
                        "value": "self.MLM_linear",
                        "possible_values": []
                    },
                    "units": {
                        "value": "vocab_size",
                        "possible_values": []
                    }
                },
                "Softmax_38": {
                    "variable": {
                        "value": "self.MLM_softmax",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            }
        }
    },
    "model/ops.py": {
        "tensorflow": {
            "MultiHeadAttention_22": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "Dense_32": {
                    "variable": {
                        "value": "self.Wq",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.embed_dim",
                        "possible_values": []
                    },
                    "activation": {
                        "value": "gelu",
                        "possible_values": []
                    }
                },
                "Dense_33": {
                    "variable": {
                        "value": "self.Wk",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.embed_dim",
                        "possible_values": []
                    },
                    "activation": {
                        "value": "gelu",
                        "possible_values": []
                    }
                },
                "Dense_34": {
                    "variable": {
                        "value": "self.Wv",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.embed_dim",
                        "possible_values": []
                    },
                    "activation": {
                        "value": "gelu",
                        "possible_values": []
                    }
                }
            },
            "matmul_38": {
                "variable": {
                    "value": "matmul_qk",
                    "possible_values": []
                },
                "a": {
                    "value": "Q",
                    "possible_values": []
                },
                "b": {
                    "value": "K",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cast_39": {
                "variable": {
                    "value": "dk",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(K)[-1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "variable": {
                    "value": "attention_weight",
                    "possible_values": []
                },
                "logits": {
                    "value": "scaled_dot_product_qk",
                    "possible_values": [
                        [
                            "matmul_qk / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "scaled_dot_product_qk + mask * minus_infinity",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "variable": {
                    "value": "scaled_attention_output",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_weight",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_dot_product_qk, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vector",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, -1, self.head_num, self.split_embed_dim)",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "self.concat_scaled_attention",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.scaled_attention_output",
                    "possible_values": []
                },
                "shape": {
                    "value": "(tf.shape(Q)[0], -1, self.embed_dim)",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(vector, (batch_size, -1, self.head_num, self.split_embed_dim))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "possible_values": []
                }
            },
            "tanh_18": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "possible_values": []
                }
            },
            "sqrt_40": {
                "x": {
                    "value": "dk",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(K)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_57": {
                "input": {
                    "value": "vector",
                    "possible_values": []
                }
            },
            "shape_39": {
                "input": {
                    "value": "K",
                    "possible_values": []
                }
            },
            "shape_74": {
                "input": {
                    "value": "Q",
                    "possible_values": []
                }
            },
            "pow_19": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(vector, (batch_size, -1, self.head_num, self.split_embed_dim))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    },
    "model/transformer.py": {
        "tensorflow": {
            "TransformerBlock_9": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "self.config": {
                    "value": "config",
                    "possible_values": []
                },
                "Dropout_22": {
                    "variable": {
                        "value": "self.dropout1",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "0.5",
                        "possible_values": []
                    }
                },
                "Dropout_23": {
                    "variable": {
                        "value": "self.dropout2",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "0.5",
                        "possible_values": []
                    }
                },
                "LayerNormalization_24": {
                    "variable": {
                        "value": "self.layer_norm_1",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "1e-06",
                        "possible_values": []
                    }
                },
                "LayerNormalization_25": {
                    "variable": {
                        "value": "self.layer_norm_2",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "1e-06",
                        "possible_values": []
                    },
                    "name": {
                        "value": "last_layer",
                        "possible_values": []
                    }
                },
                "Dense_26": {
                    "variable": {
                        "value": "self.position_wise_fc_1",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.feed_forward_dim",
                        "possible_values": []
                    },
                    "activation": {
                        "value": "gelu",
                        "possible_values": []
                    }
                },
                "Dense_27": {
                    "variable": {
                        "value": "self.position_wise_fc_2",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.embed_dim",
                        "possible_values": []
                    }
                }
            }
        }
    },
    "pre_train.py": {
        "tensorflow": {
            "SparseCategoricalCrossentropy_161": {
                "variable": {
                    "value": "MLM_loss_object",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "False",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_162": {
                "variable": {
                    "value": "NSP_loss_object",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "False",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "Adam_165": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "Mean_168": {
                "variable": {
                    "value": "train_loss",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "possible_values": []
                }
            },
            "Mean_169": {
                "variable": {
                    "value": "train_MLM_loss",
                    "possible_values": []
                },
                "name": {
                    "value": "train_MLM_loss",
                    "possible_values": []
                }
            },
            "Mean_170": {
                "variable": {
                    "value": "train_NSP_loss",
                    "possible_values": []
                },
                "name": {
                    "value": "train_NSP_loss",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_173": {
                "variable": {
                    "value": "train_MLM_accuracy",
                    "possible_values": []
                },
                "name": {
                    "value": "train_MLM_accuracy",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_174": {
                "variable": {
                    "value": "train_NSP_accuracy",
                    "possible_values": []
                },
                "name": {
                    "value": "train_NSP_accuracy",
                    "possible_values": []
                }
            },
            "Mean_176": {
                "variable": {
                    "value": "test_loss",
                    "possible_values": []
                },
                "name": {
                    "value": "test_loss",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_177": {
                "variable": {
                    "value": "test_accuracy",
                    "possible_values": []
                },
                "name": {
                    "value": "test_accuracy",
                    "possible_values": []
                }
            },
            "logical_not_184": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.equal(real, 0)",
                    "possible_values": []
                }
            },
            "cast_186": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.math.logical_not(tf.math.equal(real, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=loss_.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "loss_.dtype",
                    "possible_values": []
                }
            },
            "reduce_mean_191": {
                "input_tensor": {
                    "value": "loss_",
                    "possible_values": [
                        [
                            "MLM_loss_object(real, pred)",
                            "Call"
                        ],
                        [
                            "loss_ * mask",
                            "BinOp"
                        ],
                        [
                            "NSP_loss_object(real, pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_208": {
                "variable": {
                    "value": "predicted_id",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(MLM_predictions, axis=2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "GradientTape_202": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "equal_184": {
                "x": {
                    "value": "real",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "argmax_208": {
                "input": {
                    "value": "MLM_predictions",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            }
        }
    }
}