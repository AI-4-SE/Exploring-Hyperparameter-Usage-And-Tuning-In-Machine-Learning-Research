{
    "lib/inits.py": {
        "sklearn": {
            "KMeans_41": {
                "variable": {
                    "value": "km",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_rules",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_init": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KMeans_56": {
                "variable": {
                    "value": "km",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_rules",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_init": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models.py": {
        "sklearn": {},
        "torch": {
            "from_numpy_39": {
                "variable": {
                    "value": "self.Cs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.init_centers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.Cons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.Cons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self.Bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.Bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self.Cs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.Cs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.Vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.Vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "self.Cs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.init_centers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_80": {
                "variable": {
                    "value": "frs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t.sum(-(x.unsqueeze(dim=2) - self.Cs) ** 2 / (2 * self.Vs ** 2), dim=1) + self.ampli",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_89": {
                "variable": {
                    "value": "cons",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,jkl->ijl",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[x_rep, self.Cons]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mul_91": {
                "variable": {
                    "value": "cons",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cons",
                    "type": "Call",
                    "possible_values": [
                        [
                            "t.einsum('ijk,jkl->ijl', [x_rep, self.Cons])",
                            "Call"
                        ],
                        [
                            "cons + self.Bias",
                            "BinOp"
                        ],
                        [
                            "t.mul(cons, frs.unsqueeze(2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "frs.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_29": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "self.Vs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.init_Vs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "self.Vs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.init_Vs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "cons",
                    "type": "Call",
                    "possible_values": [
                        [
                            "t.einsum('ijk,jkl->ijl', [x_rep, self.Cons])",
                            "Call"
                        ],
                        [
                            "cons + self.Bias",
                            "BinOp"
                        ],
                        [
                            "t.mul(cons, frs.unsqueeze(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "self.Cons ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "-(x.unsqueeze(dim=2) - self.Cs) ** 2 / (2 * self.Vs ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "frs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t.exp(t.sum(-(x.unsqueeze(dim=2) - self.Cs) ** 2 / (2 * self.Vs ** 2), dim=1) + self.ampli)",
                            "Call"
                        ],
                        [
                            "frs / (t.sum(frs, dim=1, keepdim=True) + self.eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_93": {
                "input": {
                    "value": "cons",
                    "type": "Call",
                    "possible_values": [
                        [
                            "t.einsum('ijk,jkl->ijl', [x_rep, self.Cons])",
                            "Call"
                        ],
                        [
                            "cons + self.Bias",
                            "BinOp"
                        ],
                        [
                            "t.mul(cons, frs.unsqueeze(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_109": {
                "input": {
                    "value": "frs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t.exp(t.sum(-(x.unsqueeze(dim=2) - self.Cs) ** 2 / (2 * self.Vs ** 2), dim=1) + self.ampli)",
                            "Call"
                        ],
                        [
                            "frs / (t.sum(frs, dim=1, keepdim=True) + self.eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/trains.py": {
        "sklearn": {
            "balanced_accuracy_score_34": {
                "y_true": {
                    "value": "t.cat(trues, dim=0).detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "t.cat(outs, dim=0).detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_48": {
                "variable": {
                    "value": "frss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "frss",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "t.cat(frss, dim=0).detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "t.cat(frss, dim=0).detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "frss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "frss",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "t.cat(frss, dim=0).detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "t.cat(frss, dim=0).detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_18": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_31": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "pred == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "trues",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_131": {
                "f": {
                    "value": "self.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_125": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/tuning_train.py": {
        "sklearn": {
            "balanced_accuracy_score_35": {
                "y_true": {
                    "value": "t.cat(trues, dim=0).detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "t.cat(outs, dim=0).detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_59": {
                "variable": {
                    "value": "(x_train, x_val, y_train, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_train",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_train",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "val_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "argmax_19": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_32": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_20": {
                "input": {
                    "value": "pred == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "trues",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_153": {
                "f": {
                    "value": "self.save_path + '.tmp'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.save_path + '.tmp'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main_diff_data_split.py": {
        "sklearn": {
            "StandardScaler_68": {
                "variable": {
                    "value": "ss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/optim.py": {
        "torch": {
            "full_like_114": {
                "variable": {
                    "value": "step_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denom",
                    "type": "Call",
                    "possible_values": [
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "step_size",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ],
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_like_226": {
                "variable": {
                    "value": "step_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denom",
                    "type": "Call",
                    "possible_values": [
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "max_exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ],
                        [
                            "exp_avg_sq.sqrt().add_(group['eps'])",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "step_size",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ],
                        [
                            "group['lr'] * math.sqrt(bias_correction2) / bias_correction1",
                            "BinOp"
                        ],
                        [
                            "torch.full_like(denom, step_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_77": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_192": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_194": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_230": {
                "variable": {
                    "value": "decayed_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "group['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_82": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_99": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_197": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_211": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "lib/torch_utils.py": {
        "torch": {
            "TensorDataset_38": {
                "variable": {
                    "value": "tenDataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*t_data",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_39": {
                "dataset": {
                    "value": "tenDataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Data.TensorDataset(*t_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_58": {
                "input": {
                    "value": "t.sum((outs - one_hot) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "ndarray": {
                    "value": "data[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "(outs - one_hot) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}