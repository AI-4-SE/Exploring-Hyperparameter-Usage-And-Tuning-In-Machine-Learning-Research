{
    "code/utils/pc_util.py": {
        "sklearn": {
            "NearestNeighbors_86": {
                "variable": {
                    "value": "knn_search",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "code/curriculum_data_provider.py": {
        "tensorflow": {
            "clip_by_value_70": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.random_normal((batch_size, 3)) * angle_sigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-angle_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "angle_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.09",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_72": {
                "variable": {
                    "value": "(cos_x, cos_y, cos_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cos(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_73": {
                "variable": {
                    "value": "(sin_x, sin_y, sin_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.sin(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_74": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_77": {
                "variable": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_82": {
                "variable": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_87": {
                "variable": {
                    "value": "Rz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_z, sin_z, zero], axis=1), tf.concat([-sin_z, cos_z, zero], axis=1), tf.concat([zero, zero, one], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_117": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_data[:, :, :3] * scales, batch_data[:, :, 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_132": {
                "variable": {
                    "value": "jittered_data",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "sigma * tf.random_normal(tf.shape(batch_data))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1 * clip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_137": {
                "variable": {
                    "value": "jittered_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_data[:, :, :chn] + jittered_data[:, :, :chn], batch_data[:, :, chn:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_150": {
                "variable": {
                    "value": "(cos_x, cos_y, cos_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cos(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_151": {
                "variable": {
                    "value": "(sin_x, sin_y, sin_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.sin(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_152": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_153": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_155": {
                "variable": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_160": {
                "variable": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_165": {
                "variable": {
                    "value": "Rz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_z, sin_z, zero], axis=1), tf.concat([-sin_z, cos_z, zero], axis=1), tf.concat([zero, zero, one], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_199": {
                "variable": {
                    "value": "centroid",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc - centroid",
                            "BinOp"
                        ],
                        [
                            "pc / furthest_distance",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_201": {
                "variable": {
                    "value": "furthest_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(pc ** 2, axis=-1, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "a": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_98": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_data[:, :, :3] * scales, batch_data[:, :, 3:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_120": {
                "variable": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_gt[:, :, :3] * scales, batch_gt[:, :, 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "a": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_176": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_181": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_data[:, :, :3] * scales, batch_data[:, :, 3:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_with_default_222": {
                "variable": {
                    "value": "self.input_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_pointcloud.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.input_pointcloud.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_223": {
                "variable": {
                    "value": "self.label_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.label_pointclouds.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_pointcloud.shape[0], None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_with_default_224": {
                "variable": {
                    "value": "self.radius_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "data_radius.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[data_radius.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_225": {
                "variable": {
                    "value": "self.max_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "step_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "ratio",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_226": {
                "variable": {
                    "value": "self.is_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "is_combined",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_227": {
                "variable": {
                    "value": "self.ratio_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_228": {
                "variable": {
                    "value": "self.iscombined_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_229": {
                "variable": {
                    "value": "self.update_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.max_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.ratio_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_230": {
                "variable": {
                    "value": "self.update_iscombined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.is_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.iscombined_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_231": {
                "variable": {
                    "value": "label_shapes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[label_pointclouds['x%d' % step_ratio ** x].shape[1] for x in range(1, int(np.log2(up_ratio) / np.log2(step_ratio)) + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_232": {
                "variable": {
                    "value": "self.offsets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.cumsum(label_shapes, exclusive=True), tf.cumsum(label_shapes, exclusive=False)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_260": {
                "variable": {
                    "value": "pick_ratio_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.random_uniform([], maxval=max_idx + 1, dtype=tf.int32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : max_idx",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_291": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_292": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_indices, rnd_pts]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_293": {
                "variable": {
                    "value": "rnd_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "label_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_indices, rnd_pts], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_295": {
                "variable": {
                    "value": "label_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "label_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "knn_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_nd_297": {
                "variable": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jitter_perturbation_point_cloud(input_pc, sigma=self.jitter_sigma, clip=self.jitter_max)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "knn_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_298": {
                "variable": {
                    "value": "label_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(label_pc, knn_index)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label_patches, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_299": {
                "variable": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(input_pc, knn_index)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(input_patches, axis=1)",
                            "Call"
                        ],
                        [
                            "(input_patches - centroid) / furthest_distance",
                            "BinOp"
                        ],
                        [
                            "tf.gather(input_patches, point_idx, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_303": {
                "variable": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_344": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cos_72": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_73": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_122": {
                "input": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((B, 1, 1), minval=scale_low, maxval=scale_high, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_150": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_151": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_185": {
                "variable": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.matmul(batch_gt[:, :, :3], rotation_matrix), tf.matmul(batch_gt[:, :, 3:], rotation_matrix), batch_gt[:, :, 6:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_190": {
                "variable": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_gt[:, :, :3] * scales, batch_gt[:, :, 3:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.matmul(batch_gt[:, :, :3], rotation_matrix), tf.matmul(batch_gt[:, :, 3:], rotation_matrix), batch_gt[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_gt, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_202": {
                "x": {
                    "value": "tf.reduce_sum(pc ** 2, axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_318": {
                "variable": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(input_pc, knn_index)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(input_patches, axis=1)",
                            "Call"
                        ],
                        [
                            "(input_patches - centroid) / furthest_distance",
                            "BinOp"
                        ],
                        [
                            "tf.gather(input_patches, point_idx, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "point_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_shuffle(tf.range(num_point))[:int(num_point * self.drop_out)]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_337": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_78": {
                "values": {
                    "value": "[one, zero, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_79": {
                "values": {
                    "value": "[zero, cos_x, sin_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_80": {
                "values": {
                    "value": "[zero, -sin_x, cos_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_83": {
                "values": {
                    "value": "[cos_y, zero, -sin_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_84": {
                "values": {
                    "value": "[zero, one, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_85": {
                "values": {
                    "value": "[sin_y, zero, cos_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_88": {
                "values": {
                    "value": "[cos_z, sin_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_89": {
                "values": {
                    "value": "[-sin_z, cos_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_90": {
                "values": {
                    "value": "[zero, zero, one]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_156": {
                "values": {
                    "value": "[one, zero, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_157": {
                "values": {
                    "value": "[zero, cos_x, sin_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_158": {
                "values": {
                    "value": "[zero, -sin_x, cos_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_161": {
                "values": {
                    "value": "[cos_y, zero, -sin_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_162": {
                "values": {
                    "value": "[zero, one, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_163": {
                "values": {
                    "value": "[sin_y, zero, cos_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_166": {
                "values": {
                    "value": "[cos_z, sin_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_167": {
                "values": {
                    "value": "[-sin_z, cos_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_168": {
                "values": {
                    "value": "[zero, zero, one]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_202": {
                "input_tensor": {
                    "value": "pc ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shuffle_and_repeat_243": {
                "buffer_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_259": {
                "x": {
                    "value": "self.step_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "a": {
                    "value": "batch_data[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_100": {
                "a": {
                    "value": "batch_data[:, :, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_132": {
                "input": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_data[:, :, :3] * scales, batch_data[:, :, 3:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_177": {
                "a": {
                    "value": "batch_data[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_178": {
                "a": {
                    "value": "batch_data[:, :, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_232": {
                "x": {
                    "value": "label_shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([label_pointclouds['x%d' % step_ratio ** x].shape[1] for x in range(1, int(np.log2(up_ratio) / np.log2(step_ratio)) + 1)], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "exclusive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_233": {
                "x": {
                    "value": "label_shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([label_pointclouds['x%d' % step_ratio ** x].shape[1] for x in range(1, int(np.log2(up_ratio) / np.log2(step_ratio)) + 1)], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "exclusive": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_186": {
                "a": {
                    "value": "batch_gt[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_187": {
                "a": {
                    "value": "batch_gt[:, :, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_259": {
                "x": {
                    "value": "tf.cast(self.step_ratio, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/curriculumn_record_provider.py": {
        "tensorflow": {
            "clip_by_value_21": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.random_normal((batch_size, 3)) * angle_sigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-angle_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "angle_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.09",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_23": {
                "variable": {
                    "value": "(cos_x, cos_y, cos_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cos(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_24": {
                "variable": {
                    "value": "(sin_x, sin_y, sin_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.sin(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_25": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_26": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_28": {
                "variable": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_33": {
                "variable": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_38": {
                "variable": {
                    "value": "Rz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_z, sin_z, zero], axis=1), tf.concat([-sin_z, cos_z, zero], axis=1), tf.concat([zero, zero, one], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_69": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_data[:, :, :3] * scales, batch_data[:, :, 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_85": {
                "variable": {
                    "value": "jittered_data",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "sigma * tf.random_normal(tf.shape(batch_data))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1 * clip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_90": {
                "variable": {
                    "value": "jittered_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_data[:, :, :chn] + jittered_data[:, :, :chn], batch_data[:, :, chn:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_104": {
                "variable": {
                    "value": "(cos_x, cos_y, cos_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cos(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_105": {
                "variable": {
                    "value": "(sin_x, sin_y, sin_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.sin(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_106": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_107": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_119": {
                "variable": {
                    "value": "Rz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_z, sin_z, zero], axis=1), tf.concat([-sin_z, cos_z, zero], axis=1), tf.concat([zero, zero, one], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_153": {
                "variable": {
                    "value": "centroid",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc - centroid",
                            "BinOp"
                        ],
                        [
                            "pc / furthest_distance",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_155": {
                "variable": {
                    "value": "furthest_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(pc ** 2, axis=-1, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_46": {
                "a": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_49": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_data[:, :, :3] * scales, batch_data[:, :, 3:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_72": {
                "variable": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_gt[:, :, :3] * scales, batch_gt[:, :, 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_127": {
                "a": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_130": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_135": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_data[:, :, :3] * scales, batch_data[:, :, 3:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_195": {
                "variable": {
                    "value": "self.max_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "step_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ratio",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_196": {
                "variable": {
                    "value": "self.is_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "is_combined",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_197": {
                "variable": {
                    "value": "self.ratio_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_198": {
                "variable": {
                    "value": "self.iscombined_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_199": {
                "variable": {
                    "value": "self.update_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.max_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.ratio_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_200": {
                "variable": {
                    "value": "self.update_iscombined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.is_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.iscombined_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_201": {
                "variable": {
                    "value": "label_shapes",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.saved_patch_size[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_202": {
                "variable": {
                    "value": "self.offsets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.cumsum(label_shapes, exclusive=True), tf.cumsum(label_shapes, exclusive=False)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TFRecordDataset_207": {
                "variable": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filenames": {
                    "value": "record_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob(records)",
                            "Call"
                        ]
                    ]
                }
            },
            "parse_single_example_230": {
                "variable": {
                    "value": "read_data",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.read_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_233": {
                "variable": {
                    "value": "label_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[read_data[k] for k in self.features_names[1:]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_243": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "tf.range(1, max_idx + 2) / tf.reduce_sum(tf.range(1, max_idx + 2))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "ratio_sample_weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_244": {
                "variable": {
                    "value": "pick_ratio_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_combined",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : dist.sample([])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : max_idx",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_251": {
                "variable": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_265": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_266": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_indices, rnd_pts]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_267": {
                "variable": {
                    "value": "rnd_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "label_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([read_data[k] for k in self.features_names[1:]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_indices, rnd_pts], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_269": {
                "variable": {
                    "value": "label_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "label_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([read_data[k] for k in self.features_names[1:]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "knn_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_nd_271": {
                "variable": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_data[self.features_names[0]]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "knn_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_272": {
                "variable": {
                    "value": "label_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(label_pc, knn_index)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label_patches, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_273": {
                "variable": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(input_pc, knn_index)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(input_patches, axis=1)",
                            "Call"
                        ],
                        [
                            "(input_patches - centroid) / furthest_distance",
                            "BinOp"
                        ],
                        [
                            "tf.gather(input_patches, point_idx, axis=1)",
                            "Call"
                        ],
                        [
                            "jitter_perturbation_point_cloud(input_patches, sigma=self.jitter_sigma, clip=self.jitter_max)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_277": {
                "variable": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_319": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cos_23": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_24": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_74": {
                "input": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((B, 1, 1), minval=scale_low, maxval=scale_high, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_104": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_105": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_139": {
                "variable": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.matmul(batch_gt[:, :, :3], rotation_matrix), tf.matmul(batch_gt[:, :, 3:], rotation_matrix), batch_gt[:, :, 6:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_144": {
                "variable": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([batch_gt[:, :, :3] * scales, batch_gt[:, :, 3:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.matmul(batch_gt[:, :, :3], rotation_matrix), tf.matmul(batch_gt[:, :, 3:], rotation_matrix), batch_gt[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_gt, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_156": {
                "x": {
                    "value": "tf.reduce_sum(pc ** 2, axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_292": {
                "variable": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(input_pc, knn_index)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(input_patches, axis=1)",
                            "Call"
                        ],
                        [
                            "(input_patches - centroid) / furthest_distance",
                            "BinOp"
                        ],
                        [
                            "tf.gather(input_patches, point_idx, axis=1)",
                            "Call"
                        ],
                        [
                            "jitter_perturbation_point_cloud(input_patches, sigma=self.jitter_sigma, clip=self.jitter_max)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "point_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_shuffle(tf.range(num_point))[:int(num_point * self.drop_out)]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_312": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_29": {
                "values": {
                    "value": "[one, zero, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_30": {
                "values": {
                    "value": "[zero, cos_x, sin_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_31": {
                "values": {
                    "value": "[zero, -sin_x, cos_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_34": {
                "values": {
                    "value": "[cos_y, zero, -sin_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_35": {
                "values": {
                    "value": "[zero, one, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_36": {
                "values": {
                    "value": "[sin_y, zero, cos_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_39": {
                "values": {
                    "value": "[cos_z, sin_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_40": {
                "values": {
                    "value": "[-sin_z, cos_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_41": {
                "values": {
                    "value": "[zero, zero, one]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_110": {
                "values": {
                    "value": "[one, zero, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_111": {
                "values": {
                    "value": "[zero, cos_x, sin_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_112": {
                "values": {
                    "value": "[zero, -sin_x, cos_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_115": {
                "values": {
                    "value": "[cos_y, zero, -sin_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_116": {
                "values": {
                    "value": "[zero, one, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_117": {
                "values": {
                    "value": "[sin_y, zero, cos_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_120": {
                "values": {
                    "value": "[cos_z, sin_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_121": {
                "values": {
                    "value": "[-sin_z, cos_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_122": {
                "values": {
                    "value": "[zero, zero, one]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_156": {
                "input_tensor": {
                    "value": "pc ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FixedLenFeature_193": {
                "shape": {
                    "value": "[size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_and_repeat_208": {
                "buffer_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_242": {
                "x": {
                    "value": "self.step_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "a": {
                    "value": "batch_data[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_51": {
                "a": {
                    "value": "batch_data[:, :, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_85": {
                "input": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_data[:, :, :3] * scales, batch_data[:, :, 3:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_131": {
                "a": {
                    "value": "batch_data[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_132": {
                "a": {
                    "value": "batch_data[:, :, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_202": {
                "x": {
                    "value": "label_shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(self.saved_patch_size[1:], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "exclusive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_203": {
                "x": {
                    "value": "label_shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(self.saved_patch_size[1:], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "exclusive": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "a": {
                    "value": "batch_gt[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_141": {
                "a": {
                    "value": "batch_gt[:, :, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_242": {
                "x": {
                    "value": "tf.cast(self.step_ratio, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_243": {
                "input_tensor": {
                    "value": "tf.range(1, max_idx + 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/dense_interlevelplus.py": {
        "tensorflow": {
            "case_214": {
                "variable": {
                    "value": "(xyz, points, bradius, gt, l0_xyz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred_fn_pairs": {
                    "value": "cases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "squeeze_60": {
                "variable": {
                    "value": "l0_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l0_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if not use_l0_points else l0_points",
                            "IfExp"
                        ],
                        [
                            "tf.expand_dims(l0_xyz, axis=2)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(l0_features, 24, [1, 1], padding='VALID', scope='layer0', is_training=is_training, bn=use_bn, ibn=use_ibn, bn_decay=bn_decay, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(l0_features, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(l0_xyz_normalized, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(l0_features, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "l1_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[l1_features, l0_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_71": {
                "variable": {
                    "value": "l2_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[l2_features, l1_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_77": {
                "variable": {
                    "value": "l3_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[l3_features, l2_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_83": {
                "variable": {
                    "value": "l4_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[l4_features, l3_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_85": {
                "variable": {
                    "value": "l4_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l4_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv1d(l3_features, comp, 1, padding='VALID', scope='layer4_prep', is_training=is_training, bn=use_bn, ibn=use_ibn, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.concat([l4_features, l3_features], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(l4_features, axis=2)",
                            "Call"
                        ],
                        [
                            "0.2 * knn_feature + l4_features",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_174": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(new_feature, 64, [1, 1], padding='VALID', stride=[1, 1], bn=False, is_training=is_training, scope='fc_layer1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_xyz, 3, [1, 1], padding='VALID', stride=[1, 1], bn=False, is_training=is_training, scope='fc_layer2', bn_decay=bn_decay, activation_fn=None, weight_decay=0.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_xyz, axis=2)",
                            "Call"
                        ],
                        [
                            "new_xyz + tf.reshape(tf.tile(tf.expand_dims(l0_xyz_normalized, 2), [1, 1, expansion_ratio, 1]), [l0_xyz_normalized.shape[0], num_point * expansion_ratio, -1])",
                            "BinOp"
                        ],
                        [
                            "new_xyz * furthest_distance + centroid",
                            "BinOp"
                        ],
                        [
                            "tf.concat(tf.split(new_xyz, new_xyz.shape[0] // batch_size, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(new_xyz, tf.concat([batch_indices, idx], axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_175": {
                "variable": {
                    "value": "new_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.tile(tf.expand_dims(l4_features, 2), [1, 1, expansion_ratio, 1, 1]), [l4_features.shape[0], num_point * expansion_ratio, 1, l4_features.shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.concat([new_feature, grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_feature, 128, [1, 1], padding='VALID', stride=[1, 1], bn=False, is_training=is_training, scope='up_layer1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_feature, 128, [1, 1], padding='VALID', stride=[1, 1], bn=use_bn, is_training=is_training, scope='up_layer2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_feature, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(new_feature, tf.concat([batch_indices, idx], axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_213": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'generator'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "'level_%d' % (scale_idx + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_48": {
                "variable": {
                    "value": "bradius",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[l0_xyz.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_54": {
                "variable": {
                    "value": "l0_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l0_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud[:, :, 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_to_collection_124": {
                "name": {
                    "value": "'SKIP_FEATURE_XYZ_%d_%d' % (global_idx, scale_idx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.concat(tf.split(l0_xyz, l0_xyz.shape[0] // batch_size, axis=0), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_126": {
                "name": {
                    "value": "'SKIP_FEATURES_%d_%d' % (global_idx, scale_idx)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.concat(tf.split(l4_features, l4_features.shape[0] // batch_size, axis=0), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_143": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(grid, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[l0_xyz.shape[0], num_point, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_144": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid * bradius_expand",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "variable": {
                    "value": "new_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(l4_features, 2), [1, 1, expansion_ratio, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[l4_features.shape[0], num_point * expansion_ratio, 1, l4_features.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_149": {
                "variable": {
                    "value": "new_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_feature, grid]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stop_gradient_44": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(gt)",
                            "Call"
                        ],
                        [
                            "gt_original",
                            "variable"
                        ]
                    ]
                }
            },
            "expand_dims_50": {
                "variable": {
                    "value": "l0_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l0_xyz_normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l0_xyz",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_52": {
                "variable": {
                    "value": "l0_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l0_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if not use_l0_points else l0_points",
                            "IfExp"
                        ],
                        [
                            "tf.expand_dims(l0_xyz, axis=2)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(l0_features, 24, [1, 1], padding='VALID', scope='layer0', is_training=is_training, bn=use_bn, ibn=use_ibn, bn_decay=bn_decay, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(l0_features, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(l0_xyz_normalized, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(l0_features, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_90": {
                "variable": {
                    "value": "skip_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "'SKIP_FEATURES_%d_%d' % (global_idx, lower_scale_idx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_91": {
                "variable": {
                    "value": "skip_feature_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "'SKIP_FEATURE_XYZ_%d_%d' % (global_idx, lower_scale_idx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_125": {
                "values": {
                    "value": "tf.split(l0_xyz, l0_xyz.shape[0] // batch_size, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_127": {
                "values": {
                    "value": "tf.split(l4_features, l4_features.shape[0] // batch_size, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "up_layer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_131": {
                "input": {
                    "value": "bradius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1.0, shape=[l0_xyz.shape[0]], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "furthest_distance",
                            "variable"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(l0_xyz_normalized, 2), [1, 1, expansion_ratio, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[l0_xyz_normalized.shape[0], num_point * expansion_ratio, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(new_xyz, new_xyz.shape[0] // batch_size, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_184": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "farthest_point_sample(output_num, new_xyz)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_185": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(batch_size), (-1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, output_num, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_nd_186": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(new_feature, 64, [1, 1], padding='VALID', stride=[1, 1], bn=False, is_training=is_training, scope='fc_layer1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_xyz, 3, [1, 1], padding='VALID', stride=[1, 1], bn=False, is_training=is_training, scope='fc_layer2', bn_decay=bn_decay, activation_fn=None, weight_decay=0.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_xyz, axis=2)",
                            "Call"
                        ],
                        [
                            "new_xyz + tf.reshape(tf.tile(tf.expand_dims(l0_xyz_normalized, 2), [1, 1, expansion_ratio, 1]), [l0_xyz_normalized.shape[0], num_point * expansion_ratio, -1])",
                            "BinOp"
                        ],
                        [
                            "new_xyz * furthest_distance + centroid",
                            "BinOp"
                        ],
                        [
                            "tf.concat(tf.split(new_xyz, new_xyz.shape[0] // batch_size, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(new_xyz, tf.concat([batch_indices, idx], axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.concat([batch_indices, idx], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_187": {
                "variable": {
                    "value": "new_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "new_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.tile(tf.expand_dims(l4_features, 2), [1, 1, expansion_ratio, 1, 1]), [l4_features.shape[0], num_point * expansion_ratio, 1, l4_features.shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.concat([new_feature, grid], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_feature, 128, [1, 1], padding='VALID', stride=[1, 1], bn=False, is_training=is_training, scope='up_layer1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_feature, 128, [1, 1], padding='VALID', stride=[1, 1], bn=use_bn, is_training=is_training, scope='up_layer2', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_feature, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(new_feature, tf.concat([batch_indices, idx], axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.concat([batch_indices, idx], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_211": {
                "x": {
                    "value": "up_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "step_ratio ** (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_88": {
                "name": {
                    "value": "skip_connection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_96": {
                "variable": {
                    "value": "skip_feature_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skip_feature_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection('SKIP_FEATURE_XYZ_%d_%d' % (global_idx, lower_scale_idx))",
                            "Call"
                        ],
                        [
                            "skip_feature_xyz.pop()",
                            "Call"
                        ],
                        [
                            "tf.tile(skip_feature_xyz, [l0_xyz.shape[0].value, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[l0_xyz.shape[0].value, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_97": {
                "variable": {
                    "value": "skip_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skip_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection('SKIP_FEATURES_%d_%d' % (global_idx, lower_scale_idx))",
                            "Call"
                        ],
                        [
                            "skip_feature.pop()",
                            "Call"
                        ],
                        [
                            "tf.tile(skip_feature, [l0_xyz.shape[0].value, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[l0_xyz.shape[0].value, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_101": {
                "variable": {
                    "value": "knn_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.squeeze(skip_feature, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(farthest_point_sample(output_num, new_xyz), axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_nd_102": {
                "variable": {
                    "value": "knn_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "skip_feature_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection('SKIP_FEATURE_XYZ_%d_%d' % (global_idx, lower_scale_idx))",
                            "Call"
                        ],
                        [
                            "skip_feature_xyz.pop()",
                            "Call"
                        ],
                        [
                            "tf.tile(skip_feature_xyz, [l0_xyz.shape[0].value, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(farthest_point_sample(output_num, new_xyz), axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_109": {
                "variable": {
                    "value": "s_average_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_average_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(s_average_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_110": {
                "variable": {
                    "value": "f_average_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_average_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(f_average_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_117": {
                "variable": {
                    "value": "knn_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "average_weight * knn_feature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_nd_120": {
                "variable": {
                    "value": "knn_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.squeeze(skip_feature, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(farthest_point_sample(output_num, new_xyz), axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_125": {
                "value": {
                    "value": "l0_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud[:, :, 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "l0_xyz.shape[0] // batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_127": {
                "value": {
                    "value": "l4_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv1d(l3_features, comp, 1, padding='VALID', scope='layer4_prep', is_training=is_training, bn=use_bn, ibn=use_ibn, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.concat([l4_features, l3_features], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(l4_features, axis=2)",
                            "Call"
                        ],
                        [
                            "0.2 * knn_feature + l4_features",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "l4_features.shape[0] // batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "l0_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud[:, :, 0:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_143": {
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_1d_grid(step_ratio)",
                            "Call"
                        ],
                        [
                            "gen_grid(np.round(np.sqrt(step_ratio)).astype(np.int32))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(grid, 0), [l0_xyz.shape[0], num_point, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid * bradius_expand, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_148": {
                "input": {
                    "value": "tf.expand_dims(l4_features, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, expansion_ratio, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_177": {
                "input": {
                    "value": "tf.expand_dims(l0_xyz_normalized, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, expansion_ratio, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "histogram_106": {
                "name": {
                    "value": "'f_average_distance_{}_{}'.format(scale_idx, lower_scale_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_108": {
                "name": {
                    "value": "'s_average_distance_{}_{}'.format(scale_idx, lower_scale_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_112": {
                "name": {
                    "value": "'f_average_weight_{}_{}'.format(scale_idx, lower_scale_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "f_average_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(f_average_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_113": {
                "name": {
                    "value": "'s_average_weight_{}_{}'.format(scale_idx, lower_scale_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "s_average_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(s_average_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_148": {
                "input": {
                    "value": "l4_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv1d(l3_features, comp, 1, padding='VALID', scope='layer4_prep', is_training=is_training, bn=use_bn, ibn=use_ibn, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.concat([l4_features, l3_features], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(l4_features, axis=2)",
                            "Call"
                        ],
                        [
                            "0.2 * knn_feature + l4_features",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_177": {
                "input": {
                    "value": "l0_xyz_normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l0_xyz",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_181": {
                "value": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(new_feature, 64, [1, 1], padding='VALID', stride=[1, 1], bn=False, is_training=is_training, scope='fc_layer1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_xyz, 3, [1, 1], padding='VALID', stride=[1, 1], bn=False, is_training=is_training, scope='fc_layer2', bn_decay=bn_decay, activation_fn=None, weight_decay=0.0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_xyz, axis=2)",
                            "Call"
                        ],
                        [
                            "new_xyz + tf.reshape(tf.tile(tf.expand_dims(l0_xyz_normalized, 2), [1, 1, expansion_ratio, 1]), [l0_xyz_normalized.shape[0], num_point * expansion_ratio, -1])",
                            "BinOp"
                        ],
                        [
                            "new_xyz * furthest_distance + centroid",
                            "BinOp"
                        ],
                        [
                            "tf.concat(tf.split(new_xyz, new_xyz.shape[0] // batch_size, axis=0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(new_xyz, tf.concat([batch_indices, idx], axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "new_xyz.shape[0] // batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_185": {
                "tensor": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_186": {
                "values": {
                    "value": "[batch_indices, idx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_187": {
                "values": {
                    "value": "[batch_indices, idx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_101": {
                "input": {
                    "value": "skip_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection('SKIP_FEATURES_%d_%d' % (global_idx, lower_scale_idx))",
                            "Call"
                        ],
                        [
                            "skip_feature.pop()",
                            "Call"
                        ],
                        [
                            "tf.tile(skip_feature, [l0_xyz.shape[0].value, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_107": {
                "input": {
                    "value": "l0_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud[:, :, 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "input_tensor": {
                    "value": "average_weight + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_120": {
                "input": {
                    "value": "skip_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection('SKIP_FEATURES_%d_%d' % (global_idx, lower_scale_idx))",
                            "Call"
                        ],
                        [
                            "skip_feature.pop()",
                            "Call"
                        ],
                        [
                            "tf.tile(skip_feature, [l0_xyz.shape[0].value, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/evaluate.py": {
        "tensorflow": {
            "placeholder_32": {
                "variable": {
                    "value": "pred_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "gt_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/main_curriculum_interleave.py": {
        "tensorflow": {
            "create_file_writer_116": {
                "variable": {
                    "value": "self.train_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(MODEL_DIR, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "flush_millis": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "variable": {
                    "value": "self.pointclouds_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(BATCH_SIZE, NUM_POINT, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "pointclouds_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "self.pointclouds_radius",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "pointclouds_radius",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_119": {
                "variable": {
                    "value": "self.model_up_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "model_up_ratio",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_234": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_434": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.expand_dims(pc, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_458": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_512": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_560": {
                "seed": {
                    "value": "240",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_122": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_270": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reset_default_graph_589": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_106": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'loss'",
                            "Method Argument"
                        ],
                        [
                            "'generator'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_120": {
                "x": {
                    "value": "STEP_RATIO",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.step_ratio",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_global_step_138": {
                "variable": {
                    "value": "self.step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "self.pointclouds_gt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(BATCH_SIZE, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "pointclouds_gt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "case_184": {
                "variable": {
                    "value": "self.blend",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred_fn_pairs": {
                    "value": "cases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(tf.equal(self.model_up_ratio_idx, i), lambda i=i: compute_blend_value(i)) for i in range(int(np.log(UP_RATIO) / np.log(STEP_RATIO)))]",
                            "ListComp"
                        ],
                        [
                            "[(tf.equal(self.model_up_ratio_idx, i), lambda i=i: create_train_op(i)) for i in range(int(np.log(UP_RATIO) / np.log(STEP_RATIO)))]",
                            "ListComp"
                        ]
                    ]
                },
                "name": {
                    "value": "blend",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "lambda : tf.constant(1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "AdamOptimizer_187": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_264": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_266": {
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_461": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_515": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "case_227": {
                "variable": {
                    "value": "(self.pc_loss, self.gen_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred_fn_pairs": {
                    "value": "cases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(tf.equal(self.model_up_ratio_idx, i), lambda i=i: compute_blend_value(i)) for i in range(int(np.log(UP_RATIO) / np.log(STEP_RATIO)))]",
                            "ListComp"
                        ],
                        [
                            "[(tf.equal(self.model_up_ratio_idx, i), lambda i=i: create_train_op(i)) for i in range(int(np.log(UP_RATIO) / np.log(STEP_RATIO)))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "log_120": {
                "x": {
                    "value": "tf.cast(STEP_RATIO, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_156": {
                "variable": {
                    "value": "blend",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.step - STAGE_STEPS * (1 + 2 * (i - 1))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_158": {
                "variable": {
                    "value": "blend",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "blend * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_159": {
                "name": {
                    "value": "'blend_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "blend",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "tf.cast(self.step - STAGE_STEPS * (1 + 2 * (i - 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "blend / (2 * STAGE_STEPS)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(blend * 2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_167": {
                "variable": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "blend > 0.6",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(FLAGS.cd_threshold)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(100.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_169": {
                "variable": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "scalar_174": {
                "name": {
                    "value": "'loss/cd_loss_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "cd_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_175": {
                "name": {
                    "value": "'loss/repulsion_loss_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "repulsion_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_179": {
                "name": {
                    "value": "'loss/pc_loss_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "pc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n([cd_loss, repulsion_loss]) * weight",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.blend > 0.4, lambda : tf.add_n([cd_loss, repulsion_loss]) * weight, lambda : cd_loss * weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_189": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[op for op in tf.get_collection(tf.GraphKeys.UPDATE_OPS)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cond_203": {
                "variable": {
                    "value": "pc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.blend > 0.4",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.add_n([cd_loss, repulsion_loss]) * weight",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : cd_loss * weight",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_220": {
                "variable": {
                    "value": "gen_train",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.blend >= 1.0",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : optimizer.apply_gradients(grad_var_all, global_step=self.step)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : optimizer.apply_gradients(grad_var_level, global_step=self.step)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "add_to_collection_228": {
                "name": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.blend",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_281": {
                "ref": {
                    "value": "self.step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "RESTORE_EPOCH * self.fetchworker.num_batches",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_178": {
                "inputs": {
                    "value": "[cd_loss, repulsion_loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_183": {
                "x": {
                    "value": "self.model_up_ratio_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ratio_idx)",
                            "Call"
                        ],
                        [
                            "range(1, total_levels + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_186": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_194": {
                "variable": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.blend > 0.6",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.constant(2.0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(100.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_196": {
                "variable": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "scalar_199": {
                "name": {
                    "value": "'loss/cd_loss_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "cd_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_200": {
                "name": {
                    "value": "'loss/repulsion_loss_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "repulsion_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_205": {
                "name": {
                    "value": "'loss/pc_loss_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "pc_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n([cd_loss, repulsion_loss]) * weight",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.blend > 0.4, lambda : tf.add_n([cd_loss, repulsion_loss]) * weight, lambda : cd_loss * weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_184": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_226": {
                "x": {
                    "value": "self.model_up_ratio_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(ratio_idx)",
                            "Call"
                        ],
                        [
                            "range(1, total_levels + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_167": {
                "value": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_value_217": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_218": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_194": {
                "value": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "add_n_203": {
                "inputs": {
                    "value": "[cd_loss, repulsion_loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/mixed_data_provider.py": {
        "tensorflow": {
            "reduce_mean_85": {
                "variable": {
                    "value": "centroid",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc - centroid",
                            "BinOp"
                        ],
                        [
                            "pc / furthest_distance",
                            "BinOp"
                        ],
                        [
                            "pc - centroid",
                            "BinOp"
                        ],
                        [
                            "pc / furthest_distance",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_87": {
                "variable": {
                    "value": "furthest_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(pc ** 2, axis=-1, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_106": {
                "variable": {
                    "value": "self.ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "step_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "ratio",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_107": {
                "variable": {
                    "value": "self.num_in_point",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "num_in_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_points[:np.searchsorted(num_points, max_num_points // up_ratio, side='right')]",
                            "Subscript"
                        ],
                        [
                            "[num_points[np.searchsorted(num_points, num_point)]]",
                            "List"
                        ],
                        [
                            "num_in_point[np.searchsorted(num_in_point, patch_size, side='left'):]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "num_in_point",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "self.ratio_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_110": {
                "variable": {
                    "value": "self.update_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.ratio_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_153": {
                "variable": {
                    "value": "label_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(label_pc, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_154": {
                "variable": {
                    "value": "input_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_pc, 0)",
                            "Call"
                        ],
                        [
                            "self.jitter_perturbation_point_cloud(input_pc, sigma=self.jitter_sigma, clip=self.jitter_max)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_gather_159": {
                "variable": {
                    "value": "rnd_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "label_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(label_pc, 0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rnd_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((1, self.batch_size), dtype=tf.int32, maxval=tf.shape(input_pc)[1])",
                            "Call"
                        ],
                        [
                            "tf.batch_gather(label_pc, rnd_pts)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_161": {
                "variable": {
                    "value": "label_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "label_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(label_pc, 0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "knn_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_nd_163": {
                "variable": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_pc, 0)",
                            "Call"
                        ],
                        [
                            "self.jitter_perturbation_point_cloud(input_pc, sigma=self.jitter_sigma, clip=self.jitter_max)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "knn_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_165": {
                "variable": {
                    "value": "label_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(label_pc, knn_index)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(label_patches, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_166": {
                "variable": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(input_pc, knn_index)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(input_patches, axis=0)",
                            "Call"
                        ],
                        [
                            "(input_patches - centroid) / furthest_distance",
                            "BinOp"
                        ],
                        [
                            "tf.gather(input_patches, point_idx, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_170": {
                "variable": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(self.batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_195": {
                "variable": {
                    "value": "jittered_data",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "sigma * tf.random_normal(tf.shape(batch_data))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1 * clip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_196": {
                "variable": {
                    "value": "jittered_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_data[:, :, :3] + jittered_data[:, :, :3], batch_data[:, :, 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_209": {
                "variable": {
                    "value": "(cos_x, cos_y, cos_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cos(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_210": {
                "variable": {
                    "value": "(sin_x, sin_y, sin_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.sin(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_211": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_212": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_214": {
                "variable": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_219": {
                "variable": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_224": {
                "variable": {
                    "value": "Rz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_z, sin_z, zero], axis=1), tf.concat([-sin_z, cos_z, zero], axis=1), tf.concat([zero, zero, one], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_261": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.random_normal((batch_size, 3)) * angle_sigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-angle_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "angle_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.09",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_263": {
                "variable": {
                    "value": "(cos_x, cos_y, cos_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cos(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_264": {
                "variable": {
                    "value": "(sin_x, sin_y, sin_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.sin(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_265": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_266": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_268": {
                "variable": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_273": {
                "variable": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_278": {
                "variable": {
                    "value": "Rz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.concat([cos_z, sin_z, zero], axis=1), tf.concat([-sin_z, cos_z, zero], axis=1), tf.concat([zero, zero, one], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_308": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_data[:, :, :3] * scales, batch_data[:, :, 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_319": {
                "variable": {
                    "value": "centroid",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc - centroid",
                            "BinOp"
                        ],
                        [
                            "pc / furthest_distance",
                            "BinOp"
                        ],
                        [
                            "pc - centroid",
                            "BinOp"
                        ],
                        [
                            "pc / furthest_distance",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_321": {
                "variable": {
                    "value": "furthest_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(pc ** 2, axis=-1, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_initializer_342": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_88": {
                "x": {
                    "value": "tf.reduce_sum(pc ** 2, axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "input_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "variable": {
                    "value": "label_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input.shape[0], None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "radius_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_184": {
                "variable": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(input_pc, knn_index)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(input_patches, axis=0)",
                            "Call"
                        ],
                        [
                            "(input_patches - centroid) / furthest_distance",
                            "BinOp"
                        ],
                        [
                            "tf.gather(input_patches, point_idx, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "point_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_shuffle(tf.range(num_point))[:int(num_point * self.drop_out)]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_232": {
                "a": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_235": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_240": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_data[:, :, :3] * scales, batch_data[:, :, 3:]], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_286": {
                "a": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([cos_y, zero, -sin_y], axis=1), tf.concat([zero, one, zero], axis=1), tf.concat([sin_y, zero, cos_y], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.concat([one, zero, zero], axis=1), tf.concat([zero, cos_x, sin_x], axis=1), tf.concat([zero, -sin_x, cos_x], axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_289": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_294": {
                "variable": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_data[:, :, :3] * scales, batch_data[:, :, 3:]], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_311": {
                "variable": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_gt[:, :, :3] * scales, batch_gt[:, :, 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_336": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_88": {
                "input_tensor": {
                    "value": "pc ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shuffle_and_repeat_130": {
                "buffer_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_209": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_210": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_244": {
                "variable": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.matmul(batch_gt[:, :, :3], rotation_matrix), tf.matmul(batch_gt[:, :, 3:], rotation_matrix), batch_gt[:, :, 6:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_249": {
                "variable": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "batch_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.matmul(batch_gt[:, :, :3], rotation_matrix), tf.matmul(batch_gt[:, :, 3:], rotation_matrix), batch_gt[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_gt, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_gt[:, :, :3] * scales, batch_gt[:, :, 3:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_263": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_264": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((batch_size, 3), dtype=tf.float32) * 2 * np.pi",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(tf.random_normal((batch_size, 3)) * angle_sigma, -angle_clip, angle_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_313": {
                "input": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((B, 1, 1), minval=scale_low, maxval=scale_high, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_322": {
                "x": {
                    "value": "tf.reduce_sum(pc ** 2, axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_215": {
                "values": {
                    "value": "[one, zero, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_216": {
                "values": {
                    "value": "[zero, cos_x, sin_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_217": {
                "values": {
                    "value": "[zero, -sin_x, cos_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_220": {
                "values": {
                    "value": "[cos_y, zero, -sin_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_221": {
                "values": {
                    "value": "[zero, one, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_222": {
                "values": {
                    "value": "[sin_y, zero, cos_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_225": {
                "values": {
                    "value": "[cos_z, sin_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_226": {
                "values": {
                    "value": "[-sin_z, cos_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_227": {
                "values": {
                    "value": "[zero, zero, one]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_269": {
                "values": {
                    "value": "[one, zero, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_270": {
                "values": {
                    "value": "[zero, cos_x, sin_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_271": {
                "values": {
                    "value": "[zero, -sin_x, cos_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_274": {
                "values": {
                    "value": "[cos_y, zero, -sin_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_275": {
                "values": {
                    "value": "[zero, one, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_276": {
                "values": {
                    "value": "[sin_y, zero, cos_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_279": {
                "values": {
                    "value": "[cos_z, sin_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_280": {
                "values": {
                    "value": "[-sin_z, cos_z, zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_281": {
                "values": {
                    "value": "[zero, zero, one]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_322": {
                "input_tensor": {
                    "value": "pc ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_158": {
                "input": {
                    "value": "input_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_pc, 0)",
                            "Call"
                        ],
                        [
                            "self.jitter_perturbation_point_cloud(input_pc, sigma=self.jitter_sigma, clip=self.jitter_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_195": {
                "input": {
                    "value": "batch_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.matmul(batch_data[:, :, :3], rotation_matrix), tf.matmul(batch_data[:, :, 3:], rotation_matrix), batch_data[:, :, 6:]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(batch_data, rotation_matrix)",
                            "Call"
                        ],
                        [
                            "tf.concat([batch_data[:, :, :3] * scales, batch_data[:, :, 3:]], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_236": {
                "a": {
                    "value": "batch_data[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_237": {
                "a": {
                    "value": "batch_data[:, :, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_290": {
                "a": {
                    "value": "batch_data[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_291": {
                "a": {
                    "value": "batch_data[:, :, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_245": {
                "a": {
                    "value": "batch_gt[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_246": {
                "a": {
                    "value": "batch_gt[:, :, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ],
                        [
                            "Rz",
                            "variable"
                        ],
                        [
                            "tf.matmul(Rz, tf.matmul(Ry, Rx))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/model_utils.py": {
        "tensorflow": {
            "meshgrid_98": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.lin_space(-0.2, 0.2, num_grid_point)",
                            "Call"
                        ],
                        [
                            "tf.lin_space(-0.2, 0.2, num_grid_point)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.lin_space(-0.2, 0.2, num_grid_point)",
                            "Call"
                        ],
                        [
                            "tf.lin_space(-0.2, 0.2, num_grid_point)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([x, y], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.lin_space(-0.2, 0.2, num_grid_point)",
                            "Call"
                        ],
                        [
                            "tf.lin_space(-0.2, 0.2, num_grid_point)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_113": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "top_k_160": {
                "variable": {
                    "value": "(val, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-dists",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_167": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "h + val",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_168": {
                "variable": {
                    "value": "repulsion_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.maximum(0.0, h + val)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_245": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(gt, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(gt, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_246": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(pc, axis=0)",
                            "Call"
                        ],
                        [
                            "pc - barycenter",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_250": {
                "variable": {
                    "value": "grouped",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(gt, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.constant(gt, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([batch_size, 1], minval=0, maxval=num_point, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(farthest_point_sample(patch_num, batch_xyz), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_260": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v[:, :, :, 1]",
                            "Subscript"
                        ],
                        [
                            "v[:, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.l2_normalize(normals, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_264": {
                "variable": {
                    "value": "projection",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(rel_pred * normals)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_16": {
                "variable": {
                    "value": "barycenter",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(pc, axis=0)",
                            "Call"
                        ],
                        [
                            "pc - barycenter",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_30": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(query - points) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_33": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_min(distance, axis=2, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_nd_75": {
                "variable": {
                    "value": "batch_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "batch_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(batch_xyz, new_patch_idx)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.unstack(batch_xyz, axis=1), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.boolean_mask(batch_xyz, mask), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "new_patch_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_77": {
                "variable": {
                    "value": "batch_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.unstack(batch_xyz, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_146": {
                "variable": {
                    "value": "pts_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "nsample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(30, 1024)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "histogram_149": {
                "name": {
                    "value": "smooth/unque_index",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pts_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(nsample, shape=(30, 1024))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_152": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(pc, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_156": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(grouped_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_158": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grouped_pred ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_187": {
                "variable": {
                    "value": "dists_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dists_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(dists_forward < forward_threshold, dists_forward, tf.zeros_like(dists_forward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dists_forward, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(dists_forward < threshold, dists_forward, tf.zeros_like(dists_forward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(dists_forward, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_188": {
                "variable": {
                    "value": "dists_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dists_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(dists_backward < backward_threshold, dists_backward, tf.zeros_like(dists_backward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dists_backward, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(dists_backward < threshold, dists_backward, tf.zeros_like(dists_backward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(dists_backward, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_191": {
                "variable": {
                    "value": "cd_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "CD_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_weight * dists_forward + dists_backward",
                            "BinOp"
                        ],
                        [
                            "forward_weight * dists_forward + dists_backward",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_208": {
                "variable": {
                    "value": "dists_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dists_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(dists_forward < forward_threshold, dists_forward, tf.zeros_like(dists_forward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dists_forward, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(dists_forward < threshold, dists_forward, tf.zeros_like(dists_forward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(dists_forward, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_209": {
                "variable": {
                    "value": "dists_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dists_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(dists_backward < backward_threshold, dists_backward, tf.zeros_like(dists_backward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dists_backward, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(dists_backward < threshold, dists_backward, tf.zeros_like(dists_backward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(dists_backward, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_212": {
                "variable": {
                    "value": "cd_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "CD_dist_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CD_dist / radius",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_267": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_15": {
                "name": {
                    "value": "covariance_matrix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_26": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'exponential_distance'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_43": {
                "name": {
                    "value": "extract_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_56": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "closest_d < 5 * tf.reduce_mean(closest_d, axis=1, keepdims=True)",
                    "type": "Compare",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_58": {
                "variable": {
                    "value": "batch_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.boolean_mask(batch_xyz, mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_65": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "farthest_point_sample(patch_num, batch_xyz)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_69": {
                "variable": {
                    "value": "batch_seed_point",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "batch_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(batch_xyz, new_patch_idx)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.unstack(batch_xyz, axis=1), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.boolean_mask(batch_xyz, mask), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([batch_size, 1], minval=0, maxval=num_point, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(farthest_point_sample(patch_num, batch_xyz), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_70": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(k, tf.shape(batch_xyz)[1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.shape(batch_xyz)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_nd_80": {
                "variable": {
                    "value": "batch_features",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "batch_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(batch_features, new_patch_idx)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.unstack(batch_features, axis=1), axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "new_patch_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_81": {
                "variable": {
                    "value": "batch_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.unstack(batch_features, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_85": {
                "variable": {
                    "value": "gt_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gt_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.gather_nd(gt_xyz, new_patch_idx)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.unstack(gt_xyz, axis=1), axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "new_patch_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_86": {
                "variable": {
                    "value": "gt_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.unstack(gt_xyz, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_99": {
                "values": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_178": {
                "name": {
                    "value": "cd_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_184": {
                "variable": {
                    "value": "dists_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "dists_forward < forward_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "dists_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(dists_forward < forward_threshold, dists_forward, tf.zeros_like(dists_forward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dists_forward, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(dists_forward < threshold, dists_forward, tf.zeros_like(dists_forward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(dists_forward, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(dists_forward)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_185": {
                "variable": {
                    "value": "dists_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "dists_backward < backward_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "dists_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(dists_backward < backward_threshold, dists_backward, tf.zeros_like(dists_backward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dists_backward, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(dists_backward < threshold, dists_backward, tf.zeros_like(dists_backward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(dists_backward, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(dists_backward)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_201": {
                "name": {
                    "value": "cd_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_205": {
                "variable": {
                    "value": "dists_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "dists_forward < threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "dists_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(dists_forward < forward_threshold, dists_forward, tf.zeros_like(dists_forward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dists_forward, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(dists_forward < threshold, dists_forward, tf.zeros_like(dists_forward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(dists_forward, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(dists_forward)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_206": {
                "variable": {
                    "value": "dists_backward",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "dists_backward < threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "dists_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(dists_backward < backward_threshold, dists_backward, tf.zeros_like(dists_backward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dists_backward, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(dists_backward < threshold, dists_backward, tf.zeros_like(dists_backward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(dists_backward, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(dists_backward)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_262": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3
                            ],
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3
                            ],
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_264": {
                "x": {
                    "value": "rel_pred * normals",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_19": {
                "a": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(pc, axis=0)",
                            "Call"
                        ],
                        [
                            "pc - barycenter",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(pc, axis=0)",
                            "Call"
                        ],
                        [
                            "pc - barycenter",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_33": {
                "input_tensor": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum((query - points) ** 2, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_35": {
                "x": {
                    "value": "-distance / (h / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unstack_77": {
                "value": {
                    "value": "batch_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(batch_xyz, new_patch_idx)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.unstack(batch_xyz, axis=1), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.boolean_mask(batch_xyz, mask), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_79": {
                "name": {
                    "value": "extract_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_83": {
                "name": {
                    "value": "extract_gt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_156": {
                "x": {
                    "value": "grouped_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(pred, idx)",
                            "Call"
                        ],
                        [
                            "grouped_pred - tf.expand_dims(pred, 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_58": {
                "tensor": {
                    "value": "batch_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(batch_xyz, new_patch_idx)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.unstack(batch_xyz, axis=1), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.boolean_mask(batch_xyz, mask), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(closest_d < 5 * tf.reduce_mean(closest_d, axis=1, keepdims=True), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_81": {
                "value": {
                    "value": "batch_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(batch_features, new_patch_idx)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.unstack(batch_features, axis=1), axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_86": {
                "value": {
                    "value": "gt_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.gather_nd(gt_xyz, new_patch_idx)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.unstack(gt_xyz, axis=1), axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_181": {
                "input_tensor": {
                    "value": "dists_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(dists_forward < forward_threshold, dists_forward, tf.zeros_like(dists_forward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dists_forward, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(dists_forward < threshold, dists_forward, tf.zeros_like(dists_forward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(dists_forward, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_182": {
                "input_tensor": {
                    "value": "dists_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(dists_backward < backward_threshold, dists_backward, tf.zeros_like(dists_backward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dists_backward, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(dists_backward < threshold, dists_backward, tf.zeros_like(dists_backward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(dists_backward, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_184": {
                "input": {
                    "value": "dists_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(dists_forward < forward_threshold, dists_forward, tf.zeros_like(dists_forward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dists_forward, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(dists_forward < threshold, dists_forward, tf.zeros_like(dists_forward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(dists_forward, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_185": {
                "input": {
                    "value": "dists_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(dists_backward < backward_threshold, dists_backward, tf.zeros_like(dists_backward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dists_backward, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(dists_backward < threshold, dists_backward, tf.zeros_like(dists_backward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(dists_backward, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_205": {
                "input": {
                    "value": "dists_forward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(dists_forward < forward_threshold, dists_forward, tf.zeros_like(dists_forward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dists_forward, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(dists_forward < threshold, dists_forward, tf.zeros_like(dists_forward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(dists_forward, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_206": {
                "input": {
                    "value": "dists_backward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(dists_backward < backward_threshold, dists_backward, tf.zeros_like(dists_backward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(dists_backward, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.where(dists_backward < threshold, dists_backward, tf.zeros_like(dists_backward))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(dists_backward, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_70": {
                "input": {
                    "value": "batch_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(batch_xyz, new_patch_idx)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.unstack(batch_xyz, axis=1), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.boolean_mask(batch_xyz, mask), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_56": {
                "input_tensor": {
                    "value": "closest_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "closest_d[:, :, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/tf_ops/CD/tf_nndistance.py": {
        "tensorflow": {
            "load_op_library_7": {
                "variable": {
                    "value": "nn_distance_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(BASE_DIR, 'tf_nndistance_so.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_26": {
                "op_type": {
                    "value": "NnDistance",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_42": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(32, 16384, 3).astype('float32')",
                            "Call"
                        ],
                        [
                            "op.inputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_48": {
                "variable": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(32, 1024, 3).astype('float32')",
                            "Call"
                        ],
                        [
                            "op.inputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_51": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "initialize_all_variables_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "input_tensor": {
                    "value": "retc",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "code/tf_ops/grouping/tf_grouping.py": {
        "tensorflow": {
            "load_op_library_9": {
                "variable": {
                    "value": "grouping_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(BASE_DIR, 'tf_grouping_so.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_66": {
                "op_type": {
                    "value": "GroupPoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "variable": {
                    "value": "r_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "A * A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "variable": {
                    "value": "r_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "B * B",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_78": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(B, perm=(0, 2, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_85": {
                "variable": {
                    "value": "r_A",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "A * A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "variable": {
                    "value": "r_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "B * B",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(B, perm=(0, 2, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "py_func_104": {
                "variable": {
                    "value": "indices_duplicated",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "find_duplicate_columns",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[A]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_26": {
                "variable": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.constant(radius)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_28": {
                "variable": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ],
                        [
                            "tf.expand_dims(tf.constant(radius), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(radius, [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_123": {
                "variable": {
                    "value": "(distances, point_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-D",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "sorted": {
                    "value": "sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_124": {
                "variable": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(tf.range(batch_size), (-1, 1, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, point_num, k, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_125": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_indices, tf.expand_dims(point_indices, axis=3)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_166": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((32, 512, 64)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_167": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((32, 512, 3)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_168": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tmp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((32, 128, 3)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_78": {
                "a": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_79": {
                "a": {
                    "value": "r_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(B * B, axis=2, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(B * B, axis=2, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_87": {
                "a": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_88": {
                "a": {
                    "value": "r_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(B * B, axis=2, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(B * B, axis=2, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_max_105": {
                "input_tensor": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r_A - 2 * m + tf.transpose(r_B, perm=(0, 2, 1))",
                            "BinOp"
                        ],
                        [
                            "r_A - 2 * m + tf.transpose(r_B, perm=(0, 2, 1))",
                            "BinOp"
                        ],
                        [
                            "D + tf.reduce_max(D) * tf.cast(indices_duplicated, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "batch_distance_matrix_general(queries, points)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_105": {
                "x": {
                    "value": "indices_duplicated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((N, 1, P), dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "tf.py_func(find_duplicate_columns, [A], tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_116": {
                "name": {
                    "value": "knn_point",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_165": {
                "device_name": {
                    "value": "/gpu:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_179": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_26": {
                "value": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ],
                        [
                            "tf.expand_dims(tf.constant(radius), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(radius, [batch_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_117": {
                "input": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_118": {
                "input": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "tensor": {
                    "value": "tf.range(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_125": {
                "input": {
                    "value": "point_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/tf_ops/grouping/tf_grouping_op_test.py": {
        "tensorflow": {
            "main_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_12": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((1, 128, 16)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_14": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((1, 128, 3)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_15": {
                "variable": {
                    "value": "xyz2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.random((1, 8, 3)).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "compute_gradient_error_25": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.random.random((1, 128, 16)).astype('float32'))",
                            "Call"
                        ]
                    ]
                },
                "x_shape": {
                    "value": "(1, 128, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(points, idx)",
                            "Call"
                        ]
                    ]
                },
                "y_shape": {
                    "value": "(1, 8, 32, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_11": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "code/tf_ops/sampling/tf_sampling.py": {
        "tensorflow": {
            "load_op_library_12": {
                "variable": {
                    "value": "sampling_module",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "os.path.join(BASE_DIR, 'tf_sampling_so.so')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RegisterGradient_43": {
                "op_type": {
                    "value": "GatherPoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_67": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "triangles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(1, 5, 3, 3).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_71": {
                "variable": {
                    "value": "areas",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.cross(trib - tria, tric - tria) ** 2, 2) + 1e-09",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_66": {
                "device_name": {
                    "value": "/gpu:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_87": {
                "target": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_79": {
                "x": {
                    "value": "us + vs - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "input_tensor": {
                    "value": "tf.cross(trib - tria, tric - tria) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_83": {
                "input": {
                    "value": "us",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform((1, 8192))",
                            "Call"
                        ],
                        [
                            "(uplusv + uminusv) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_71": {
                "a": {
                    "value": "trib - tria",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "tric - tria",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/utils/tf_util.py": {
        "tensorflow": {
            "gather_nd_55": {
                "variable": {
                    "value": "point_cloud_neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "idx[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_56": {
                "variable": {
                    "value": "point_cloud_central",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_58": {
                "variable": {
                    "value": "point_cloud_central",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud_central",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(features, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tile(point_cloud_central, [1, 1, k, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tile(point_cloud_central, [1, 1, k, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_60": {
                "variable": {
                    "value": "edge_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[point_cloud_central, point_cloud_neighbors - point_cloud_central]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "moments_68": {
                "variable": {
                    "value": "(mu, sigma_sq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "shift",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "var_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[channels]",
                            "List"
                        ],
                        [
                            "curr_var.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "var_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[channels]",
                            "List"
                        ],
                        [
                            "curr_var.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NewCheckpointReader_82": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Saver_95": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "restore_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_107": {
                "variable": {
                    "value": "centroid",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc - centroid",
                            "BinOp"
                        ],
                        [
                            "pc / furthest_distance",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_109": {
                "variable": {
                    "value": "furthest_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(pc ** 2, axis=-1, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_nd_129": {
                "variable": {
                    "value": "point_cloud_neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "idx[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_130": {
                "variable": {
                    "value": "point_cloud_central",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_132": {
                "variable": {
                    "value": "point_cloud_central",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud_central",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(features, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tile(point_cloud_central, [1, 1, k, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tile(point_cloud_central, [1, 1, k, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "edge_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[point_cloud_central, point_cloud_neighbors - point_cloud_central]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_17": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv2d(y, growth_rate, [1, 1], padding='VALID', scope='l%d' % i, **kwargs), tf.tile(tf.expand_dims(feature, axis=2), [1, 1, k, 1])], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv2d(y, growth_rate, [1, 1], padding='VALID', scope='l%d' % i, **kwargs), y], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv2d(y, growth_rate, [1, 1], padding='VALID', scope='l%d' % i, **kwargs), tf.tile(tf.expand_dims(feature, axis=2), [1, 1, k, 1])], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv2d(y, growth_rate, [1, 1], padding='VALID', scope='l%d' % i, activation_fn=None, **kwargs), y], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv2d(y, growth_rate, [1, 1], padding='VALID', scope='l%d' % i, **kwargs), y], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_37": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv2d(y, growth_rate, [1, 1], padding='VALID', scope='l%d' % i, **kwargs), tf.tile(tf.expand_dims(feature, axis=2), [1, 1, k, 1])], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv2d(y, growth_rate, [1, 1], padding='VALID', scope='l%d' % i, **kwargs), y], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(y, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv2d(y, growth_rate, [1, 1], padding='VALID', scope='l%d' % i, **kwargs), tf.tile(tf.expand_dims(feature, axis=2), [1, 1, k, 1])], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv2d(y, growth_rate, [1, 1], padding='VALID', scope='l%d' % i, activation_fn=None, **kwargs), y], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([conv2d(y, growth_rate, [1, 1], padding='VALID', scope='l%d' % i, **kwargs), y], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_181": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv1d_244": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "dense_292": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(weight_decay)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_6": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_77": {
                "x": {
                    "value": "sigma_sq + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_100": {
                "features": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_110": {
                "x": {
                    "value": "tf.reduce_sum(pc ** 2, axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_179": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_190": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs, num_output_channels, kernel_size, stride, padding, kernel_initializer=initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), bias_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), use_bias=use_bias, reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, momentum=bn_decay, training=is_training, renorm=False, fused=True)",
                            "Call"
                        ],
                        [
                            "instance_norm(outputs, is_training)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs, num_output_channels, kernel_size, stride, padding, kernel_initializer=initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), bias_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), use_bias=use_bias, reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, momentum=bn_decay, training=is_training, renorm=False, fused=True)",
                            "Call"
                        ],
                        [
                            "instance_norm(outputs, is_training)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs, num_outputs, use_bias=use_bias, kernel_initializer=initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), bias_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, momentum=bn_decay, training=is_training, renorm=False)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "renorm": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "fused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_242": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_253": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs, num_output_channels, kernel_size, stride, padding, kernel_initializer=initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), bias_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), use_bias=use_bias, reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, momentum=bn_decay, training=is_training, renorm=False, fused=True)",
                            "Call"
                        ],
                        [
                            "instance_norm(outputs, is_training)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs, num_output_channels, kernel_size, stride, padding, kernel_initializer=initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), bias_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), use_bias=use_bias, reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, momentum=bn_decay, training=is_training, renorm=False, fused=True)",
                            "Call"
                        ],
                        [
                            "instance_norm(outputs, is_training)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs, num_outputs, use_bias=use_bias, kernel_initializer=initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), bias_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, momentum=bn_decay, training=is_training, renorm=False)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "renorm": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "fused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_290": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_301": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs, num_output_channels, kernel_size, stride, padding, kernel_initializer=initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), bias_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), use_bias=use_bias, reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, momentum=bn_decay, training=is_training, renorm=False, fused=True)",
                            "Call"
                        ],
                        [
                            "instance_norm(outputs, is_training)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(inputs, num_output_channels, kernel_size, stride, padding, kernel_initializer=initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), bias_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), use_bias=use_bias, reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, momentum=bn_decay, training=is_training, renorm=False, fused=True)",
                            "Call"
                        ],
                        [
                            "instance_norm(outputs, is_training)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs, num_outputs, use_bias=use_bias, kernel_initializer=initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), bias_regularizer=tf.contrib.layers.l2_regularizer(weight_decay), reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, momentum=bn_decay, training=is_training, renorm=False)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "renorm": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_10": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv2d(y, growth_rate, [1, 1], padding='VALID', scope='l%d' % i, **kwargs), tf.tile(tf.expand_dims(feature, axis=2), [1, 1, k, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_14": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv2d(y, growth_rate, [1, 1], padding='VALID', scope='l%d' % i, **kwargs), y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_26": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv2d(y, growth_rate, [1, 1], padding='VALID', scope='l%d' % i, **kwargs), tf.tile(tf.expand_dims(feature, axis=2), [1, 1, k, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_variables_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_110": {
                "input_tensor": {
                    "value": "pc ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_30": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv2d(y, growth_rate, [1, 1], padding='VALID', scope='l%d' % i, activation_fn=None, **kwargs), y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_34": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv2d(y, growth_rate, [1, 1], padding='VALID', scope='l%d' % i, **kwargs), y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_variables_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_12": {
                "input": {
                    "value": "tf.expand_dims(feature, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_28": {
                "input": {
                    "value": "tf.expand_dims(feature, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_12": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_28": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "prepare_data/create_tfrecords.py": {
        "tensorflow": {
            "placeholder_65": {
                "variable": {
                    "value": "input_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "num_in_point_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "seed_points_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, num_patch_per_shape, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_71": {
                "variable": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [1, None, 3])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "knn_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_72": {
                "variable": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(input_placeholder, knn_index)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(input_patches, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Feature_15": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_18": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FloatList_15": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BytesList_18": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TFRecordWriter_78": {
                "path": {
                    "value": "os.path.join(out_dir, '{}_p{}_shard{}.tfrecord'.format('_'.join(datasets), num_point, i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_105": {
                "variable": {
                    "value": "tfexample",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_105": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{k: _floats_feature(v[i].flatten().tolist()) for (k, v) in example.items()}",
                            "DictComp"
                        ]
                    ]
                }
            }
        }
    }
}