{
    "colab_support/heart_detect.py": {
        "torch": {
            "load_100": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'retinanet_heart.pt'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Tensor_117": {
                "variable": {
                    "value": "torch_pic",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "colab_support/load_model.py": {
        "torch": {
            "load_36": {
                "f": {
                    "value": "param_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'NLST-Tri2DNet_True_0.0001_16-00700-encoder.ptm'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "data.py": {
        "torch": {}
    },
    "model.py": {
        "torch": {
            "CrossEntropyLoss_60": {
                "variable": {
                    "value": "ce",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': pretrained_params, 'lr': self.lr / 10}, {'params': aux_params, 'lr': self.lr / 5}, {'params': att_params, 'lr': self.lr}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_85": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "models[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_86": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "models[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_source",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "softmax_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SoftmaxSampler(self.train_source, self.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_180": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.test_source",
                            "Attribute"
                        ],
                        [
                            "self.train_source",
                            "Attribute"
                        ],
                        [
                            "self.val_source",
                            "Attribute"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "tordata.sampler.SequentialSampler(source)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_295": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pred.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_226": {
                "variable": {
                    "value": "volumes",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "volumes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "volumes.cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(volumes)",
                            "Call"
                        ],
                        [
                            "volumes.cuda()",
                            "Call"
                        ],
                        [
                            "volumes.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(volumes)",
                            "Call"
                        ],
                        [
                            "volumes.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_250": {
                "variable": {
                    "value": "_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(_v, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(_v, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "volumes.data.numpy()[0][0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_260": {
                "variable": {
                    "value": "volumes",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "volumes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "volumes.cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(volumes)",
                            "Call"
                        ],
                        [
                            "volumes.cuda()",
                            "Call"
                        ],
                        [
                            "volumes.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(volumes)",
                            "Call"
                        ],
                        [
                            "volumes.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_287": {
                "variable": {
                    "value": "cam",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(weight.view(s, c, 1, 1) * output).sum(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_333": {
                "obj": {
                    "value": "self.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join('checkpoint', '{}-{:0>5}-encoder.ptm'.format(self.save_name, self.restore_iter))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_336": {
                "obj": {
                    "value": "self.optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join('checkpoint', '{}-{:0>5}-optimizer.ptm'.format(self.save_name, self.restore_iter))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(_v, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(_v, 0).contiguous()",
                            "Call"
                        ],
                        [
                            "volumes.data.numpy()[0][0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_343": {
                "f": {
                    "value": "osp.join('checkpoint', '{}-{:0>5}-encoder.ptm'.format(self.save_name, restore_iter))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_353": {
                "f": {
                    "value": "self.prt_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_183": {
                "data_source": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.test_source",
                            "Attribute"
                        ],
                        [
                            "self.train_source",
                            "Attribute"
                        ],
                        [
                            "self.val_source",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_350": {
                "f": {
                    "value": "opt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "osp.join('checkpoint', '{}-{:0>5}-optimizer.ptm'.format(self.save_name, restore_iter))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "net.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.backbone2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, kernel_size=3, dilation=2, padding=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.backbone2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, kernel_size=3, dilation=2, padding=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.aux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*_net_list[-3:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.fc_fuse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_97": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aux_feature_sagittal, aux_feature_coronal, aux_feature_axial]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_44": {
                "variable": {
                    "value": "self.dout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "variable": {
                    "value": "self.dout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "net_wo_att.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.backbone2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, kernel_size=3, dilation=2, padding=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.aux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*_net_list[-3:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc_fuse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_75": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aux_feature_sagittal, aux_feature_coronal, aux_feature_axial]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.dout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "visualization.py": {
        "torch": {}
    }
}