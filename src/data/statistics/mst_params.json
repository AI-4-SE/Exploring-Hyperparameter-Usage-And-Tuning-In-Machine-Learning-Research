{
    "nmtpytorch/datasets/shelve.py": {
        "sklearn": {
            "normalize_59": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data[str(idx)]",
                            "Subscript"
                        ],
                        [
                            "preprocessing.normalize(feats)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "nmtpytorch/utils/ml_metrics.py": {
        "sklearn": {
            "coverage_error_42": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "arange_66": {
                "variable": {
                    "value": "self.denom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1 + n_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_80": {
                "variable": {
                    "value": "(sorted_logp, sorted_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "experimental/asrv1.py": {
        "torch": {
            "nonzero_179": {
                "input": {
                    "value": "batch[self.tl][1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "experimental/coattentive_nmt.py": {
        "torch": {
            "cat_192": {
                "tensors": {
                    "value": "self.dec.alphas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_192": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experimental/coattentive_video_nmt.py": {
        "torch": {
            "cat_213": {
                "tensors": {
                    "value": "self.dec.alphas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_213": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experimental/ctc_asr.py": {
        "torch": {}
    },
    "experimental/ctc_decoder.py": {
        "torch": {
            "masked_select_45": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_cpu_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.cpu().int()",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "y_cpu_int != 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "out.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "experimental/ctc_search.py": {
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "beam_storage",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_len, max_batch_size, k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_69": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_batch_size * k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "nll_storage",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.batch_sampler.batch_size",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "experimental/image_sentence_ranking.py": {
        "torch": {
            "cat_238": {
                "variable": {
                    "value": "enc1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "enc1_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_239": {
                "variable": {
                    "value": "enc2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "enc2_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mm_281": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images[index].view(1, images.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "captions.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_282": {
                "variable": {
                    "value": "(ordered, inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(im, captions.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(sent, images.t())",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_319": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "captions[index].view(1, captions.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "images.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_320": {
                "variable": {
                    "value": "(ordered, inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(im, captions.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(sent, images.t())",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_191": {
                "input": {
                    "value": "batch[self.sl][1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "experimental/mpn_cond_decoder.py": {
        "torch": {
            "Embedding_66": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.emb_maxnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.emb_gradscale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_106": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ctx.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size * self.n_states",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_161": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out2prob(logit)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "variable": {
                    "value": "self.do_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_init(ctx_dict)",
                            "Call"
                        ],
                        [
                            "self.f_next(ctx_dict, y_emb[t], h)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_116": {
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_init(ctx_dict)",
                            "Call"
                        ],
                        [
                            "self.f_next(ctx_dict, y_emb[t], h)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "*size": {
                    "value": "y.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "y.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experimental/reverse_video_decoder.py": {
        "torch": {
            "MSELoss_95": {
                "variable": {
                    "value": "self.MSE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_97": {
                "variable": {
                    "value": "self.SmoothL1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ctx.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size * self.n_states",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_89": {
                "variable": {
                    "value": "self.do_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_104": {
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "y.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.video_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experimental/video_nmt.py": {
        "torch": {
            "cat_132": {
                "tensors": {
                    "value": "self.dec.alphas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experimental/videocaptioner.py": {
        "torch": {
            "nonzero_218": {
                "input": {
                    "value": "batch[self.tl][1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "experimental/videoreconstruction.py": {
        "torch": {}
    },
    "nmtpytorch/datasets/imagefolder.py": {
        "torch": {
            "stack_79": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nmtpytorch/datasets/kaldi.py": {
        "torch": {
            "pad_sequence_67": {
                "sequences": {
                    "value": "[torch.FloatTensor(x) for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/datasets/label.py": {
        "torch": {
            "t_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/datasets/multimodal.py": {
        "torch": {
            "BatchSampler_113": {
                "variable": {
                    "value": "self.sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(self)",
                            "Call"
                        ],
                        [
                            "RandomSampler(self)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_108": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomSampler_111": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nmtpytorch/datasets/numpy.py": {
        "torch": {
            "from_numpy_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(batch, dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/datasets/numpy_sequence.py": {
        "torch": {
            "from_numpy_79": {
                "ndarray": {
                    "value": "np.array(padded, dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_79": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/datasets/onehot.py": {
        "torch": {}
    },
    "nmtpytorch/datasets/text.py": {
        "torch": {
            "pad_sequence_48": {
                "sequences": {
                    "value": "[torch.tensor(b, dtype=torch.long) for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/attention/co.py": {
        "torch": {
            "Conv2d_25": {
                "variable": {
                    "value": "self.mlp_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ctx_1_dim + ctx_2_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottleneck",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.mlp_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottleneck",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "mlp_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.project_1_to_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ctx_1_dim + ctx_2_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottleneck",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.project_2_to_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ctx_1_dim + ctx_2_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottleneck",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_41": {
                "variable": {
                    "value": "catted",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b_ctx_1, b_ctx_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_52": {
                "variable": {
                    "value": "dist_1_to_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "affinity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_out(hidden).squeeze(1)",
                            "Call"
                        ],
                        [
                            "affinity_matrix + ctx_2_neg_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_57": {
                "variable": {
                    "value": "dist_2_to_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "affinity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_out(hidden).squeeze(1)",
                            "Call"
                        ],
                        [
                            "affinity_matrix + ctx_2_neg_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_57": {
                "variable": {
                    "value": "dist_2_to_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_55": {
                "tensors": {
                    "value": "[ctx_2, context_1_to_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "[ctx_1, context_2_to_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/attention/dot.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.hid2ctx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_74": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid_.permute(1, 0, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "ctx_.permute(1, 2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_74": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_74": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_74": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_82": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(hid_.permute(1, 0, 2), ctx_.permute(1, 2, 0)).div(self.temperature).squeeze(1).t()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.ctx2ctx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ctx_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.ctx2hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ctx_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/attention/hierarchical.py": {
        "torch": {
            "ModuleList_24": {
                "variable": {
                    "value": "self.ctx_projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(dim, mid_dim, bias=False) for dim in self.ctx_dims]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.dec_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "ctx_projected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p(ctx).unsqueeze(0) for (p, ctx) in zip(self.ctx_projs, contexts)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "variable": {
                    "value": "att_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp(self.activ(dec_state_proj + ctx_projected))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "ctxs_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c.unsqueeze(0) for c in contexts]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/attention/mhco.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.linear_keys_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ctx_1_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx_1_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.linear_values_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ctx_1_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx_1_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.linear_keys_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ctx_2_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx_2_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.linear_values_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ctx_2_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx_2_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.final_1_to_2_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottleneck",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottleneck",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.final_2_to_1_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottleneck",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottleneck",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.project_1_to_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ctx_1_dim + ctx_2_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottleneck",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.project_2_to_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ctx_1_dim + ctx_2_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottleneck",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key_2_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.linear_keys_2(ctx_2), ctx_2_len)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_1_up.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_70": {
                "variable": {
                    "value": "dist_1_to_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(key_2_up, key_1_up.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "scores.masked_fill(mask.byte(), -1e+18)",
                            "Call"
                        ],
                        [
                            "scores.masked_fill(mask.byte(), -1e+18)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_76": {
                "variable": {
                    "value": "dist_2_to_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(key_2_up, key_1_up.transpose(2, 3))",
                            "Call"
                        ],
                        [
                            "scores.masked_fill(mask.byte(), -1e+18)",
                            "Call"
                        ],
                        [
                            "scores.masked_fill(mask.byte(), -1e+18)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "input": {
                    "value": "dist_1_to_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_1_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.linear_values_1(ctx_1), ctx_1_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_78": {
                "input": {
                    "value": "dist_2_to_1.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "value_2_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.linear_values_2(ctx_2), ctx_2_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "[ctx_2, context_1_to_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_81": {
                "tensors": {
                    "value": "[ctx_1, context_2_to_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/attention/mlp.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mid_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_62": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp(self.activ(inner_sum)).div(self.temperature).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.mid_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/decoders/conditional.py": {
        "torch": {
            "Embedding_82": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.emb_maxnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.emb_gradscale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_127": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_230": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out2prob(logit)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_114": {
                "variable": {
                    "value": "self.do_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_131": {
                "tensors": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_init(ctx_dict, wait_k)",
                            "Call"
                        ],
                        [
                            "self.f_next(ctx_dict, bos, h, wait_k)",
                            "Call"
                        ],
                        [
                            "self.f_next(ctx_dict, emb, h, wait_k)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_135": {
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_init(ctx_dict, wait_k)",
                            "Call"
                        ],
                        [
                            "self.f_next(ctx_dict, bos, h, wait_k)",
                            "Call"
                        ],
                        [
                            "self.f_next(ctx_dict, emb, h, wait_k)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "*size": {
                    "value": "ctx.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size * self.n_states",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "*size": {
                    "value": "idxs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "idxs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/decoders/conditionalmm.py": {
        "torch": {
            "log_softmax_72": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out2prob(logit)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/decoders/multisourceconditional.py": {
        "torch": {
            "ModuleList_36": {
                "variable": {
                    "value": "self.attns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "log_softmax_67": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out2prob(logit)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/decoders/simplegru.py": {
        "torch": {
            "log_softmax_43": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out2prob(logit)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "(h1, z_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/decoders/switchinggru.py": {
        "torch": {
            "ModuleDict_33": {
                "variable": {
                    "value": "self.atts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "atts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Embedding_36": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_39": {
                "variable": {
                    "value": "self.dec0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_40": {
                "variable": {
                    "value": "self.dec1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_58": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_92": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out2prob(logit)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_44": {
                "variable": {
                    "value": "self.do_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(iter(sources.values()))[0].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "y.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "y.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/decoders/vector.py": {
        "torch": {
            "log_softmax_33": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out2prob(logit)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/decoders/xu.py": {
        "torch": {
            "Embedding_67": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.emb_maxnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.emb_gradscale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_113": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_169": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hid2out(h_t)",
                            "Call"
                        ],
                        [
                            "logit + self.ff_out_ctx(z_t)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(logit)",
                            "Call"
                        ],
                        [
                            "self.do(logit)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_175": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out2prob(logit)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_116": {
                "tensors": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_init(ctx_dict)",
                            "Call"
                        ],
                        [
                            "self.f_next(ctx_dict, y_emb[t], h)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_120": {
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_init(ctx_dict)",
                            "Call"
                        ],
                        [
                            "self.f_next(ctx_dict, y_emb[t], h)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "*size": {
                    "value": "ctx.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size * self.n_states",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_152": {
                "tensors": {
                    "value": "[y, z_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "*size": {
                    "value": "y.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "y.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/embedding.py": {
        "torch": {
            "Tensor_27": {
                "variable": {
                    "value": "avail_embs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_39": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab.n_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_46": {
                "input": {
                    "value": "emb.weight.data[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "avail_embs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_53": {
                "variable": {
                    "value": "grad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "vocab.n_tokens",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/encoders/bilstmp.py": {
        "torch": {
            "ModuleList_53": {
                "variable": {
                    "value": "self.ffs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_54": {
                "variable": {
                    "value": "self.lstms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_76": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.pad_tuple",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_61": {
                "*args": {
                    "value": "self.input_size if i == 0 else self.hidden_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/encoders/feature.py": {
        "torch": {
            "Dropout_66": {
                "variable": {
                    "value": "self.do_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_emb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "variable": {
                    "value": "self.do_ctx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_ctx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_99": {
                "variable": {
                    "value": "packed_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb(x.float())",
                            "Call"
                        ],
                        [
                            "proj[:, sidxs]",
                            "Subscript"
                        ],
                        [
                            "self.do_emb(proj)",
                            "Call"
                        ],
                        [
                            "self.do_emb(proj)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "slens.long().data.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_92": {
                "input": {
                    "value": "sidxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.sum(0).sort(descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_102": {
                "sequence": {
                    "value": "packed_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc(packed_input)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nmtpytorch/layers/encoders/image.py": {
        "torch": {
            "Sequential_154": {
                "variable": {
                    "value": "self.cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_150": {
                "variable": {
                    "value": "layers[dropout]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout2d_152": {
                "variable": {
                    "value": "layers[dropout]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nmtpytorch/layers/encoders/multimodal_bilstmp.py": {
        "torch": {
            "pad_105": {
                "variable": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feat_layer(torch.cat([x, aux_x.repeat(x.shape[0], 1, 1)], dim=-1))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.pad_tuple",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_122": {
                "tensors": {
                    "value": "[hs, aux_x.repeat(hs.shape[0], 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "[x, aux_x.repeat(x.shape[0], 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/encoders/multimodal_text.py": {
        "torch": {
            "cat_113": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mask[0].unsqueeze(0), mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "tensors": {
                    "value": "(e, v.expand(e.shape[0], -1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "(self.ff_vis(v), e)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "(e, self.ff_vis(v))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/encoders/text.py": {
        "torch": {
            "Dropout_80": {
                "variable": {
                    "value": "self.do_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_emb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_83": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.emb_maxnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "self.emb_gradscale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*output_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_118": {
                "variable": {
                    "value": "packed_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.do_emb(self.emb(x[:, sidxs]))",
                            "Call"
                        ],
                        [
                            "self.do_emb(self.emb(x))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "slens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sort_batch(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNorm_96": {
                "normalized_shape": {
                    "value": "self.ctx_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "p": {
                    "value": "self.dropout_ctx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_124": {
                "sequence": {
                    "value": "packed_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc(packed_emb)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nmtpytorch/layers/ff.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_53": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/flatten.py": {
        "torch": {}
    },
    "nmtpytorch/layers/fusion.py": {
        "torch": {
            "cat_43": {
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/max_margin.py": {
        "torch": {
            "tensor_45": {
                "data": {
                    "value": "[0.001]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "enc1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_57": {
                "n": {
                    "value": "scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "enc1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/rnninit.py": {
        "torch": {
            "stack_56": {
                "tensors": {
                    "value": "torch.split(x, self.hidden_size, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "ctx.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size * self.n_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_56": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initializer(ctx, ctx_mask)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/seq_conv.py": {
        "torch": {
            "ModuleList_22": {
                "variable": {
                    "value": "self.conv_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(in_channels=input_dim, out_channels=size, kernel_size=2 * k + 1, padding=k) for (k, size) in enumerate(filters) if size > 0]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "conv_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv(x.permute(1, 2, 0)) for conv in self.conv_proj]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_30": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.max_pool_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.max_pool_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_44": {
                "variable": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(conv_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(conv_out, pad=[pad_size, pad_size])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_size, pad_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv1d_23": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2 * k + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/z.py": {
        "torch": {
            "cat_65": {
                "variable": {
                    "value": "comb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[k][0] for k in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "self.combination",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "comb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x[k][0] for k in x], 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleDict_76": {
                "variable": {
                    "value": "projectors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_45": {
                "variable": {
                    "value": "self.z_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/layers/z_att.py": {
        "torch": {
            "ModuleDict_92": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRUCell_116": {
                "variable": {
                    "value": "self.dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.ctx_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ctx_dict[key][0].shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "z_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_states_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleDict_78": {
                "variable": {
                    "value": "self.z_transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_136": {
                "*size": {
                    "value": "self.ctx_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_193": {
                "variable": {
                    "value": "summ",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "att_ctx_dict[e].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/mainloop.py": {
        "torch": {
            "DataParallel_99": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "self.dev_mgr.cuda_dev_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_265": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_314": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_320": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/models/acapt.py": {
        "torch": {
            "Dropout_147": {
                "variable": {
                    "value": "self.do_ctx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.opts.model['dropout_ctx']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_196": {
                "input": {
                    "value": "batch[self.tl][1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/models/amnmtfeats.py": {
        "torch": {
            "cat_108": {
                "tensors": {
                    "value": "self.dec.history['alpha_img']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/models/amnmtfeats_fa.py": {
        "torch": {
            "Sequential_29": {
                "variable": {
                    "value": "self.enc_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(in_channels, self.ctx_sizes[self.sl], 1, 1)), ('relu1', nn.ReLU()), ('conv2', nn.Conv2d(self.ctx_sizes[self.sl], 1, 1, 1)), ('relu2', nn.ReLU())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[conv_map, tiled_encoding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_58": {
                "variable": {
                    "value": "att_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores.view(batch.size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(self.ctx_sizes.values())",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.ctx_sizes[self.sl]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "self.ctx_sizes[self.sl]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/models/amnmtraw.py": {
        "torch": {
            "normalize_135": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn(batch['image'])",
                            "Call"
                        ],
                        [
                            "feats.view((*feats.shape[:2], -1)).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "F.normalize(feats, dim=self.opts.model['l2_norm_dim']).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.opts.model['l2_norm_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/models/asr.py": {
        "torch": {
            "Sequential_170": {
                "variable": {
                    "value": "self.vis_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "FF(self.opts.model['adaptation_dim'], 256, activ=activ)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_177": {
                "variable": {
                    "value": "self.emb_cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.opts.model['feat_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_205": {
                "input": {
                    "value": "self.emb_cat(batch['io'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_207": {
                "input": {
                    "value": "self.vis_proj(batch['feats'])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/models/mnmt.py": {
        "torch": {
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/models/multitask.py": {
        "torch": {
            "ModuleDict_181": {
                "variable": {
                    "value": "self.encs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_203": {
                "variable": {
                    "value": "self.decs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_285": {
                "input": {
                    "value": "batch[d][1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/models/multitask_att.py": {
        "torch": {
            "ModuleDict_279": {
                "variable": {
                    "value": "self.encs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_287": {
                "variable": {
                    "value": "self.single_ffs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_321": {
                "variable": {
                    "value": "self.decs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_466": {
                "variable": {
                    "value": "decoder_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.decs[decoder_key].hiddens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_418": {
                "input": {
                    "value": "batch[d][1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/models/nli.py": {
        "torch": {
            "LSTM_100": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.opts.model['inp_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.opts.model['enc_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.opts.model['n_encoders']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.opts.model['bidirectional']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "FF(inp_dim, proj_dim, activ=self.opts.model['nonlin'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "NLLLoss_138": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_116": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.vocabs['pre'])",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.opts.model['emb_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "tensors": {
                    "value": "(last_pre, last_hyp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_131": {
                "p": {
                    "value": "self.opts.model['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_133": {
                "p": {
                    "value": "self.opts.model['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_135": {
                "p": {
                    "value": "self.opts.model['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LogSoftmax_137": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/models/nmt.py": {
        "torch": {
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_247": {
                "input": {
                    "value": "batch[self.tl][1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/models/sat.py": {
        "torch": {
            "normalize_130": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn(batch['image'])",
                            "Call"
                        ],
                        [
                            "feats.view((*feats.shape[:2], -1)).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "F.normalize(feats, dim=self.opts.model['l2_norm_dim']).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.opts.model['l2_norm_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_140": {
                "tensors": {
                    "value": "self.dec.history['alpha_img']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/monitor.py": {
        "torch": {
            "save_120": {
                "obj": {
                    "value": "model_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'opts': self.model.opts.to_dict(), 'model': self.model.state_dict(), 'history': self.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.save_path / '{}.best.{}.ckpt'.format(self.exp_id, self.early_metric.lower())",
                            "BinOp"
                        ],
                        [
                            "self.exp_id",
                            "Attribute"
                        ],
                        [
                            "fname + '-{}'.format(suffix)",
                            "BinOp"
                        ],
                        [
                            "self.save_path / (fname + '.ckpt')",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "nmtpytorch/optimizer.py": {
        "torch": {
            "ReduceLROnPlateau_105": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.lr_decay_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "self.lr_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_decay_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "self.lr_decay_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__114": {
                "parameters": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.gclip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/samplers/bucket.py": {
        "torch": {}
    },
    "nmtpytorch/search.py": {
        "torch": {
            "zeros_85": {
                "variable": {
                    "value": "beam_storage",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "max_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.batch_sampler.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_87": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_batch_size * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "nll_storage",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.batch_sampler.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/tester.py": {
        "torch": {
            "set_grad_enabled_33": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/translator.py": {
        "torch": {
            "set_grad_enabled_40": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/utils/data.py": {
        "torch": {
            "sort_28": {
                "variable": {
                    "value": "(slens, sidxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "olens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "omask.sum(0)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(idxs)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_17": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "dataset.sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_29": {
                "input": {
                    "value": "sidxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(olens, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "ndarray": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(tmp, dtype='float32')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nmtpytorch/utils/device.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_73": {
                "variable": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "nmtpytorch/utils/misc.py": {
        "torch": {
            "load_67": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(pathlib.Path(fname).expanduser())",
                            "Call"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time.time()",
                            "Call"
                        ],
                        [
                            "int(seed)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time.time()",
                            "Call"
                        ],
                        [
                            "int(seed)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nmtpytorch/utils/nn.py": {
        "torch": {}
    },
    "scripts/dump-attention.py": {
        "torch": {
            "set_grad_enabled_64": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "fini",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/visualize-attention.py": {
        "torch": {}
    }
}