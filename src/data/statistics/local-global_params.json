{
    "LIDC.py": {
        "sklearn": {
            "StratifiedKFold_84": {
                "variable": {
                    "value": "stFold",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "kflod.py": {
        "sklearn": {
            "precision_recall_fscore_support_12": {
                "variable": {
                    "value": "(prec, recall, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "roc_curve_13": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "auc_14": {
                "variable": {
                    "value": "auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_42": {
                "variable": {
                    "value": "all_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "849",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "all_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "849",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "trset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DataLoader(trset, batch_size, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DataLoader(testset, batch_size, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_95": {
                "obj": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'all_pred': all_pred, 'all_targets': all_targets}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path.join('results', f'{name}_result')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "sklearn": {
            "roc_curve_77": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "auc_78": {
                "variable": {
                    "value": "auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_87": {
                "variable": {
                    "value": "all_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.valid_dataset.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "all_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.valid_dataset.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_32": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data",
                            "Name"
                        ]
                    ]
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments.py": {
        "torch": {
            "Adam_26": {
                "variable": {
                    "value": "optm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_45": {
                "variable": {
                    "value": "optm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_64": {
                "variable": {
                    "value": "optm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "optm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "optm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.fc.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "optm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_157": {
                "variable": {
                    "value": "optm",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.fc.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "preprocessing.py": {
        "torch": {
            "zeros_81": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_data * aug_size, 1, img_size, img_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_data * aug_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_96": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_data * aug_size, 1, img_size, img_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_data * aug_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_111": {
                "variable": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_data * aug_size, 3, img_size, img_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_data * aug_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_138": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_data * aug_size, 3, img_size, img_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_data * aug_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_155": {
                "variable": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "x[c * aug_size + j, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "im.crop((8, 8, 40, 40))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "Image.fromarray(view, mode='L')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "x[c * aug_size + j, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "im.crop((8, 8, 40, 40))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "Image.fromarray(view, mode='L')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "x[c * aug_size + j, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "im.crop((8, 8, 40, 40))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "Image.fromarray(view, mode='L')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_148": {
                "variable": {
                    "value": "x[c * aug_size + j, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im",
                    "type": "Call",
                    "possible_values": [
                        [
                            "im.crop((8, 8, 40, 40))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "imread(path.join(dir, f'{id:.0f}.{j}.png'))",
                            "Call"
                        ],
                        [
                            "Image.fromarray(view, mode='L')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "resnet_attn.py": {
        "torch": {
            "Conv2d_7": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.resnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicBlock(1, 32)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.resnetAttn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.resnetAttn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.resnetAttn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "T.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_75": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_88": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_92": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.resnetAttn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(1, 32)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_121": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.resnetAttn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.resnetAttn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.resnetAttn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.resnetAttn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(1, 32)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_146": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.resnetAttn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.resnetAttn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.resnetAttn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.resnetAttn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicBlock(1, 32)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_169": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.resnet(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.resnetAttn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.resnetAttn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.resnetAttn(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "T.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_46": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_48": {
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_49": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_108": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_110": {
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_111": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_132": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_135": {
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_136": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_155": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_158": {
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_159": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}