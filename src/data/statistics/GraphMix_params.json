{
    "semisupervised/codes/gnn.py": {
        "torch": {
            "randperm_21": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dropout_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['input_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['input_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_31": {
                "n": {
                    "value": "train_idx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_92": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['input_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_99": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_106": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['input_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['input_dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m1.forward_aux(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.opt['dropout'], training=self.training)",
                            "Call"
                        ],
                        [
                            "self.m2.forward_aux(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.opt['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "semisupervised/codes/layer.py": {
        "torch": {
            "Parameter_34": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.in_size, self.out_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_42": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_47": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_17": {
                "input": {
                    "value": "self.sparse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "dense",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_22": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sparse.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "semisupervised/codes/loader.py": {
        "torch": {
            "Tensor_167": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "semisupervised/codes/losses.py": {
        "torch": {
            "softmax_24": {
                "variable": {
                    "value": "input_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_25": {
                "variable": {
                    "value": "target_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_39": {
                "variable": {
                    "value": "input_log_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_40": {
                "variable": {
                    "value": "target_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_41": {
                "input": {
                    "value": "input_log_softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(input_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(target_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_27": {
                "input": {
                    "value": "input_softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(input_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(target_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(target_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_54": {
                "input": {
                    "value": "(input1 - input2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "semisupervised/codes/train.py": {
        "torch": {
            "Tensor_101": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "inputs_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt['num_node']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "opt['num_feature']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "target_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt['num_node']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "opt['num_class']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "inputs_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt['num_node']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "opt['num_class']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "target_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt['num_node']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "opt['num_class']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_56": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "idx_train.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "target_q.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_164": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.pow(prob, temp_reciprocal)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "temp_reciprocal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / temperature",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_143": {
                "input": {
                    "value": "target[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[k, target_q.shape[0], target_q.shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "target_q.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_196": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "idx_unlabeled.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(idx_train.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "semisupervised/codes/trainer.py": {
        "torch": {
            "BCELoss_11": {
                "variable": {
                    "value": "bce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_12": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_13": {
                "variable": {
                    "value": "class_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_42": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_78": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs, target=None, train_idx=idx, mixup_input=False, mixup_hidden=False, mixup_alpha=0.0, layer_mix=None)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs, target=None, train_idx=idx_unlabeled, mixup_input=False, mixup_hidden=False, mixup_alpha=0.0, layer_mix=None)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_149": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs, target=None, train_idx=idx, mixup_input=False, mixup_hidden=False, mixup_alpha=0.0, layer_mix=None)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs, target=None, train_idx=idx_unlabeled, mixup_input=False, mixup_hidden=False, mixup_alpha=0.0, layer_mix=None)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_162": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs, target=None, train_idx=idx, mixup_input=False, mixup_hidden=False, mixup_alpha=0.0, layer_mix=None)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs, target=None, train_idx=idx_unlabeled, mixup_input=False, mixup_hidden=False, mixup_alpha=0.0, layer_mix=None)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_174": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs, target=None, train_idx=idx, mixup_input=False, mixup_hidden=False, mixup_alpha=0.0, layer_mix=None)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs, target=None, train_idx=idx_unlabeled, mixup_input=False, mixup_hidden=False, mixup_alpha=0.0, layer_mix=None)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_187": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs, target=None, train_idx=idx, mixup_input=False, mixup_hidden=False, mixup_alpha=0.0, layer_mix=None)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs, target=None, train_idx=idx_unlabeled, mixup_input=False, mixup_hidden=False, mixup_alpha=0.0, layer_mix=None)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SGD_19": {
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_114": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs, target=None, train_idx=idx, mixup_input=False, mixup_hidden=False, mixup_alpha=0.0, layer_mix=None)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs, target=None, train_idx=idx_unlabeled, mixup_input=False, mixup_hidden=False, mixup_alpha=0.0, layer_mix=None)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_119": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs, target=None, train_idx=idx, mixup_input=False, mixup_hidden=False, mixup_alpha=0.0, layer_mix=None)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs, target=None, train_idx=idx_unlabeled, mixup_input=False, mixup_hidden=False, mixup_alpha=0.0, layer_mix=None)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "self.model.forward_aux(inputs) / tau",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, dim=-1).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_204": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RMSprop_21": {
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_80": {
                "input": {
                    "value": "torch.sum(target[idx] * logits[idx], dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_135": {
                "input": {
                    "value": "logits[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'model': self.model.state_dict(), 'optim': self.optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adagrad_23": {
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_80": {
                "input": {
                    "value": "target[idx] * logits[idx]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_115": {
                "input": {
                    "value": "torch.sum(target[idx] * logits[idx], dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_120": {
                "input": {
                    "value": "torch.sum(target[idx_unlabeled] * logits[idx_unlabeled], dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_25": {
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_115": {
                "input": {
                    "value": "target[idx] * logits[idx]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "target[idx_unlabeled] * logits[idx_unlabeled]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adamax_27": {
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}