{
    "Pointnet2.PyTorch/pointnet2/pointnet2_modules.py": {
        "torch": {
            "ModuleList_84": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_147": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_feats, unknow_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_48": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features.contiguous())",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_52": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features.contiguous())",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Pointnet2.PyTorch/pointnet2/pointnet2_utils.py": {
        "torch": {
            "sqrt_98": {
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(B, N, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_259": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_329": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Pointnet2.PyTorch/pointnet2/pytorch_utils.py": {
        "torch": {
            "Linear_215": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "not bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_173": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_207": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Pointnet2.PyTorch/pointnet2/setup.py": {
        "torch": {}
    },
    "Pointnet2.PyTorch/tools/dataset.py": {
        "torch": {}
    },
    "Pointnet2.PyTorch/tools/pointnet2_msg.py": {
        "torch": {
            "ModuleList_32": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_56": {
                "variable": {
                    "value": "self.FP_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self.cls_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cls_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_70": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "Pointnet2.PyTorch/tools/train_and_eval.py": {
        "torch": {
            "Adam_159": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_168": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lbmd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lbmd",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_187": {
                "variable": {
                    "value": "eval_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KittiDataset(root_dir='./data', mode='EVAL', split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "eval_set.collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "pts_input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pts_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['pts_input']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(pts_input).cuda(non_blocking=True).float()",
                            "Call"
                        ],
                        [
                            "batch['pts_input']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(pts_input).cuda(non_blocking=True).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "cls_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cls_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['cls_labels']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(cls_labels).cuda(non_blocking=True).long().view(-1)",
                            "Call"
                        ],
                        [
                            "batch['cls_labels']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(cls_labels).cuda(non_blocking=True).long().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_109": {
                "variable": {
                    "value": "pts_input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pts_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['pts_input']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(pts_input).cuda(non_blocking=True).float()",
                            "Call"
                        ],
                        [
                            "batch['pts_input']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(pts_input).cuda(non_blocking=True).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "cls_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cls_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['cls_labels']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(cls_labels).cuda(non_blocking=True).long().view(-1)",
                            "Call"
                        ],
                        [
                            "batch['cls_labels']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(cls_labels).cuda(non_blocking=True).long().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_141": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model_state': model_state}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}.pth'.format(ckpt_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(ckpt_dir, 'checkpoint_epoch_%d' % epoch)",
                            "Call"
                        ],
                        [
                            "ckpt_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_147": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KittiDataset(root_dir='./data', mode='TRAIN', split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_set.collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__79": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_84": {
                "input": {
                    "value": "pred_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(pts_input)",
                            "Call"
                        ],
                        [
                            "pred_cls.view(-1)",
                            "Call"
                        ],
                        [
                            "model(pts_input)",
                            "Call"
                        ],
                        [
                            "pred_cls.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_88": {
                "input": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fg_mask.sum().float() + (pred_class > 0).sum().float() - correct",
                            "BinOp"
                        ],
                        [
                            "fg_mask.sum().float() + (pred_class > 0).sum().float() - correct",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_115": {
                "input": {
                    "value": "pred_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(pts_input)",
                            "Call"
                        ],
                        [
                            "pred_cls.view(-1)",
                            "Call"
                        ],
                        [
                            "model(pts_input)",
                            "Call"
                        ],
                        [
                            "pred_cls.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_119": {
                "input": {
                    "value": "union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fg_mask.sum().float() + (pred_class > 0).sum().float() - correct",
                            "BinOp"
                        ],
                        [
                            "fg_mask.sum().float() + (pred_class > 0).sum().float() - correct",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_59": {
                "input": {
                    "value": "(torch.max(input, target) * mask).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_59": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(input.view(-1))",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_59": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(input.view(-1))",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gicn_model.py": {
        "torch": {
            "Linear_51": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_55": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_56": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_57": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "all_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(global_features, point_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "leaky_relu_66": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(all_feature)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_67": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(b1)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_70": {
                "variable": {
                    "value": "b3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(b2)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_81": {
                "variable": {
                    "value": "self.conv_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_82": {
                "variable": {
                    "value": "self.bn_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_83": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "768 + 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_84": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_85": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_86": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_87": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_88": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_89": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "new_points_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_points_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "new_points_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_points_concat, global_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_143": {
                "variable": {
                    "value": "new_points_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(new_points_concat)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_145": {
                "variable": {
                    "value": "new_points_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(new_points_concat)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_147": {
                "variable": {
                    "value": "new_points_concat_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_148": {
                "variable": {
                    "value": "new_points_concat_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "new_points_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_points_concat_1, new_points_concat_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, p_f_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 134)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_165": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_166": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_167": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_168": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_173": {
                "variable": {
                    "value": "global_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(global_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_173": {
                "variable": {
                    "value": "global_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_174": {
                "variable": {
                    "value": "point_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(point_features.unsqueeze(-1).permute(0, 3, 1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "point_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(point_features, global_features.permute(0, 3, 1, 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_176": {
                "variable": {
                    "value": "point_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(point_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_177": {
                "variable": {
                    "value": "point_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(point_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "pmask0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pmask0, bbox_info)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "leaky_relu_185": {
                "variable": {
                    "value": "pmask1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(pmask0.permute(0, 3, 1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_186": {
                "variable": {
                    "value": "pmask2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5(pmask1)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_270": {
                "variable": {
                    "value": "self.conv_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_271": {
                "variable": {
                    "value": "self.bn_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_272": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_273": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_274": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_275": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_276": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "new_radius_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_radius_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_327": {
                "variable": {
                    "value": "new_radius_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(new_radius_concat)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_329": {
                "variable": {
                    "value": "new_radius_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(new_radius_concat)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_92": {
                "variable": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "bns",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "select_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select_idx",
                            "Method Argument"
                        ],
                        [
                            "select_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_116": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_279": {
                "variable": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_280": {
                "variable": {
                    "value": "bns",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_303": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "select_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select_idx",
                            "Method Argument"
                        ],
                        [
                            "select_idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_303": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_314": {
                "variable": {
                    "value": "new_radius",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[select_idx.shape[0], select_idx.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_38": {
                "tensors": {
                    "value": "(xyz.transpose(1, 2), points)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_134": {
                "variable": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(grouped_points))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_321": {
                "variable": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn(conv(grouped_points))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_135": {
                "input": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_and_group(radius_size, xyz.contiguous(), new_xyz.permute(0, 2, 1).contiguous(), points.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(bn(conv(grouped_points)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "query_and_group(xyz.contiguous(), new_xyz.permute(0, 2, 1).contiguous(), points.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(bn(conv(grouped_points)), negative_slope=0.2)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_209": {
                "input": {
                    "value": "inputs + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_210": {
                "input": {
                    "value": "1.0 - inputs + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_230": {
                "input": {
                    "value": "inputs + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_231": {
                "input": {
                    "value": "1.0 - inputs + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_234": {
                "input": {
                    "value": "F_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(targets >= 0.4).float() * self.alpha * (1.0 - inputs) ** self.gamma * torch.log(inputs + 1e-08) - (1.0 - (targets >= 0.4).float()) * (1.0 - self.alpha) * inputs ** self.gamma * torch.log(1.0 - inputs + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "-targets * self.alpha * (1.0 - inputs) ** self.gamma * torch.log(inputs + 1e-08) - (1.0 - targets) * (1.0 - self.alpha) * inputs ** self.gamma * torch.log(1.0 - inputs + 1e-08)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_322": {
                "input": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_and_group(radius_size, xyz.contiguous(), new_xyz.permute(0, 2, 1).contiguous(), points.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(bn(conv(grouped_points)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "query_and_group(xyz.contiguous(), new_xyz.permute(0, 2, 1).contiguous(), points.permute(0, 2, 1).contiguous())",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(bn(conv(grouped_points)), negative_slope=0.2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel + 6",
                            "BinOp"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel + 6",
                            "BinOp"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_list[i]",
                            "Subscript"
                        ],
                        [
                            "mlp_list[i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_list[i]",
                            "Subscript"
                        ],
                        [
                            "mlp_list[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_147": {
                "input": {
                    "value": "new_points_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(new_points_list, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((new_points_concat, global_features), dim=1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv1(new_points_concat), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv2(new_points_concat), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv3(new_points_concat).transpose(1, 2).view(-1, num_point, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat((new_points_concat_1, new_points_concat_2), dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_148": {
                "input": {
                    "value": "new_points_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(new_points_list, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((new_points_concat, global_features), dim=1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv1(new_points_concat), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv2(new_points_concat), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.conv3(new_points_concat).transpose(1, 2).view(-1, num_point, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat((new_points_concat_1, new_points_concat_2), dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_283": {
                "in_channels": {
                    "value": "last_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel + 6",
                            "BinOp"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel + 6",
                            "BinOp"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_list[i]",
                            "Subscript"
                        ],
                        [
                            "mlp_list[i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_284": {
                "num_features": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp_list[i]",
                            "Subscript"
                        ],
                        [
                            "mlp_list[i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "main_eval.py": {
        "torch": {
            "Tensor_18": {
                "variable": {
                    "value": "batch_sem",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "instance_size",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(6, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "instance_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "instance_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(instance_sizes)",
                            "Call"
                        ],
                        [
                            "torch.tensor(instance_sizes)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_158": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backbone_pointnet2().cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=[0, 1])",
                            "Call"
                        ],
                        [
                            "model.eval()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_163": {
                "variable": {
                    "value": "multi_Encoding_net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "multi_Encoding_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Multi_Encoding_net([512, 256, 256], 3, [[64, 128, 256], [64, 128, 256], [64, 128, 256]]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(multi_Encoding_net, device_ids=[0, 1])",
                            "Call"
                        ],
                        [
                            "multi_Encoding_net.eval()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_168": {
                "variable": {
                    "value": "pmask_net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "pmask_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pmask_net(num_feature).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(pmask_net, device_ids=[0, 1])",
                            "Call"
                        ],
                        [
                            "pmask_net.eval()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_173": {
                "variable": {
                    "value": "box_center_net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "box_center_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_center_net().cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(box_center_net, device_ids=[0, 1])",
                            "Call"
                        ],
                        [
                            "box_center_net.eval()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_178": {
                "variable": {
                    "value": "size_predict_net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "size_predict_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Size_predict_net([0.25, 0.58, 0.82], [256, 256, 512], 3, [[64, 128, 256], [64, 128, 256], [64, 128, 256]]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(size_predict_net, device_ids=[0, 1])",
                            "Call"
                        ],
                        [
                            "size_predict_net.eval()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_26": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_center[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_159": {
                "f": {
                    "value": "os.path.join(MODEL_PATH, 'model_%s.pth' % epoch_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_164": {
                "f": {
                    "value": "os.path.join(MODEL_PATH, 'multi_Encoding_net_model_%s.pth' % epoch_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_169": {
                "f": {
                    "value": "os.path.join(MODEL_PATH, 'pmask_net_model_%s.pth' % epoch_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_174": {
                "f": {
                    "value": "os.path.join(MODEL_PATH, 'box_center_net_%s.pth' % epoch_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_179": {
                "f": {
                    "value": "os.path.join(MODEL_PATH, 'size_net_%s.pth' % epoch_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "variable": {
                    "value": "bat_pc",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bat_pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_pc[i]",
                            "Subscript"
                        ],
                        [
                            "data.load_test_next_batch_sq(bat_files=t_files)",
                            "Call"
                        ],
                        [
                            "torch.tensor(bat_pc)",
                            "Call"
                        ],
                        [
                            "bat_pc.cuda()",
                            "Call"
                        ],
                        [
                            "bat_pc.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_245": {
                "variable": {
                    "value": "radius_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(radius ** 2, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_245": {
                "variable": {
                    "value": "radius_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_247": {
                "variable": {
                    "value": "pre_box_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_Encoding_net(bat_pc[:, :, :3], bat_pc[:, :, 3:9], global_features, sidx, 0, radius_size * 1.5)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "pre_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pre_box_center, pre_box_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_236": {
                "variable": {
                    "value": "predict_instance_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_33": {
                "input": {
                    "value": "(bat_pc[idx, 0:3] - bat_pc[:, 0:3]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_243": {
                "input": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size_predict_net(bat_pc[:, :, :3], bat_pc[:, :, 3:9], global_features, sidx, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_245": {
                "input": {
                    "value": "radius ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_236": {
                "input": {
                    "value": "bbox_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_center_net(global_features, point_features).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "bbox_center",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "abs_78": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_point)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_118": {
                "variable": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, num_point)).cuda()",
                            "Call"
                        ],
                        [
                            "torch.clamp(gt_mask, min=0.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "gt_instance_size",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "instance_size",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(6, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "instance_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "instance_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0.48698184, 0.25347686, 0.42515151], [0.26272924, 0.25347686, 0.42515151], [0.26272924, 0.48322966, 0.42515151], [0.07527845, 0.25347686, 0.42515151], [0.26272924, 0.06318584, 0.42515151], [0.48698184, 0.06318584, 0.13261693]]",
                            "List"
                        ],
                        [
                            "np.array(instance_sizes)",
                            "Call"
                        ],
                        [
                            "torch.tensor(instance_sizes)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_182": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Data(dataset_path, train_areas, test_areas, train_batch_size=8)",
                            "Call"
                        ],
                        [
                            "data in enumerate(train_dataloader)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FLAGS.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_190": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backbone_pointnet2().cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_193": {
                "variable": {
                    "value": "multi_Encoding_net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "multi_Encoding_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Multi_Encoding_net([512, 256, 256], 3, [[64, 128, 256], [64, 128, 256], [64, 128, 256]]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(multi_Encoding_net, device_ids=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_196": {
                "variable": {
                    "value": "pmask_net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "pmask_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pmask_net(num_feature).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(pmask_net, device_ids=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_199": {
                "variable": {
                    "value": "box_center_net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "box_center_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_center_net().cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(box_center_net, device_ids=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_205": {
                "variable": {
                    "value": "size_predict_net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "size_predict_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Size_predict_net([0.25, 0.58, 0.82], [256, 256, 512], 3, [[64, 128, 256], [64, 128, 256], [64, 128, 256]]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(size_predict_net, device_ids=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_216": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optim_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': model.parameters(), 'lr': FLAGS.learning_rate, 'betas': (0.9, 0.999), 'eps': 1e-08}, {'params': box_center_net.parameters(), 'lr': FLAGS.learning_rate, 'betas': (0.9, 0.999), 'eps': 1e-08}, {'params': multi_Encoding_net.parameters(), 'lr': FLAGS.learning_rate, 'betas': (0.9, 0.999), 'eps': 1e-08}, {'params': pmask_net.parameters(), 'lr': FLAGS.learning_rate, 'betas': (0.9, 0.999), 'eps': 1e-08}, {'params': size_predict_net.parameters(), 'lr': FLAGS.learning_rate, 'betas': (0.9, 0.999), 'eps': 1e-08}]",
                            "List"
                        ]
                    ]
                }
            },
            "unique_92": {
                "variable": {
                    "value": "pc_group_unique",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_group[i]",
                            "Subscript"
                        ],
                        [
                            "batch_group[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unique_139": {
                "variable": {
                    "value": "pc_group_unique",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_group[i]",
                            "Subscript"
                        ],
                        [
                            "batch_group[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_103": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(pc_instance[:, 0:3] - center) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_106": {
                "variable": {
                    "value": "new_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(pc_instance[:, 0:3] - new_center) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_108": {
                "variable": {
                    "value": "final_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-(new_dist / (2 * sd))) / (torch.sqrt(sd) * np.sqrt(2 * math.pi))",
                            "BinOp"
                        ],
                        [
                            "final_value",
                            "variable"
                        ],
                        [
                            "(final_value - final_min) / (final_max - final_min)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_109": {
                "variable": {
                    "value": "final_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-(new_dist / (2 * sd))) / (torch.sqrt(sd) * np.sqrt(2 * math.pi))",
                            "BinOp"
                        ],
                        [
                            "final_value",
                            "variable"
                        ],
                        [
                            "(final_value - final_min) / (final_max - final_min)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_147": {
                "variable": {
                    "value": "size_cal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(instance_size - i_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_148": {
                "variable": {
                    "value": "size_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "size_cal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.abs(instance_size - i_size), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_233": {
                "variable": {
                    "value": "ct_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ct_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_loss(bbox_center, gt_center)",
                            "Call"
                        ],
                        [
                            "torch.mean(ct_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_241": {
                "variable": {
                    "value": "gt_instance_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_gt_instance_idx[:, 0].unsqueeze(-1), gt_instance_idx.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "group_label_seed_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx[:, 0].unsqueeze(-1), group_label_seed.long().view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_251": {
                "variable": {
                    "value": "bbox_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bat_bbvert",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bat_bbvert.cuda()",
                            "Call"
                        ],
                        [
                            "bat_bbvert",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "bbox_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bbox_center, bbox_shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_260": {
                "variable": {
                    "value": "radius_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(radius ** 2, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_260": {
                "variable": {
                    "value": "radius_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_262": {
                "variable": {
                    "value": "pre_box_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multi_Encoding_net(bat_pc[:, :, :3], bat_pc[:, :, 3:9], global_features, sidx, 0, radius_size * 1.5)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "pre_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pre_box_center, pre_box_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_271": {
                "variable": {
                    "value": "RL",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_278": {
                "variable": {
                    "value": "vA",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_box[:, :, :3] - pre_box[:, :, 3:] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_279": {
                "variable": {
                    "value": "vB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_box[:, :, :3] + pre_box[:, :, 3:] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_280": {
                "variable": {
                    "value": "vA2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_box[:, :, :3] + pre_box[:, :, 3:] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_281": {
                "variable": {
                    "value": "vB2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_box[:, :, :3] - pre_box[:, :, 3:] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_282": {
                "variable": {
                    "value": "constant",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_283": {
                "variable": {
                    "value": "intersection_cube",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vB - vA",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_284": {
                "variable": {
                    "value": "include_box",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vA2 - vB2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_290": {
                "variable": {
                    "value": "ious_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ious_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - giou",
                            "BinOp"
                        ],
                        [
                            "torch.mean(ious_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_316": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s_%.3d.pth' % (save_model_dir, 'model', epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_317": {
                "obj": {
                    "value": "box_center_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s_%.3d.pth' % (save_model_dir, 'box_center_net', epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_318": {
                "obj": {
                    "value": "multi_Encoding_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s_%.3d.pth' % (save_model_dir, 'multi_Encoding_net_model', epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_319": {
                "obj": {
                    "value": "pmask_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s_%.3d.pth' % (save_model_dir, 'pmask_net_model', epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_320": {
                "obj": {
                    "value": "size_predict_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s_%.3d.pth' % (save_model_dir, 'size_net', epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_104": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum((pc_instance[:, 0:3] - center) ** 2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_107": {
                "input": {
                    "value": "-(new_dist / (2 * sd))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_147": {
                "input": {
                    "value": "instance_size - i_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_239": {
                "input": {
                    "value": "gt_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Get_instance_center(bat_pc, bat_ins, bat_bbvert)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "max_output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_268": {
                "input": {
                    "value": "box_bound_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "smooth_l1_loss(pc_ins_bound_gt, pre_bbox)",
                            "Call"
                        ],
                        [
                            "torch.mean(box_bound_loss) * 40",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_273": {
                "input": {
                    "value": "radius_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RL(size.transpose(1, 2), size_gt.long())",
                            "Call"
                        ],
                        [
                            "torch.mean(radius_loss) * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_107": {
                "input": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sd1 + pc_bbvert[count] * (sd2 - sd1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_102": {
                "input": {
                    "value": "pc_instance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pc[pc_group == ins, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_260": {
                "input": {
                    "value": "radius ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}