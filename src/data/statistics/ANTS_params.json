{
    "data_loader.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "main.py": {
        "sklearn": {
            "accuracy_score_162": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "truth + list(torch.max(labels.data, 1)[1].cpu().detach().numpy())",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "truth + list(labels.numpy())",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "predicted_label + list(predicted.cpu().detach().numpy())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "f1_score_163": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.array(truth)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.array(predicted_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_208": {
                "y_true": {
                    "value": "np.array(truth)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.array(prediction)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ExponentialLR_80": {
                "variable": {
                    "value": "my_lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=model.learning_rate)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model.parameters(), lr=model.learning_rate, momentum=momentum)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model.parameters(), lr=0.05, momentum=momentum)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.96",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_77": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "model.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "model.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.95",
                            "float"
                        ]
                    ]
                }
            },
            "save_176": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_{}_cycle_loss_{}_{}_new.ckpt'.format(epoch, model.loss, args.hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "x_1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_batched['view_1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "x_2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_batched['view_2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_batched['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_156": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_169": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.95",
                            "float"
                        ]
                    ]
                }
            },
            "no_grad_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "x_1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_batched['view_1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "x_2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_batched['view_2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_batched['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_198": {
                "variable": {
                    "value": "(_, predicted_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "variable": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array([list(labels[i]).index(1) for i in range(labels.shape[0])])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_174": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'model_{}_cycle_loss_{}_{}.ckpt'.format(epoch, model.loss, args.hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_166": {
                "input": {
                    "value": "torch.tensor(loss_mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_167": {
                "input": {
                    "value": "torch.tensor(diff_mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "data": {
                    "value": "loss_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_167": {
                "data": {
                    "value": "diff_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "max_158": {
                "input": {
                    "value": "labels.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pre-train_vgg.py": {
        "sklearn": {
            "accuracy_score_159": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "truth + list(torch.max(labels.data, 1)[1].cpu().detach().numpy())",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "truth + list(labels.numpy())",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "predicted_label + list(predicted.cpu().detach().numpy())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "f1_score_160": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.array(truth)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.array(predicted_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "StratifiedKFold_209": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "f1_score_187": {
                "y_true": {
                    "value": "np.array(truth)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.array(prediction)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_137": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "model.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.95",
                            "float"
                        ]
                    ]
                }
            },
            "ExponentialLR_138": {
                "variable": {
                    "value": "my_lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=model.learning_rate, momentum=momentum)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.96",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_238": {
                "variable": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.fcl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(25088, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.fcl2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_163": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "vgg16_fine_tune_model.ckpt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "x_1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_batched['view_1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_batched['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_151": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(sample_batched['label']).float().to(model.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(sample_batched['label']).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(labels)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "max_154": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_174": {
                "variable": {
                    "value": "x_1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_batched['view_1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_batched['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_177": {
                "variable": {
                    "value": "(_, predicted_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "variable": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array([list(labels[i]).index(1) for i in range(labels.shape[0])])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_200": {
                "variable": {
                    "value": "x_1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_batched['view_1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_batched['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "x_1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_batched['view_1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "25088",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_20": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_21": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_162": {
                "input": {
                    "value": "torch.tensor(loss_mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_205": {
                "input": {
                    "value": "label[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "data": {
                    "value": "loss_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "max_156": {
                "input": {
                    "value": "labels.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "synthetic_data.py": {
        "sklearn": {
            "make_classification_50": {
                "variable": {
                    "value": "(data, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "n_informative": {
                    "value": "250",
                    "type": "int",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "n_repeated": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "n_classes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_clusters_per_class": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "weights": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "flip_y": {
                    "value": "0.015",
                    "type": "float",
                    "possible_values": []
                },
                "class_sep": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "hypercube": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shift": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_14": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.non_linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_in_1, 500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.non_linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_in_2, 500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.classifier_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_in_1, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.classifier_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_in_2, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "dim_in_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_16": {
                "num_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_in_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_size",
                            "variable"
                        ]
                    ]
                }
            },
            "BatchNorm1d_17": {
                "num_features": {
                    "value": "dim_in_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_size",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "dim_in_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_19": {
                "num_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_in_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_size",
                            "variable"
                        ]
                    ]
                }
            },
            "BatchNorm1d_20": {
                "num_features": {
                    "value": "dim_in_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_size",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "dim_in_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_21": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_22": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "dim_in_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_24": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_25": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "synthetic_data_loader.py": {
        "sklearn": {
            "StratifiedKFold_242": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "k_fold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_269": {
                "variable": {
                    "value": "tfidf",
                    "type": "variable",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "tok_nop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda x: x",
                            "Lambda"
                        ]
                    ]
                },
                "strip_accents": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "set(nltk.corpus.stopwords.words('english'))",
                    "type": "Call",
                    "possible_values": []
                },
                "min_df": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "max_df": {
                    "value": "250",
                    "type": "int",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "module_GAN.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.generator_g_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hid_d_1, self.hid_d_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.soft_att_1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hid_d_1, dim_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.soft_att_1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_hidden, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.generator_g_1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hid_d_1, dim_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.generator_f_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_hidden, hidden_layer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.generator_g_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hid_d_2, self.hid_d_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.soft_att_2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hid_d_2, dim_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.soft_att_2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_hidden, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.generator_g_2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hid_d_2, dim_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.generator_f_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_hidden, hidden_layer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.attn_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hid_d_1, self.hid_d_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.hid_layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_in_1, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.hid_layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_in_2, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_hidden, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.classifier_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_hidden + compl_dim, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.classifier_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_hidden + compl_dim, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.discriminator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim_hidden, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_69": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.view_weight_raw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2, requires_grad=False, device=self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_99": {
                "variable": {
                    "value": "atten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(self.attn_map(z_1.transpose(1, 2)), z_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_102": {
                "variable": {
                    "value": "hv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a + torch.bmm(b, atten.transpose(1, 2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_103": {
                "variable": {
                    "value": "hv_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(a, atten) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_104": {
                "variable": {
                    "value": "sv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.soft_att_1_2(hv_1.transpose(1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_105": {
                "variable": {
                    "value": "sv_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.soft_att_2_2(hv_2.transpose(1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_106": {
                "variable": {
                    "value": "z_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generator_g_1(x_1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x_1.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(z_1, sv_1).reshape(-1, self.hid_d_1)",
                            "Call"
                        ],
                        [
                            "self.generator_g_1_2(z_1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sv_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.soft_att_1_2(hv_1.transpose(1, 2)), dim=1)",
                            "Call"
                        ],
                        [
                            "sv_1.reshape(-1, self.k_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "z_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.hid_d_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_107": {
                "variable": {
                    "value": "z_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generator_g_2(x_2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x_2.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(z_2, sv_2).reshape(-1, self.hid_d_2)",
                            "Call"
                        ],
                        [
                            "self.generator_g_2_2(z_2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sv_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.soft_att_2_2(hv_2.transpose(1, 2)), dim=1)",
                            "Call"
                        ],
                        [
                            "sv_2.reshape(-1, self.k_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "z_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.hid_d_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_143": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(z_1 - z_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "representation_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_1, r_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "representation_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_2, r_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_150": {
                "variable": {
                    "value": "cm_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.classifier(z_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_151": {
                "variable": {
                    "value": "pred_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.classifier_1(representation_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_152": {
                "variable": {
                    "value": "pred_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.classifier_2(representation_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_164": {
                "variable": {
                    "value": "loss_x_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(fake_x_1 - x_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_165": {
                "variable": {
                    "value": "loss_x_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(fake_x_2 - x_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_172": {
                "variable": {
                    "value": "loss_x_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(fake_x_1 - x_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_173": {
                "variable": {
                    "value": "loss_x_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(fake_x_2 - x_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_180": {
                "input": {
                    "value": "torch.abs(fake_x_1 - x_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_181": {
                "input": {
                    "value": "torch.abs(fake_x_2 - x_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_182": {
                "input": {
                    "value": "torch.abs(fake_x_1_z2 - x_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_183": {
                "input": {
                    "value": "torch.abs(fake_x_2_z1 - x_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_184": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(z_1 - z_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_191": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(z_1 - z_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "(in_ - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_printoptions_108": {
                "precision": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "sci_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "self.hid_d_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_d_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "self.hid_d_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "self.hid_d_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "num_features": {
                    "value": "hidden_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "hidden_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.dim_in_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "self.hid_d_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_d_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "self.hid_d_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "self.hid_d_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_43": {
                "num_features": {
                    "value": "hidden_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "hidden_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.dim_in_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "self.hid_d_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_d_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "compl_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(int(dim_hidden / 2), 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "compl_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(int(dim_hidden / 2), 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_54": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "dim_hidden + compl_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_56": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "dim_hidden + compl_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_58": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_60": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_80": {
                "input": {
                    "value": "x1.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_85": {
                "input": {
                    "value": "w1.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2.norm(p=2, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "x2.norm(p=2, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_85": {
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-15",
                            "Method Argument"
                        ],
                        [
                            "1e-15",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_99": {
                "input": {
                    "value": "self.attn_map(z_1.transpose(1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "z_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generator_g_2(x_2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x_2.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(z_2, sv_2).reshape(-1, self.hid_d_2)",
                            "Call"
                        ],
                        [
                            "self.generator_g_2_2(z_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_128": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(z_1 - z_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_143": {
                "input": {
                    "value": "z_1 - z_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_164": {
                "input": {
                    "value": "fake_x_1 - x_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_165": {
                "input": {
                    "value": "fake_x_2 - x_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_172": {
                "input": {
                    "value": "fake_x_1 - x_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_173": {
                "input": {
                    "value": "fake_x_2 - x_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_184": {
                "input": {
                    "value": "z_1 - z_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_191": {
                "input": {
                    "value": "z_1 - z_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_102": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.soft_att_2_1(z_2.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "atten.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_103": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.soft_att_1_1(z_1.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "atten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(torch.matmul(self.attn_map(z_1.transpose(1, 2)), z_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_116": {
                "*size": {
                    "value": "real_z.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "*size": {
                    "value": "real_z.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "*size": {
                    "value": "real_z.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_124": {
                "*size": {
                    "value": "fake_z.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_128": {
                "input": {
                    "value": "z_1 - z_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_155": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.view_weight[0] * pred_1 + self.view_weight[1] * pred_2",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_156": {
                "input": {
                    "value": "cm_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.classifier(z_s), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_180": {
                "input": {
                    "value": "fake_x_1 - x_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_181": {
                "input": {
                    "value": "fake_x_2 - x_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_182": {
                "input": {
                    "value": "fake_x_1_z2 - x_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_183": {
                "input": {
                    "value": "fake_x_2_z1 - x_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}