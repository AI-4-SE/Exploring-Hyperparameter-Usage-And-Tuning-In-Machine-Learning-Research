{
    "data/vg200/triplet_match.py": {
        "torch": {
            "Tensor_57": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_95": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_194": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vecDist(cap_vectors, ori_vectors)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "ori_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ori_vectors[:, :300], ori_vectors[:, 600:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "cap_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cap_vectors[:, :300], cap_vectors[:, 600:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/vg200/utils/tools.py": {
        "torch": {
            "sum_32": {
                "variable": {
                    "value": "v1sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_33": {
                "variable": {
                    "value": "v2sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(vec2 ** 2, 1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec1",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(vec2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_33": {
                "input": {
                    "value": "vec2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_34": {
                "input": {
                    "value": "vec2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec2",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/vg200/utils/word_embeddings.py": {
        "torch": {
            "Tensor_23": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_105": {
                "variable": {
                    "value": "wv_arr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_107": {
                "obj": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(wv_dict, wv_arr, wv_size)",
                            "Tuple"
                        ]
                    ]
                },
                "f": {
                    "value": "fname + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_51": {
                "f": {
                    "value": "fname_pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fname + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "dataloaders/mscoco.py": {
        "torch": {}
    },
    "dataloaders/visual_genome.py": {
        "torch": {}
    },
    "dataloaders/visual_genome200.py": {
        "torch": {}
    },
    "dataloaders/visual_genome200_keyrel.py": {
        "torch": {}
    },
    "dataloaders/visual_genome200_keyrel_captions.py": {
        "torch": {}
    },
    "dataloaders/vrd.py": {
        "torch": {}
    },
    "lib/caption_lstm/GCNLSTMModel.py": {
        "torch": {
            "cat_96": {
                "variable": {
                    "value": "region_feats_enlarged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "region_feats_enlarged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(region_feats_enlarged, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "categories_info",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(subj_categories, obj_categories, pred_classes_i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.ctx2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.h2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.att_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_140": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ctx2att(region_feats) + self.h2att(s_h_1).unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_145": {
                "variable": {
                    "value": "att_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.ctx2att(region_feats) + self.h2att(s_h_1).unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "self.att_net(attention).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.exp(attention - torch.max(attention, dim=1, keepdim=True)[0]) * mask",
                            "BinOp"
                        ],
                        [
                            "attention / torch.sum(attention, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "attention.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "region_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "region_feats.view(num_region, -1)",
                            "Call"
                        ],
                        [
                            "self.GCN(region_feats, pred_classes, rels)",
                            "Call"
                        ],
                        [
                            "_PadVisual(im_inds, region_feats, self.seq_per_img)",
                            "Call"
                        ],
                        [
                            "self.GCN(region_feats, pred_classes, rels)",
                            "Call"
                        ],
                        [
                            "_PadVisual(im_inds, region_feats, seq_per_img=1)",
                            "Call"
                        ],
                        [
                            "self.GCN(region_feats, pred_classes, rels)",
                            "Call"
                        ],
                        [
                            "_PadVisual(im_inds, region_feats, seq_per_img=1)",
                            "Call"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_145": {
                "variable": {
                    "value": "att_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_159": {
                "variable": {
                    "value": "self.W_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.Dconv, self.Dconv * 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_160": {
                "variable": {
                    "value": "self.b_lab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_predicate, self.Dconv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_161": {
                "variable": {
                    "value": "self.W_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.Dconv, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_162": {
                "variable": {
                    "value": "self.b_glab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_predicate, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_185": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_189": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_237": {
                "variable": {
                    "value": "neighbor_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "region_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "region_feats.view(num_region, -1)",
                            "Call"
                        ],
                        [
                            "self.GCN(region_feats, pred_classes, rels)",
                            "Call"
                        ],
                        [
                            "_PadVisual(im_inds, region_feats, self.seq_per_img)",
                            "Call"
                        ],
                        [
                            "self.GCN(region_feats, pred_classes, rels)",
                            "Call"
                        ],
                        [
                            "_PadVisual(im_inds, region_feats, seq_per_img=1)",
                            "Call"
                        ],
                        [
                            "self.GCN(region_feats, pred_classes, rels)",
                            "Call"
                        ],
                        [
                            "_PadVisual(im_inds, region_feats, seq_per_img=1)",
                            "Call"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_238": {
                "variable": {
                    "value": "gate_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "region_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "region_feats.view(num_region, -1)",
                            "Call"
                        ],
                        [
                            "self.GCN(region_feats, pred_classes, rels)",
                            "Call"
                        ],
                        [
                            "_PadVisual(im_inds, region_feats, self.seq_per_img)",
                            "Call"
                        ],
                        [
                            "self.GCN(region_feats, pred_classes, rels)",
                            "Call"
                        ],
                        [
                            "_PadVisual(im_inds, region_feats, seq_per_img=1)",
                            "Call"
                        ],
                        [
                            "self.GCN(region_feats, pred_classes, rels)",
                            "Call"
                        ],
                        [
                            "_PadVisual(im_inds, region_feats, seq_per_img=1)",
                            "Call"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ],
                        [
                            "region_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "upd_region_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "upd_region_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(upd_region_feats, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "mean_region_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mean_region_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mean_region_feats, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mean_region_feats, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mean_region_feats, 0)",
                            "Call"
                        ],
                        [
                            "mean_region_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_317": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_336": {
                "variable": {
                    "value": "mean_region_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mean_region_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mean_region_feats, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mean_region_feats, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mean_region_feats, 0)",
                            "Call"
                        ],
                        [
                            "mean_region_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_393": {
                "variable": {
                    "value": "mean_region_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mean_region_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mean_region_feats, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mean_region_feats, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mean_region_feats, 0)",
                            "Call"
                        ],
                        [
                            "mean_region_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_503": {
                "variable": {
                    "value": "beam_logprobs_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['beam_size']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "sort_index",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.argsort(np.array(freqs) * -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "pred_classes_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "[region_feats_i[None, :, :]] * seq_per_img",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "padded_region_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[region_feats_i[None, :, :]] * seq_per_img",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_247": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.index_select(gate_feats, 0, neighbor_ids * 3 + edge_type) + torch.index_select(self.b_glab, 0, predicate_ids)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_250": {
                "variable": {
                    "value": "upd_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate * (torch.index_select(neighbor_feats, 0, neighbor_ids * 3 + edge_type) + torch.index_select(self.b_lab, 0, predicate_ids))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_253": {
                "variable": {
                    "value": "upd_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upd_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(gate * (torch.index_select(neighbor_feats, 0, neighbor_ids * 3 + edge_type) + torch.index_select(self.b_lab, 0, predicate_ids)), 0).view(1, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(upd_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_308": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_310": {
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_378": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_426": {
                "variable": {
                    "value": "beam_logprobs_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['beam_size']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_460": {
                "variable": {
                    "value": "(ys, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobsf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprobs.data.float()",
                            "Call"
                        ],
                        [
                            "logprobsf",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "sample_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.choice(np.arange(this_num_rel, dtype=np.int32), num_relation, replace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "region_feats.size(0)",
                            "Call"
                        ],
                        [
                            "region_feats.size(0)",
                            "Call"
                        ],
                        [
                            "region_feats.size(0)",
                            "Call"
                        ],
                        [
                            "region_feats.size(0)",
                            "Call"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "max_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_135": {
                "tensors": {
                    "value": "[input_h, xt, mean_region_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_135": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_142": {
                "input": {
                    "value": "attention - torch.max(attention, dim=1, keepdim=True)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_143": {
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.ctx2att(region_feats) + self.h2att(s_h_1).unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "self.att_net(attention).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.exp(attention - torch.max(attention, dim=1, keepdim=True)[0]) * mask",
                            "BinOp"
                        ],
                        [
                            "attention / torch.sum(attention, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "attention.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_146": {
                "tensors": {
                    "value": "[att_input, s_h_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_146": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "self.Dconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.Dconv * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "*size": {
                    "value": "num_predicate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.Dconv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "*size": {
                    "value": "self.Dconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "*size": {
                    "value": "num_predicate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "81",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_278": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_279": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_281": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_282": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_339": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_340": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_342": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_343": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_379": {
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in seqLogprobs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_434": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "seq_per_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_per_img",
                            "Method Argument"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "pad_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_region_num - num_region",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "region_feats.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_220": {
                "ndarray": {
                    "value": "np.array(neighbour_table[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_274": {
                "input": {
                    "value": "region_feats[b, :num_region[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_297": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_335": {
                "input": {
                    "value": "region_feats[b, :num_region[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_353": {
                "variable": {
                    "value": "(sampleLogprobs, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_360": {
                "variable": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data).cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature)).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_392": {
                "input": {
                    "value": "region_feats[b, :num_region[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_416": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_417": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_419": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_420": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_247": {
                "input": {
                    "value": "gate_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(region_feats, self.W_g).view(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "neighbor_ids * 3 + edge_type",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_248": {
                "input": {
                    "value": "self.b_glab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "predicate_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbor_info[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_357": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_359": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(logprobs.data, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_142": {
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.ctx2att(region_feats) + self.h2att(s_h_1).unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "self.att_net(attention).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.exp(attention - torch.max(attention, dim=1, keepdim=True)[0]) * mask",
                            "BinOp"
                        ],
                        [
                            "attention / torch.sum(attention, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "attention.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_278": {
                "*size": {
                    "value": "region_feats.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_279": {
                "*size": {
                    "value": "region_feats.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_281": {
                "*size": {
                    "value": "region_feats.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_282": {
                "*size": {
                    "value": "region_feats.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_298": {
                "input": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data).cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature)).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_298": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sample_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_mask.nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_339": {
                "*size": {
                    "value": "region_feats.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_340": {
                "*size": {
                    "value": "region_feats.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_342": {
                "*size": {
                    "value": "region_feats.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_343": {
                "*size": {
                    "value": "region_feats.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_416": {
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['beam_size']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_417": {
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['beam_size']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_419": {
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['beam_size']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_420": {
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['beam_size']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_251": {
                "input": {
                    "value": "self.b_lab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "predicate_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbor_info[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "div_359": {
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/caption_lstm/RelCaptionModel.py": {
        "torch": {
            "cat_61": {
                "variable": {
                    "value": "rel_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rel_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rel_feats, 0)",
                            "Call"
                        ],
                        [
                            "rel_feats + [rel_feats_i[None, :, :]]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rel_feats, 0)",
                            "Call"
                        ],
                        [
                            "_PadRelFeats(rel_im_inds, rel_feats_all, self.num_relation_per_img, self.seq_per_img, pred_classes, obj_classes, rels, self.freq_matrix)",
                            "Call"
                        ],
                        [
                            "torch.cat([rel_feats, subobj_embed_feats, predicate_embed_feats], 2)",
                            "Call"
                        ],
                        [
                            "_EvalPadRelFeats(rel_im_inds, rel_feats_all, self.num_relation_per_img, pred_classes, obj_classes, rels, self.freq_matrix)",
                            "Call"
                        ],
                        [
                            "torch.cat([rel_feats, subobj_embed_feats, predicate_embed_feats], 2)",
                            "Call"
                        ],
                        [
                            "_EvalPadRelFeats(rel_im_inds, rel_feats_all, self.num_relation_per_img, pred_classes, obj_classes, rels, self.freq_matrix)",
                            "Call"
                        ],
                        [
                            "torch.cat([rel_feats, subobj_embed_feats, predicate_embed_feats], 2)",
                            "Call"
                        ],
                        [
                            "rel_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "categories_info_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "categories_info_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(categories_info_all, 0)",
                            "Call"
                        ],
                        [
                            "categories_info_all + [categories_info[None, :, :]]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(categories_info_all, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "rel_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rel_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rel_feats, 0)",
                            "Call"
                        ],
                        [
                            "rel_feats + [rel_feats_i[None, :, :]]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rel_feats, 0)",
                            "Call"
                        ],
                        [
                            "_PadRelFeats(rel_im_inds, rel_feats_all, self.num_relation_per_img, self.seq_per_img, pred_classes, obj_classes, rels, self.freq_matrix)",
                            "Call"
                        ],
                        [
                            "torch.cat([rel_feats, subobj_embed_feats, predicate_embed_feats], 2)",
                            "Call"
                        ],
                        [
                            "_EvalPadRelFeats(rel_im_inds, rel_feats_all, self.num_relation_per_img, pred_classes, obj_classes, rels, self.freq_matrix)",
                            "Call"
                        ],
                        [
                            "torch.cat([rel_feats, subobj_embed_feats, predicate_embed_feats], 2)",
                            "Call"
                        ],
                        [
                            "_EvalPadRelFeats(rel_im_inds, rel_feats_all, self.num_relation_per_img, pred_classes, obj_classes, rels, self.freq_matrix)",
                            "Call"
                        ],
                        [
                            "torch.cat([rel_feats, subobj_embed_feats, predicate_embed_feats], 2)",
                            "Call"
                        ],
                        [
                            "rel_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "categories_info_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "categories_info_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(categories_info_all, 0)",
                            "Call"
                        ],
                        [
                            "categories_info_all + [categories_info[None, :, :]]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(categories_info_all, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "categories_info",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(subj_categories, obj_categories, pred_classes_i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "categories_info",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(subj_categories, obj_categories, pred_classes_i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.ctx2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rel_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_feat_size",
                            "Attribute"
                        ],
                        [
                            "self.fc_feat_size + 3 * self.triplet_embed_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.h2att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.att_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.att_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_144": {
                "variable": {
                    "value": "mean_rel_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rel_feats, 0)",
                            "Call"
                        ],
                        [
                            "rel_feats + [rel_feats_i[None, :, :]]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rel_feats, 0)",
                            "Call"
                        ],
                        [
                            "_PadRelFeats(rel_im_inds, rel_feats_all, self.num_relation_per_img, self.seq_per_img, pred_classes, obj_classes, rels, self.freq_matrix)",
                            "Call"
                        ],
                        [
                            "torch.cat([rel_feats, subobj_embed_feats, predicate_embed_feats], 2)",
                            "Call"
                        ],
                        [
                            "_EvalPadRelFeats(rel_im_inds, rel_feats_all, self.num_relation_per_img, pred_classes, obj_classes, rels, self.freq_matrix)",
                            "Call"
                        ],
                        [
                            "torch.cat([rel_feats, subobj_embed_feats, predicate_embed_feats], 2)",
                            "Call"
                        ],
                        [
                            "_EvalPadRelFeats(rel_im_inds, rel_feats_all, self.num_relation_per_img, pred_classes, obj_classes, rels, self.freq_matrix)",
                            "Call"
                        ],
                        [
                            "torch.cat([rel_feats, subobj_embed_feats, predicate_embed_feats], 2)",
                            "Call"
                        ],
                        [
                            "rel_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_149": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ctx2att(rel_feats) + self.h2att(s_h_1).unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_151": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.ctx2att(rel_feats) + self.h2att(s_h_1).unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "self.att_net(attention).squeeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_151": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_152": {
                "variable": {
                    "value": "att_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attention).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rel_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rel_feats, 0)",
                            "Call"
                        ],
                        [
                            "rel_feats + [rel_feats_i[None, :, :]]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rel_feats, 0)",
                            "Call"
                        ],
                        [
                            "_PadRelFeats(rel_im_inds, rel_feats_all, self.num_relation_per_img, self.seq_per_img, pred_classes, obj_classes, rels, self.freq_matrix)",
                            "Call"
                        ],
                        [
                            "torch.cat([rel_feats, subobj_embed_feats, predicate_embed_feats], 2)",
                            "Call"
                        ],
                        [
                            "_EvalPadRelFeats(rel_im_inds, rel_feats_all, self.num_relation_per_img, pred_classes, obj_classes, rels, self.freq_matrix)",
                            "Call"
                        ],
                        [
                            "torch.cat([rel_feats, subobj_embed_feats, predicate_embed_feats], 2)",
                            "Call"
                        ],
                        [
                            "_EvalPadRelFeats(rel_im_inds, rel_feats_all, self.num_relation_per_img, pred_classes, obj_classes, rels, self.freq_matrix)",
                            "Call"
                        ],
                        [
                            "torch.cat([rel_feats, subobj_embed_feats, predicate_embed_feats], 2)",
                            "Call"
                        ],
                        [
                            "rel_feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_152": {
                "variable": {
                    "value": "att_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_layers * self.rnn_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_187": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_encoding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_200": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop_prob_lm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_280": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_451": {
                "variable": {
                    "value": "beam_logprobs_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['beam_size']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "sort_index",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.argsort(np.array(freqs) * -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "sample_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.choice(np.arange(this_num_rel, dtype=np.int32), num_relation, replace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "sort_index",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.argsort(np.array(freqs) * -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "sample_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.choice(np.arange(this_num_rel, dtype=np.int32), num_relation, replace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_194": {
                "variable": {
                    "value": "self.object_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(object_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.triplet_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_196": {
                "variable": {
                    "value": "self.predicate_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(predicate_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.triplet_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "rel_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rel_feats, subobj_embed_feats, predicate_embed_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_271": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_273": {
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "rel_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rel_feats, subobj_embed_feats, predicate_embed_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_340": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_362": {
                "variable": {
                    "value": "rel_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rel_feats, subobj_embed_feats, predicate_embed_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_378": {
                "variable": {
                    "value": "beam_logprobs_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['beam_size']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_407": {
                "variable": {
                    "value": "(ys, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobsf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logprobs.data.float()",
                            "Call"
                        ],
                        [
                            "logprobsf",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_145": {
                "tensors": {
                    "value": "[xt, mean_rel_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_145": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_341": {
                "tensors": {
                    "value": "[_.unsqueeze(1) for _ in seqLogprobs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_385": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit(self.dropout(output))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_260": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_317": {
                "variable": {
                    "value": "(sampleLogprobs, it)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_324": {
                "variable": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data).cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature)).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_321": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_323": {
                "variable": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(logprobs.data, temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_261": {
                "input": {
                    "value": "prob_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(outputs[-1].data)",
                            "Call"
                        ],
                        [
                            "torch.exp(logprobs.data).cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(logprobs.data, temperature)).cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_261": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "sample_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_mask.nonzero().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_323": {
                "input": {
                    "value": "logprobs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/fpn/box_utils.py": {
        "torch": {
            "cat_21": {
                "variable": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(center_targets, size_targets)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_101": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, 2:].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_103": {
                "variable": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, :2].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_105": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_138": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_139": {
                "variable": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_140": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_198": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, None, :, 2:].expand(N, N, nc, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_201": {
                "variable": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, None, :, :2].expand(N, N, nc, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_204": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "(boxes[:, :2] + 0.5 * wh, wh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "(boxes[:, :2] - 0.5 * boxes[:, 2:], boxes[:, :2] + 0.5 * (boxes[:, 2:] - 2.0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_20": {
                "input": {
                    "value": "prior_centers[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_23": {
                "input": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas",
                            "Method Argument"
                        ],
                        [
                            "deltas",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((center_targets, size_targets), 1)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_46": {
                "input": {
                    "value": "deltas[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_48": {
                "tensors": {
                    "value": "(xys, whs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/fpn/co_nms/_ext/co_nms/__init__.py": {
        "torch": {}
    },
    "lib/fpn/co_nms/build.py": {
        "torch": {
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/fpn/co_nms/functions/co_nms.py": {
        "torch": {}
    },
    "lib/fpn/nms/_ext/nms/__init__.py": {
        "torch": {}
    },
    "lib/fpn/nms/build.py": {
        "torch": {
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/fpn/nms/functions/nms.py": {
        "torch": {
            "cat_29": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.IntTensor(scores.size(0))",
                            "Call"
                        ],
                        [
                            "keep[:num_out].long()",
                            "Call"
                        ],
                        [
                            "idx[keep.cuda(scores.get_device())]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_37": {
                "variable": {
                    "value": "(vs, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/fpn/proposal_assignments/proposal_assignments_det.py": {
        "torch": {
            "cat_29": {
                "variable": {
                    "value": "all_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rpn_rois[:, 1:], gt_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "ims_per_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rpn_rois[:, 0].long(), gt_img_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_33": {
                "variable": {
                    "value": "(im_sorted, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ims_per_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([rpn_rois[:, 0].long(), gt_img_inds], 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rois, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(bbox_targets, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "rois_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_sorted[t_start:t_end, None][keep_inds].float(), all_boxes[t_start:t_end][keep_inds])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/fpn/proposal_assignments/proposal_assignments_gtbox.py": {
        "torch": {
            "arange_39": {
                "variable": {
                    "value": "rels_to_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "fg_rels.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_85": {
                "variable": {
                    "value": "(_, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_labels[:, 0] * gt_boxes.size(0) ** 2 + rel_labels[:, 1] * gt_boxes.size(0) + rel_labels[:, 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "bg_rels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_inds[is_bgcand[:, 0]][:, None], is_bgcand, (is_bgcand[:, 0, None] < -10).long())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "rel_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fg_rels, bg_rels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "rels_to_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rels_to_gt, (-1 * torch.ones(num_bg).long()).cuda(rels_to_gt.get_device()))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_79": {
                "*size": {
                    "value": "num_bg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(is_bgcand.size(0) if is_bgcand.dim() > 0 else 0, int(RELS_PER_IMG * num_im) - num_fg)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/fpn/proposal_assignments/proposal_assignments_postnms.py": {
        "torch": {}
    },
    "lib/fpn/proposal_assignments/proposal_assignments_rel.py": {
        "torch": {}
    },
    "lib/fpn/proposal_assignments/rel_assignments.py": {
        "torch": {}
    },
    "lib/fpn/relation_proposal/rel_anchor_target.py": {
        "torch": {
            "cat_33": {
                "variable": {
                    "value": "gt_box_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_boxes[fg_rels[:, 1]], gt_boxes[fg_rels[:, 2]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_39": {
                "variable": {
                    "value": "all_pair_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_cand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_inds[:, None] == im_inds[None]",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_40": {
                "variable": {
                    "value": "all_box_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, 1:][all_pair_inds[:, 0]], rois[:, 1:][all_pair_inds[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "all_rel_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_rel_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_rel_inds, 0)",
                            "Call"
                        ],
                        [
                            "all_rel_inds[perm].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_98": {
                "variable": {
                    "value": "(_, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_rel_inds[:, 0] * rois.size(0) ** 2 + all_rel_inds[:, 1] * rois.size(0) + all_rel_inds[:, 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_57": {
                "variable": {
                    "value": "(max_overlaps, argmax_overlaps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "co_bbox_overlaps(all_box_pairs_i, gt_box_pairs_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_58": {
                "variable": {
                    "value": "(gt_max_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "co_bbox_overlaps(all_box_pairs_i, gt_box_pairs_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_64": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps.eq(gt_max_overlaps.view(1, -1).expand_as(overlaps))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_72": {
                "variable": {
                    "value": "sum_fg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "sum_bg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 0).int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_88": {
                "variable": {
                    "value": "keep_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "all_pair_inds_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_inds_i, all_pair_inds_i, labels.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_76": {
                "variable": {
                    "value": "fg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_83": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(bg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_53": {
                "input": {
                    "value": "fg_rels[:, 0] == i - 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(1, -1).expand_as(overlaps)), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_80": {
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/fpn/relation_proposal/rel_proposal.py": {
        "torch": {
            "nonzero_24": {
                "variable": {
                    "value": "rel_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_cand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im_inds[:, None] == im_inds[None]",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_68": {
                "variable": {
                    "value": "all_pair_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_pair_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_pair_inds, 0)",
                            "Call"
                        ],
                        [
                            "all_pair_inds[perm].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_70": {
                "variable": {
                    "value": "(_, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_pair_inds[:, 0] * rois.size(0) ** 2 + all_pair_inds[:, 1] * rois.size(0) + all_pair_inds[:, 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_44": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[start:start + num_pairs[i]]",
                            "Subscript"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "pair_inds_single",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_inds_i, pair_inds_single)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "(proposal_subject, proposal_object)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "all_pair_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_pair_scores, 0)[perm].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/fpn/relation_proposal/rel_proposal_target.py": {
        "torch": {
            "sort_171": {
                "variable": {
                    "value": "(_, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proposal_labels[:, 0] * rois.size(0) ** 2 + proposal_labels[:, 1] * rois.size(0) + proposal_labels[:, 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "gt_box_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_boxes[fg_rels[:, 1]], gt_boxes[fg_rels[:, 2]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "rel_proposal_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, 1:][rel_proposal_inds[:, 0]], rois[:, 1:][rel_proposal_inds[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "proposal_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "proposal_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(proposal_labels, 0)",
                            "Call"
                        ],
                        [
                            "proposal_labels[perm].contiguous()",
                            "Call"
                        ],
                        [
                            "bg_rel_labels",
                            "variable"
                        ],
                        [
                            "np.vstack((fg_rel_labels, bg_rel_labels))",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(proposal_labels).cuda(gt_rels.get_device())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "rels_to_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rels_to_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.ones(fg_proposal_inds.shape[0] + bg_proposal_inds.shape[0], dtype=np.int64) * -1",
                            "BinOp"
                        ],
                        [
                            "torch.cat(rels_to_gt, 0)",
                            "Call"
                        ],
                        [
                            "rels_to_gt[perm].contiguous()",
                            "Call"
                        ],
                        [
                            "np.hstack((rels_to_gt[fg_proposal_inds], rels_to_gt[bg_proposal_inds]))",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(rels_to_gt).cuda(gt_rels.get_device())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_108": {
                "variable": {
                    "value": "(max_overlaps, gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "co_bbox_overlaps(rel_proposal_pairs_i, gt_box_pairs_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_109": {
                "variable": {
                    "value": "fg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_overlaps >= 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_112": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(max_overlaps < 0.5) & (max_overlaps >= 0.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "keep_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fg_inds, bg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_126": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num)).long().cuda()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_this_image) * bg_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).long().cuda()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(RELS_BATCHSIZE) * fg_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).long().cuda()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(RELS_BATCHSIZE) * bg_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_129": {
                "variable": {
                    "value": "rels_to_gt_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rels_to_gt_i[fg_inds], rels_to_gt_i[bg_inds])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_103": {
                "input": {
                    "value": "fg_rels[:, 0] == i - 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num)).long().cuda()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_this_image) * bg_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).long().cuda()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(RELS_BATCHSIZE) * fg_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).long().cuda()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(RELS_BATCHSIZE) * bg_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_166": {
                "tensors": {
                    "value": "(rel_proposal_inds_i, labels_i[:, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num)).long().cuda()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_this_image) * bg_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).long().cuda()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(RELS_BATCHSIZE) * fg_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).long().cuda()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(RELS_BATCHSIZE) * bg_num)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).long().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_105": {
                "input": {
                    "value": "fg_rels[:, 0] == i - 1",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "lib/fpn/roi_align/_ext/roi_align/__init__.py": {
        "torch": {}
    },
    "lib/fpn/roi_align/build.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/fpn/roi_align/functions/roi_align.py": {
        "torch": {}
    },
    "lib/fpn/roi_align/modules/roi_align.py": {
        "torch": {
            "avg_pool2d_29": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/get_union_boxes.py": {
        "torch": {
            "cat_84": {
                "variable": {
                    "value": "union_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_inds[:, None], torch.min(rois[:, 1:3][union_inds[:, 0]], rois[:, 1:3][union_inds[:, 1]]), torch.max(rois[:, 3:5][union_inds[:, 0]], rois[:, 3:5][union_inds[:, 1]]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "union_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_inds[:, None], torch.min(rois[:, 1:3][union_inds[:, 0]], rois[:, 1:3][union_inds[:, 1]]), torch.max(rois[:, 3:5][union_inds[:, 0]], rois[:, 3:5][union_inds[:, 1]]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2, dim // 2, kernel_size=7, stride=2, padding=3, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BATCHNORM_MOMENTUM",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_35": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "BATCHNORM_MOMENTUM",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "(union_pools, self.conv(rects))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_86": {
                "input": {
                    "value": "rois[:, 1:3][union_inds[:, 0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_87": {
                "input": {
                    "value": "rois[:, 3:5][union_inds[:, 0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_100": {
                "input": {
                    "value": "rois[:, 1:3][union_inds[:, 0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_101": {
                "input": {
                    "value": "rois[:, 3:5][union_inds[:, 0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "(rois[:, 1:][union_inds[:, 0]], rois[:, 1:][union_inds[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/lstm/RankingContext.py": {
        "torch": {
            "sort_37": {
                "variable": {
                    "value": "(_, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores - 2 * rois_per_image[im_inds]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_39": {
                "variable": {
                    "value": "(_, inv_perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(roi_order, 0, descending=True)",
                            "Call"
                        ],
                        [
                            "perm[inds]",
                            "Subscript"
                        ],
                        [
                            "self.sort_rois(pair_im_inds, None, union_boxes[:, 1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.pos_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.rel_pos_inp_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.rel_pos_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "rel_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rel_union_rep, self.pos_proj(pos_rep))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PackedSequence_116": {
                "variable": {
                    "value": "rel_input_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rel_inpunt_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_input[perm].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "ls_transposed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transpose_packed_sequence_inds(lengths)",
                            "Call"
                        ],
                        [
                            "self.sort_rois(pair_im_inds, None, union_boxes[:, 1:])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/lstm/attention_rnn.py": {
        "torch": {
            "sort_33": {
                "variable": {
                    "value": "(_, batch_inv_perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(np.argsort(np.array(lengths))[::-1].copy()).cuda(im_inds.get_device())",
                            "Call"
                        ],
                        [
                            "self.sort_rois(union_boxes[:, 0].long(), confidence, union_boxes[:, 1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_44": {
                "variable": {
                    "value": "(_, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores - 2 * rois_per_image[im_inds]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_46": {
                "variable": {
                    "value": "(_, inv_perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(roi_order, 0, descending=True)",
                            "Call"
                        ],
                        [
                            "perm[inds]",
                            "Subscript"
                        ],
                        [
                            "self.sort_rois(union_boxes[:, 0].long(), confidence, union_boxes[:, 1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.initial_state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "visual_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "visual_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.initial_cell_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "visual_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "visual_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.visual_attention_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "visual_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "visual_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.hidden_attention_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.att_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_unit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if self.use_CE else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sigmoid_201": {
                "variable": {
                    "value": "input_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 0 * self.hidden_size:1 * self.hidden_size] + projected_state[:, 0 * self.hidden_size:1 * self.hidden_size] + projected_atten[:, 0 * self.hidden_size:1 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_204": {
                "variable": {
                    "value": "forget_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 1 * self.hidden_size:2 * self.hidden_size] + projected_state[:, 1 * self.hidden_size:2 * self.hidden_size] + projected_atten[:, 1 * self.hidden_size:2 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_207": {
                "variable": {
                    "value": "memory_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 2 * self.hidden_size:3 * self.hidden_size] + projected_state[:, 2 * self.hidden_size:3 * self.hidden_size] + projected_atten[:, 2 * self.hidden_size:3 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_210": {
                "variable": {
                    "value": "output_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 3 * self.hidden_size:4 * self.hidden_size] + projected_state[:, 3 * self.hidden_size:4 * self.hidden_size] + projected_atten[:, 3 * self.hidden_size:4 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_238": {
                "variable": {
                    "value": "h_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.visual_attention_encode(visual_inputs.view(-1, self.visual_dim)).view(batch_size, N, -1) + self.hidden_attention_encode(hidden_state).unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_245": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_att.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "visual_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "visual_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_245": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "boxes_center",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((union_boxes[:, 4] + union_boxes[:, 2])[:, None] / 2, (union_boxes[:, 3] + union_boxes[:, 1])[:, None] / 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_329": {
                "variable": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(boxes_center - im_centers) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PackedSequence_334": {
                "variable": {
                    "value": "input_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sal_inp_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sal_inps[perm].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "ls_transposed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transpose_packed_sequence_inds(lengths)",
                            "Call"
                        ],
                        [
                            "self.sort_rois(union_boxes[:, 0].long(), confidence, union_boxes[:, 1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_104": {
                "tensors": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_input_projection_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.atten_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.visual_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_input_projection_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.atten_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.visual_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_217": {
                "variable": {
                    "value": "highway_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 4 * self.hidden_size:5 * self.hidden_size] + projected_state[:, 4 * self.hidden_size:5 * self.hidden_size] + projected_atten[:, 4 * self.hidden_size:5 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_242": {
                "variable": {
                    "value": "out_att[b, :ls]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "out_att[b, :ls].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_71": {
                "*size": {
                    "value": "tensor_for_masking.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_214": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_gate * memory_init + forget_gate * previous_memory",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_324": {
                "tensors": {
                    "value": "out_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_340": {
                "input": {
                    "value": "rel_visual_packed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pack_vectors(obj_boxes[:, 0].long(), visual_rep)",
                            "Call"
                        ],
                        [
                            "rel_visual_packed[batch_perm]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/lstm/decoder_rnn.py": {
        "torch": {
            "Embedding_57": {
                "variable": {
                    "value": "self.obj_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(self.classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_111": {
                "variable": {
                    "value": "input_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 0 * self.hidden_size:1 * self.hidden_size] + projected_state[:, 0 * self.hidden_size:1 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_113": {
                "variable": {
                    "value": "forget_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 1 * self.hidden_size:2 * self.hidden_size] + projected_state[:, 1 * self.hidden_size:2 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_115": {
                "variable": {
                    "value": "memory_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 2 * self.hidden_size:3 * self.hidden_size] + projected_state[:, 2 * self.hidden_size:3 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_117": {
                "variable": {
                    "value": "output_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 3 * self.hidden_size:4 * self.hidden_size] + projected_state[:, 3 * self.hidden_size:4 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_input_projection_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_input_projection_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "highway_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 4 * self.hidden_size:5 * self.hidden_size] + projected_state[:, 4 * self.hidden_size:5 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "timestep_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sequence_tensor[start_ind:end_ind], previous_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "out_commitments",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_commitments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "out_commitments[0].data.new(len(out_commitments)).fill_(0)",
                            "Call"
                        ],
                        [
                            "torch.cat(out_commitments, 0)",
                            "Call"
                        ],
                        [
                            "Variable(out_commitments)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_34": {
                "*size": {
                    "value": "tensor_for_masking.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_120": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_gate * memory_init + forget_gate * previous_memory",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_216": {
                "variable": {
                    "value": "out_dist_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(previous_state)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_251": {
                "tensors": {
                    "value": "out_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "input": {
                    "value": "torch.cat(out_dists, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_236": {
                "tensors": {
                    "value": "out_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/lstm/highway_lstm_cuda/_ext/highway_lstm_layer/__init__.py": {
        "torch": {}
    },
    "lib/lstm/highway_lstm_cuda/alternating_highway_lstm.py": {
        "torch": {
            "Parameter_229": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(total_weight_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_230": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(total_bias_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_276": {
                "variable": {
                    "value": "(inputs, lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.contiguous()",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(inputs, batch_first=False)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_302": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_accumulator[-1, 1:, :, :]",
                            "Subscript"
                        ],
                        [
                            "implementation(inputs, self.weight, self.bias, state_accumulator, memory_accumulator, dropout_weights, lengths_variable, gates)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(output, lengths, batch_first=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(inputs, batch_first=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "orthogonal_58": {
                "module": {
                    "value": "tensor_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.new(max(sizes), max(sizes))",
                            "Call"
                        ]
                    ]
                },
                "gain": {
                    "value": "gain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/lstm/highway_lstm_cuda/build.py": {
        "torch": {
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/lstm/plain_rnn.py": {
        "torch": {
            "sort_33": {
                "variable": {
                    "value": "(_, batch_inv_perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(np.argsort(np.array(lengths))[::-1].copy()).cuda(im_inds.get_device())",
                            "Call"
                        ],
                        [
                            "self.sort_rois(union_boxes[:, 0].long(), confidence, union_boxes[:, 1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_44": {
                "variable": {
                    "value": "(_, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores - 2 * rois_per_image[im_inds]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_46": {
                "variable": {
                    "value": "(_, inv_perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(roi_order, 0, descending=True)",
                            "Call"
                        ],
                        [
                            "perm[inds]",
                            "Subscript"
                        ],
                        [
                            "self.sort_rois(union_boxes[:, 0].long(), confidence, union_boxes[:, 1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_unit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if self.use_CE else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sigmoid_184": {
                "variable": {
                    "value": "input_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 0 * self.hidden_size:1 * self.hidden_size] + projected_state[:, 0 * self.hidden_size:1 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_186": {
                "variable": {
                    "value": "forget_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 1 * self.hidden_size:2 * self.hidden_size] + projected_state[:, 1 * self.hidden_size:2 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_188": {
                "variable": {
                    "value": "memory_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 2 * self.hidden_size:3 * self.hidden_size] + projected_state[:, 2 * self.hidden_size:3 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_190": {
                "variable": {
                    "value": "output_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 3 * self.hidden_size:4 * self.hidden_size] + projected_state[:, 3 * self.hidden_size:4 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "boxes_center",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((union_boxes[:, 4] + union_boxes[:, 2])[:, None] / 2, (union_boxes[:, 3] + union_boxes[:, 1])[:, None] / 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_282": {
                "variable": {
                    "value": "confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(boxes_center - im_centers) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PackedSequence_287": {
                "variable": {
                    "value": "input_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sal_inp_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sal_inps[perm].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "ls_transposed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transpose_packed_sequence_inds(lengths)",
                            "Call"
                        ],
                        [
                            "self.sort_rois(union_boxes[:, 0].long(), confidence, union_boxes[:, 1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_104": {
                "tensors": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_input_projection_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.input_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_input_projection_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.state_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_196": {
                "variable": {
                    "value": "highway_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected_input[:, 4 * self.hidden_size:5 * self.hidden_size] + projected_state[:, 4 * self.hidden_size:5 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_277": {
                "tensors": {
                    "value": "out_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_71": {
                "*size": {
                    "value": "tensor_for_masking.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_193": {
                "input": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_gate * memory_init + forget_gate * previous_memory",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/object_detector.py": {
        "torch": {
            "sort_482": {
                "variable": {
                    "value": "(vs, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores_pre[inds_all]",
                            "Subscript"
                        ],
                        [
                            "scores.data.view(-1)[inds_all * scores.data.size(1) + labels_all]",
                            "Subscript"
                        ],
                        [
                            "Variable(scores_all[idx], volatile=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_616": {
                "variable": {
                    "value": "img_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[val * torch.ones(i) for (val, i) in enumerate(im_per)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_618": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_inds[:, None], box_preds[inds])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.score_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.bbox_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_inds.float()[:, None], gt_boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_414": {
                "variable": {
                    "value": "nms_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, 1:][nms_inds][:, None], boxes[nms_inds][:, 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_510": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_dim, dim, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_580": {
                "variable": {
                    "value": "anchor_stacked",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.anchors[None]] * fmap.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.compress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 256, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.roi_fmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256 * 7 * 7, 2048)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "all_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_rois, Variable(rois))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_410": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.features.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.features.relu(x)",
                            "Call"
                        ],
                        [
                            "self.features.maxpool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_511": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU6_512": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_513": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.anchor_target_dim * self._A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "256 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SELU_97": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SELU_100": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_399": {
                "input": {
                    "value": "obj_dists[s:e]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_576": {
                "input": {
                    "value": "class_fmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fmap[:, :, :, :, :2].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_616": {
                "*size": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enumerate_by_image(inds.data)",
                            "Call"
                        ],
                        [
                            "i in enumerate(im_sizes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/pytorch_misc.py": {
        "torch": {
            "gather_59": {
                "variable": {
                    "value": "gt_ranks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ranking.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "labels.data[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_59": {
                "variable": {
                    "value": "gt_ranks",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_489": {
                "variable": {
                    "value": "keyrel_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keyrel_labels[:, 1] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_490": {
                "variable": {
                    "value": "nonkeyrel_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keyrel_labels[:, 1] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_497": {
                "variable": {
                    "value": "pos_neg_pair_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_neg_cand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(im_inds.shape[0], im_inds.shape[0]).fill_(0).cuda(rel_rank_scores.get_device())",
                            "Call"
                        ],
                        [
                            "pos_neg_cand & is_cand",
                            "BinOp"
                        ]
                    ]
                }
            },
            "margin_ranking_loss_499": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input1": {
                    "value": "torch.index_select(rel_rank_scores, 0, Variable(pos_neg_pair_inds[:, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "input2": {
                    "value": "torch.index_select(rel_rank_scores, 0, Variable(pos_neg_pair_inds[:, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "Variable(torch.FloatTensor(pos_neg_pair_inds.shape[0]).fill_(1).cuda(rel_rank_scores.get_device()))",
                    "type": "Call",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_107": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_tensor.size(0) if n is None else n",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "new_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_tensor.new(new_size).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_123": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "vec.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "arange_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec.new(vec.size(0)).long()",
                            "Call"
                        ],
                        [
                            "tensor.new(size).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(h5f[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_176": {
                "tensors": {
                    "value": "rez",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f(*args, **kwargs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_312": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "tensor.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "arange_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec.new(vec.size(0)).long()",
                            "Call"
                        ],
                        [
                            "tensor.new(size).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_340": {
                "tensors": {
                    "value": "[x[:, None] for x in unraveled[::-1]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_522": {
                "variable": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_556": {
                "variable": {
                    "value": "(this_area_maps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "this_area_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(num_boxes, h * scale, w * scale).cuda(im_inds.get_device()).fill_(2)",
                            "Call"
                        ],
                        [
                            "torch.min(this_area_maps, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_557": {
                "variable": {
                    "value": "no_value_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "this_area_maps == 2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_251": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_499": {
                "input": {
                    "value": "rel_rank_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_rank_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "Variable(pos_neg_pair_inds[:, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_500": {
                "input": {
                    "value": "rel_rank_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_rank_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "Variable(pos_neg_pair_inds[:, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_512": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_514": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/rel_model.py": {
        "torch": {
            "sort_75": {
                "variable": {
                    "value": "(_, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores - 2 * rois_per_image[im_inds]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_77": {
                "variable": {
                    "value": "(_, inv_perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(roi_order, 0, descending=True)",
                            "Call"
                        ],
                        [
                            "perm[inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Embedding_131": {
                "variable": {
                    "value": "self.obj_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_133": {
                "variable": {
                    "value": "self.virtual_node_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_135": {
                "variable": {
                    "value": "self.obj_embed2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.BatchNorm1d(4, momentum=BATCHNORM_MOMENTUM / 10.0), nn.Linear(4, 128), nn.ReLU(inplace=True)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "inp_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obj_embed2, obj_feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "pseudo_box_priors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(box_priors, image_rois[:, 1:].contiguous().data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "pseudo_im_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_inds, image_rois[:, 0].contiguous().long().view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "pseudo_obj_fmaps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obj_fmaps.clone().detach(), image_fmap.detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "pseudo_obj_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obj_embed, virtual_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "pseudo_obj_distributions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obj_distributions, Variable(torch.randn(batch_size, obj_distributions.shape[1]).fill_(0).cuda()))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "obj_pre_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pseudo_obj_fmaps, pseudo_obj_embed, pseudo_pos_embed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_506": {
                "variable": {
                    "value": "self.post_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_507": {
                "variable": {
                    "value": "self.post_cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_531": {
                "variable": {
                    "value": "self.rel_compress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_rels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_644": {
                "variable": {
                    "value": "sal_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "salmap_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.pooling_size, self.pooling_size, spatial_scale=1 / 16)(sal_maps, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.pooling_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_730": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_inds[:, None].float(), boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_903": {
                "variable": {
                    "value": "prod_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(subj_rep[rel_inds[:, 1]], obj_rep[rel_inds[:, 2]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_946": {
                "variable": {
                    "value": "rel_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result.rel_dists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_1011": {
                "variable": {
                    "value": "self.relpn_bilinear_sub",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(roi_feat_dim, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_1014": {
                "variable": {
                    "value": "self.relpn_bilinear_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(roi_feat_dim, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_1031": {
                "variable": {
                    "value": "x_bilinear",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relpn_bilinear_sub(roi_feat.detach())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x_obj.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_1032": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_bilinear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(x_sub, x_obj.permute(1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_167": {
                "variable": {
                    "value": "self.decoder_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.obj_dim + self.embed_dim + 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "pseudo_obj_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obj_labels, Variable(torch.randn(1).fill_(0).cuda()).expand(batch_size).long().view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_306": {
                "variable": {
                    "value": "obj_distributions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_logits[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_467": {
                "variable": {
                    "value": "self.rank_visual_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(512, 256), nn.ReLU(inplace=True), nn.Linear(256, 1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_489": {
                "variable": {
                    "value": "self.roi_fmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet_l4(relu_end=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_502": {
                "variable": {
                    "value": "self.roi_fmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*roi_fmap",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_519": {
                "variable": {
                    "value": "self.encode_spatial_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_520": {
                "variable": {
                    "value": "self.encode_spatial_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooling_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_528": {
                "variable": {
                    "value": "self.post_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.pooling_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_582": {
                "variable": {
                    "value": "rel_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_inds.data[rel_cands[:, 0]][:, None], rel_cands)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_627": {
                "variable": {
                    "value": "rel_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_inds.data[rel_cands[:, 0]][:, None], rel_cands)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_832": {
                "variable": {
                    "value": "pos_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[((obj_xywh[:, 0] - subj_xywh[:, 0]) / torch.sqrt(subj_xywh[:, 2] * subj_xywh[:, 3]))[:, None], ((obj_xywh[:, 1] - subj_xywh[:, 1]) / torch.sqrt(subj_xywh[:, 2] * subj_xywh[:, 3]))[:, None], torch.sqrt(obj_xywh[:, 2] * obj_xywh[:, 3] / (subj_xywh[:, 2] * subj_xywh[:, 3]))[:, None], (subj_xywh[:, 2] / subj_xywh[:, 3])[:, None], (obj_xywh[:, 2] / obj_xywh[:, 3])[:, None], bbox_overlaps_pair(subj_boxes, obj_boxes)[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_915": {
                "input": {
                    "value": "self.encode_spatial_1(encoded_boxes_pair)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_928": {
                "variable": {
                    "value": "prod_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prod_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((subj_rep[rel_inds[:, 1]], obj_rep[rel_inds[:, 2]]), 1)",
                            "Call"
                        ],
                        [
                            "self.post_cat(prod_rep)",
                            "Call"
                        ],
                        [
                            "prod_rep * spatial_rep",
                            "BinOp"
                        ],
                        [
                            "torch.cat((prod_rep[:, :2048] * vr[:, :2048], prod_rep[:, 2048:]), 1)",
                            "Call"
                        ],
                        [
                            "prod_rep * vr",
                            "BinOp"
                        ],
                        [
                            "F.tanh(prod_rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_286": {
                "input": {
                    "value": "obj_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(to_onehot(obj_labels.data, self.num_classes))",
                            "Call"
                        ],
                        [
                            "result.rm_obj_dists",
                            "Attribute"
                        ],
                        [
                            "obj_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_459": {
                "variable": {
                    "value": "self.relpn_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.relpn_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_675": {
                "ndarray": {
                    "value": "label[select_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_742": {
                "variable": {
                    "value": "prob_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(to_onehot(obj_labels.data, self.num_classes))",
                            "Call"
                        ],
                        [
                            "result.rm_obj_dists",
                            "Attribute"
                        ],
                        [
                            "obj_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_744": {
                "variable": {
                    "value": "roi_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(roi_feat, relpn_embed_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_751": {
                "variable": {
                    "value": "roi_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(roi_feat, pos_feat.detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_779": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_rois.shape[0]",
                            "Subscript"
                        ],
                        [
                            "result.fmap.shape[0]",
                            "Subscript"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_844": {
                "variable": {
                    "value": "result.rel_rank_dists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "result.rel_rank_scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_846": {
                "variable": {
                    "value": "result.rel_rank_dists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "result.rel_rank_scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_854": {
                "variable": {
                    "value": "result.keylabel_byfgbg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Variable(rel_inds[:, 0][:, None]), keylabel_byfgbg[:, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_923": {
                "variable": {
                    "value": "prod_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prod_rep[:, :2048] * vr[:, :2048], prod_rep[:, 2048:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_944": {
                "input": {
                    "value": "result.rm_obj_dists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1011": {
                "in_features": {
                    "value": "roi_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes + embed_dim + pos_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_1012": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1013": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1014": {
                "in_features": {
                    "value": "roi_feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes + embed_dim + pos_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_1015": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1016": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1044": {
                "variable": {
                    "value": "rel_anchor_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rel_anchor_inds, anchor_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "tensors": {
                    "value": "(obj_feats, encoder_rep)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_304": {
                "input": {
                    "value": "obj_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(to_onehot(obj_labels.data, self.num_classes))",
                            "Call"
                        ],
                        [
                            "result.rm_obj_dists",
                            "Attribute"
                        ],
                        [
                            "obj_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_312": {
                "tensors": {
                    "value": "(pseudo_im_inds[:, None].float().data, pseudo_box_priors)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_319": {
                "input": {
                    "value": "pseudo_obj_distributions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((obj_distributions, Variable(torch.randn(batch_size, obj_distributions.shape[1]).fill_(0).cuda())), 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_491": {
                "kernel_size": {
                    "value": "self.pooling_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_889": {
                "variable": {
                    "value": "result.keylabel_bykeyrel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Variable(rel_inds[:, 0][:, None]), keylabel_bykeyrel[:, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_140": {
                "num_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BATCHNORM_MOMENTUM / 10.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_308": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_rois.shape[0]",
                            "Subscript"
                        ],
                        [
                            "result.fmap.shape[0]",
                            "Subscript"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "obj_distributions.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_343": {
                "tensors": {
                    "value": "(pseudo_obj_fmaps, obj_ctx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_501": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "pooling_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_818": {
                "variable": {
                    "value": "sal_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sal_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sal_maps",
                            "variable"
                        ],
                        [
                            "get_area_maps(result.fmap.shape[2:], im_inds.data, boxes.data, scale=16)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(sal_masks, result.fmap.shape[2:])",
                            "Call"
                        ],
                        [
                            "sal_maps + area_maps",
                            "BinOp"
                        ]
                    ]
                },
                "output_size": {
                    "value": "result.fmap.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_821": {
                "variable": {
                    "value": "area_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "area_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_area_maps(result.fmap.shape[2:], im_inds.data, boxes.data, scale=16)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(area_maps, result.fmap.shape[2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "result.fmap.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_853": {
                "input": {
                    "value": "rels_to_gt >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "stack_935": {
                "tensors": {
                    "value": "(result.obj_preds[rel_inds[:, 1]], result.obj_preds[rel_inds[:, 2]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_467": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_467": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_834": {
                "input": {
                    "value": "obj_xywh[:, 2] * obj_xywh[:, 3] / (subj_xywh[:, 2] * subj_xywh[:, 3])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_882": {
                "input": {
                    "value": "rels_to_gt > -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sqrt_832": {
                "input": {
                    "value": "subj_xywh[:, 2] * subj_xywh[:, 3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_833": {
                "input": {
                    "value": "subj_xywh[:, 2] * subj_xywh[:, 3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_883": {
                "input": {
                    "value": "rels_to_gt > -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_886": {
                "input": {
                    "value": "result.rel_proposal_labels[:, 3] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_888": {
                "input": {
                    "value": "result.rel_labels[:, 3] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "randn_299": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/rel_model_stanford.py": {
        "torch": {
            "Linear_42": {
                "variable": {
                    "value": "self.rel_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_rels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.obj_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.obj_unary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.obj_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.edge_unary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                }
            },
            "GRUCell_49": {
                "variable": {
                    "value": "self.edge_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                }
            },
            "GRUCell_50": {
                "variable": {
                    "value": "self.node_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.sub_vert_w_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(SIZE * 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.obj_vert_w_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(SIZE * 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.out_edge_w_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(SIZE * 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.in_edge_w_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(SIZE * 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_70": {
                "variable": {
                    "value": "numer",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "rel_inds.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(im_inds[:, None].float(), boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_201": {
                "variable": {
                    "value": "rel_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result.rel_dists",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "SIZE * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "SIZE * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "SIZE * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "SIZE * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_155": {
                "input": {
                    "value": "self.edge_unary(visual_rep)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_177": {
                "variable": {
                    "value": "(idx, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_det(F.softmax(result.rm_obj_dists), result.boxes_all, start_ind=0, max_per_img=100, thresh=0.0, pre_nms_topn=6000, post_nms_topn=300, nms_thresh=0.3, nms_filter_duplicates=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "(sub_vert, edge_factor[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "tensors": {
                    "value": "(obj_vert, edge_factor[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "tensors": {
                    "value": "(sub_vert, edge_factor[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "(obj_vert, edge_factor[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "input": {
                    "value": "result.rm_obj_dists",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_183": {
                "input": {
                    "value": "result.rm_obj_dists",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/resnet.py": {
        "torch": {
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "BATCHNORM_MOMENTUM",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "BATCHNORM_MOMENTUM",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BATCHNORM_MOMENTUM",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BATCHNORM_MOMENTUM",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_58": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_63": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "BATCHNORM_MOMENTUM",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/sparse_targets.py": {
        "torch": {
            "Embedding_44": {
                "variable": {
                    "value": "self.obj_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "pred_dist.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "pred_dist.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/surgery.py": {
        "torch": {
            "sort_57": {
                "variable": {
                    "value": "(rel_scores_vs, rel_scores_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_scores_argmaxed.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "rels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_inds[rel_scores_idx].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rels, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rels, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_classes, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_classes, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "rels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_inds[rel_scores_idx].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rels, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rels, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "rel_feats_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rel_feats_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rel_feats_all, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_classes, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_classes, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_108": {
                "variable": {
                    "value": "(rel_scores_vs_i, rel_scores_idx_i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_scores_argmaxed_i.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_174": {
                "variable": {
                    "value": "(rel_scores_vs_i, rel_scores_idx_i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_scores_argmaxed_i.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/tree_lstm/decoder_hrtree_lstm.py": {
        "torch": {
            "Embedding_39": {
                "variable": {
                    "value": "self.obj_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(self.classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_91": {
                "variable": {
                    "value": "out_tree_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tree_lstm_io.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tree_lstm_io.order.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "out_commitments",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_commitments, Variable(torch.randn(batch_size).long().fill_(0).cuda()).view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_92": {
                "input": {
                    "value": "tree_lstm_io.dists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tree_lstm_io.order.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_93": {
                "input": {
                    "value": "tree_lstm_io.commitments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tree_lstm_io.order.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_147": {
                "*size": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_102": {
                "input": {
                    "value": "out_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(tree_lstm_io.dists, 0, tree_lstm_io.order.long())[:-batch_size]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_121": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/tree_lstm/decoder_tree_lstm.py": {
        "torch": {
            "Embedding_37": {
                "variable": {
                    "value": "self.obj_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(self.classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_73": {
                "variable": {
                    "value": "out_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_io.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "lstm_io.order.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "out_commitments",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_commitments, Variable(torch.randn(batch_size).long().fill_(0).cuda()).view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_74": {
                "input": {
                    "value": "lstm_io.dists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "lstm_io.order.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_75": {
                "input": {
                    "value": "lstm_io.commitments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "lstm_io.order.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_128": {
                "*size": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_84": {
                "input": {
                    "value": "out_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.index_select(lstm_io.dists, 0, lstm_io.order.long())[:-batch_size]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_102": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/tree_lstm/def_tree.py": {
        "torch": {}
    },
    "lib/tree_lstm/draw_tree.py": {
        "torch": {
            "clamp_23": {
                "variable": {
                    "value": "sample_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[tree.im_idx].view(image.shape[1:]).clone()",
                            "Call"
                        ],
                        [
                            "(revert_normalize(sample_image) * 255).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(sample_image, 0, 255)",
                            "Call"
                        ],
                        [
                            "sample_image.permute(1, 2, 0).contiguous().data.cpu().numpy().astype(dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(sample_image, 'RGB').convert('RGBA')",
                            "Call"
                        ],
                        [
                            "image[tree.im_idx].view(image.shape[1:]).clone()",
                            "Call"
                        ],
                        [
                            "(revert_normalize(sample_image) * 255).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(sample_image, 0, 255)",
                            "Call"
                        ],
                        [
                            "sample_image.permute(1, 2, 0).contiguous().data.cpu().numpy().astype(dtype=np.uint8)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_57": {
                "variable": {
                    "value": "sample_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[tree.im_idx].view(image.shape[1:]).clone()",
                            "Call"
                        ],
                        [
                            "(revert_normalize(sample_image) * 255).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(sample_image, 0, 255)",
                            "Call"
                        ],
                        [
                            "sample_image.permute(1, 2, 0).contiguous().data.cpu().numpy().astype(dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(sample_image, 'RGB').convert('RGBA')",
                            "Call"
                        ],
                        [
                            "image[tree.im_idx].view(image.shape[1:]).clone()",
                            "Call"
                        ],
                        [
                            "(revert_normalize(sample_image) * 255).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(sample_image, 0, 255)",
                            "Call"
                        ],
                        [
                            "sample_image.permute(1, 2, 0).contiguous().data.cpu().numpy().astype(dtype=np.uint8)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/tree_lstm/gen_hrtree.py": {
        "torch": {
            "nonzero_41": {
                "variable": {
                    "value": "picked_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_inds == group_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_37": {
                "input": {
                    "value": "im_inds == group_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "numel_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "current_node.sal_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sal_feats, area_feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "current_node.sal_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sal_feats, area_feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/tree_lstm/gen_tree.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.resize_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(output_size / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.resize_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(output_size / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.resize_box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.box_info_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(output_size / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.resize_overlap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.overlap_info_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(output_size / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "output_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(resized_obj, resized_embed, resized_box, resized_overlap)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_74": {
                "variable": {
                    "value": "picked_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_inds == group_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_120": {
                "variable": {
                    "value": "(_, inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "first_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_scores[remain_index].contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_120": {
                "variable": {
                    "value": "(_, inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_134": {
                "input": {
                    "value": "pair_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pair_scores",
                            "Method Argument"
                        ],
                        [
                            "pair_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "select_index_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(select_index).cuda())",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_70": {
                "input": {
                    "value": "im_inds == group_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "numel_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_137": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "select_score_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(torch.index_select(pair_scores, 0, select_index_var), 1, remain_index_var).contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_139": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(select_score_map, 0)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/tree_lstm/graph_to_tree.py": {
        "torch": {
            "nonzero_60": {
                "variable": {
                    "value": "picked_list",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im_inds == group_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_57": {
                "input": {
                    "value": "im_inds == group_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "numel_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/tree_lstm/hrtree_lstm.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.multi_layer_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_54": {
                "variable": {
                    "value": "final_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(child_foreward_output, child_backward_output, tree_foreward_output, tree_backward_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_93": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_io.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "lstm_io.order.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_131": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_io.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "lstm_io.order.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.ioffux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_split * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.ioffuh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_split * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_168": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ioffu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ioffux(feat_inp) + self.ioffuh(previous_state_h)",
                            "BinOp"
                        ],
                        [
                            "self.ioffux(feat_inp) + self.ioffuh(h_sum)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "ioffu.size(1) // self.num_split",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_177": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "torch.split(ioffu, ioffu.size(1) // 4, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "F.tanh(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_273": {
                "variable": {
                    "value": "self.ioffux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_forward_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feat_dim",
                            "Attribute"
                        ],
                        [
                            "self.feat_dim + self.p_embed_dim",
                            "BinOp"
                        ],
                        [
                            "self.feat_dim",
                            "Attribute"
                        ],
                        [
                            "self.feat_dim + self.p_embed_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_274": {
                "variable": {
                    "value": "self.ioffuh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_275": {
                "variable": {
                    "value": "self.px",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_forward_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feat_dim",
                            "Attribute"
                        ],
                        [
                            "self.feat_dim + self.p_embed_dim",
                            "BinOp"
                        ],
                        [
                            "self.feat_dim",
                            "Attribute"
                        ],
                        [
                            "self.feat_dim + self.p_embed_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_276": {
                "variable": {
                    "value": "self.forget_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_forward_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feat_dim",
                            "Attribute"
                        ],
                        [
                            "self.feat_dim + self.p_embed_dim",
                            "BinOp"
                        ],
                        [
                            "self.feat_dim",
                            "Attribute"
                        ],
                        [
                            "self.feat_dim + self.p_embed_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_277": {
                "variable": {
                    "value": "self.forget_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_301": {
                "variable": {
                    "value": "h_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(collection_h, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_303": {
                "variable": {
                    "value": "(i, o, u, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ioffu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ioffux(feat_inp) + self.ioffuh(previous_state_h)",
                            "BinOp"
                        ],
                        [
                            "self.ioffux(feat_inp) + self.ioffuh(h_sum)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "ioffu.size(1) // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_309": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "torch.split(ioffu, ioffu.size(1) // 4, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "F.tanh(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_395": {
                "variable": {
                    "value": "self.iofux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_forward_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feat_dim",
                            "Attribute"
                        ],
                        [
                            "self.feat_dim + self.p_embed_dim",
                            "BinOp"
                        ],
                        [
                            "self.feat_dim",
                            "Attribute"
                        ],
                        [
                            "self.feat_dim + self.p_embed_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "5 * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_396": {
                "variable": {
                    "value": "self.iofuh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_397": {
                "variable": {
                    "value": "self.px",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_forward_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feat_dim",
                            "Attribute"
                        ],
                        [
                            "self.feat_dim + self.p_embed_dim",
                            "BinOp"
                        ],
                        [
                            "self.feat_dim",
                            "Attribute"
                        ],
                        [
                            "self.feat_dim + self.p_embed_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_415": {
                "variable": {
                    "value": "(i, o, f, u, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "iofu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iofux(feat_inp) + self.iofuh(root_h)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "iofu.size(1) // 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_419": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "torch.split(ioffu, ioffu.size(1) // 4, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "F.tanh(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_491": {
                "variable": {
                    "value": "treelstm_io.dists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(treelstm_io.dists, pred_dist.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_496": {
                "variable": {
                    "value": "treelstm_io.commitments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(treelstm_io.commitments, label_to_embed.view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_185": {
                "variable": {
                    "value": "h_final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binary_mask.float().div(1.0 - dropout_probability)",
                            "Call"
                        ],
                        [
                            "get_dropout_mask(self.dropout, self.out_dim)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "get_dropout_mask(self.dropout, self.out_dim)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "dropout_mask",
                            "Method Argument"
                        ],
                        [
                            "dropout_mask",
                            "Method Argument"
                        ],
                        [
                            "dropout_mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.p_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.p_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.p_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_296": {
                "variable": {
                    "value": "self.sal_fmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.pooling_size * self.pooling_size + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_313": {
                "variable": {
                    "value": "h_final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binary_mask.float().div(1.0 - dropout_probability)",
                            "Call"
                        ],
                        [
                            "get_dropout_mask(self.dropout, self.out_dim)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "get_dropout_mask(self.dropout, self.out_dim)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "dropout_mask",
                            "Method Argument"
                        ],
                        [
                            "dropout_mask",
                            "Method Argument"
                        ],
                        [
                            "dropout_mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_351": {
                "variable": {
                    "value": "next_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features[tree.index].view(1, -1), embed.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "treelstm_io.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(treelstm_io.hidden, h.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_423": {
                "variable": {
                    "value": "h_final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binary_mask.float().div(1.0 - dropout_probability)",
                            "Call"
                        ],
                        [
                            "get_dropout_mask(self.dropout, self.out_dim)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "get_dropout_mask(self.dropout, self.out_dim)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "dropout_mask",
                            "Method Argument"
                        ],
                        [
                            "dropout_mask",
                            "Method Argument"
                        ],
                        [
                            "dropout_mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_446": {
                "variable": {
                    "value": "next_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features[tree.index].view(1, -1), root_embed.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_462": {
                "variable": {
                    "value": "treelstm_io.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(treelstm_io.hidden, h.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_176": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(f)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "previous_state_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(self.h_dim).cuda().fill_(0.0))",
                            "Call"
                        ],
                        [
                            "children[i + step].chain_state_c",
                            "Attribute"
                        ],
                        [
                            "children[i + step].chain_state_c_backward",
                            "Attribute"
                        ],
                        [
                            "previous_state_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_177": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(i, u) + torch.mul(f, previous_state_c)",
                            "BinOp"
                        ],
                        [
                            "self.node_forward(next_feature, previous_state_c, previous_state_h, treelstm_io.dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(i, u) + torch.sum(torch.cat([torch.mul(f, c) for (f, c) in zip(collection_f, collection_c)], 0), 0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.node_forward(next_feature, collection_c, collection_h, treelstm_io.dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(i, u) + torch.mul(f, root_c)",
                            "BinOp"
                        ],
                        [
                            "self.node_backward(next_features, root_c, root_h, treelstm_io.dropout_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_301": {
                "tensors": {
                    "value": "collection_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "collection_h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_304": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(r)",
                            "Call"
                        ],
                        [
                            "torch.split(ioffu, ioffu.size(1) // 4, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(r)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(r)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_304": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(u)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ],
                        [
                            "torch.split(ioffu, ioffu.size(1) // 4, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_306": {
                "input": {
                    "value": "self.forget_x(feat_inp) + self.forget_h(col_h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_308": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(f)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(i, u) + torch.mul(f, previous_state_c)",
                            "BinOp"
                        ],
                        [
                            "self.node_forward(next_feature, previous_state_c, previous_state_h, treelstm_io.dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(i, u) + torch.sum(torch.cat([torch.mul(f, c) for (f, c) in zip(collection_f, collection_c)], 0), 0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.node_forward(next_feature, collection_c, collection_h, treelstm_io.dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(i, u) + torch.mul(f, root_c)",
                            "BinOp"
                        ],
                        [
                            "self.node_backward(next_features, root_c, root_h, treelstm_io.dropout_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_308": {
                "input": {
                    "value": "torch.cat([torch.mul(f, c) for (f, c) in zip(collection_f, collection_c)], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_309": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(i, u) + torch.mul(f, previous_state_c)",
                            "BinOp"
                        ],
                        [
                            "self.node_forward(next_feature, previous_state_c, previous_state_h, treelstm_io.dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(i, u) + torch.sum(torch.cat([torch.mul(f, c) for (f, c) in zip(collection_f, collection_c)], 0), 0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.node_forward(next_feature, collection_c, collection_h, treelstm_io.dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(i, u) + torch.mul(f, root_c)",
                            "BinOp"
                        ],
                        [
                            "self.node_backward(next_features, root_c, root_h, treelstm_io.dropout_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_310": {
                "input": {
                    "value": "1 - r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "projected_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ],
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ],
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_416": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(r)",
                            "Call"
                        ],
                        [
                            "torch.split(ioffu, ioffu.size(1) // 4, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(r)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(r)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_416": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(u)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ],
                        [
                            "torch.split(ioffu, ioffu.size(1) // 4, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_418": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(f)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "root_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(self.h_dim).cuda().fill_(0.0))",
                            "Call"
                        ],
                        [
                            "tree.parent.tree_state_c_backward",
                            "Attribute"
                        ],
                        [
                            "root_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_419": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(i, u) + torch.mul(f, previous_state_c)",
                            "BinOp"
                        ],
                        [
                            "self.node_forward(next_feature, previous_state_c, previous_state_h, treelstm_io.dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(i, u) + torch.sum(torch.cat([torch.mul(f, c) for (f, c) in zip(collection_f, collection_c)], 0), 0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "self.node_forward(next_feature, collection_c, collection_h, treelstm_io.dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(i, u) + torch.mul(f, root_c)",
                            "BinOp"
                        ],
                        [
                            "self.node_backward(next_features, root_c, root_h, treelstm_io.dropout_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_420": {
                "input": {
                    "value": "1 - r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "projected_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ],
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ],
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_481": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_483": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_519": {
                "*size": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_171": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(r)",
                            "Call"
                        ],
                        [
                            "torch.split(ioffu, ioffu.size(1) // 4, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(r)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(r)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_171": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(u)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ],
                        [
                            "torch.split(ioffu, ioffu.size(1) // 4, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_174": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_174": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(u)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ],
                        [
                            "torch.split(ioffu, ioffu.size(1) // 4, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_180": {
                "input": {
                    "value": "1 - r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "projected_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ],
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ],
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_221": {
                "variable": {
                    "value": "next_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features[children[i].index].view(1, -1), previous_embed.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "treelstm_io.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(treelstm_io.hidden, h.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_295": {
                "in_features": {
                    "value": "self.pooling_size * self.pooling_size + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_308": {
                "tensors": {
                    "value": "[torch.mul(f, c) for (f, c) in zip(collection_f, collection_c)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_350": {
                "input": {
                    "value": "torch.cat(collection_embed, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_350": {
                "tensors": {
                    "value": "collection_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_481": {
                "input": {
                    "value": "pred_dist.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_483": {
                "input": {
                    "value": "pred_dist.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/tree_lstm/tree_lstm.py": {
        "torch": {
            "ModuleList_24": {
                "variable": {
                    "value": "self.multi_layer_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_49": {
                "variable": {
                    "value": "final_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(foreward_output, backward_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_87": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lstm_io.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "lstm_io.order.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.ioffux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.ioffuh_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.ioffuh_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.px",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_130": {
                "variable": {
                    "value": "(i, o, f_l, f_r, u, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ioffu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ioffux(feat_inp) + self.ioffuh_left(left_h) + self.ioffuh_right(right_h)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "ioffu.size(1) // 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_134": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(ioffu, ioffu.size(1) // 6, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "F.tanh(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_214": {
                "variable": {
                    "value": "self.iofux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "variable": {
                    "value": "self.iofuh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5 * self.h_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_216": {
                "variable": {
                    "value": "self.px",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_234": {
                "variable": {
                    "value": "(i, o, f, u, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "iofu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.iofux(feat_inp) + self.iofuh(root_h)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "iofu.size(1) // 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_238": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(ioffu, ioffu.size(1) // 6, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(o)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "F.tanh(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "treelstm_io.dists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(treelstm_io.dists, pred_dist.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_316": {
                "variable": {
                    "value": "treelstm_io.commitments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(treelstm_io.commitments, label_to_embed.view(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_138": {
                "variable": {
                    "value": "h_final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binary_mask.float().div(1.0 - dropout_probability)",
                            "Call"
                        ],
                        [
                            "get_dropout_mask(self.dropout, self.out_dim)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "dropout_mask",
                            "Method Argument"
                        ],
                        [
                            "dropout_mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_177": {
                "variable": {
                    "value": "next_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features[tree.index].view(1, -1), left_embed.view(1, -1), right_embed.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "treelstm_io.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(treelstm_io.hidden, h.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_242": {
                "variable": {
                    "value": "h_final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(r, h) + torch.mul(1 - r, projected_x)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(h_final, dropout_mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binary_mask.float().div(1.0 - dropout_probability)",
                            "Call"
                        ],
                        [
                            "get_dropout_mask(self.dropout, self.out_dim)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "dropout_mask",
                            "Method Argument"
                        ],
                        [
                            "dropout_mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_265": {
                "variable": {
                    "value": "next_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features[tree.index].view(1, -1), root_embed.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "treelstm_io.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(treelstm_io.hidden, h.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_131": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(ioffu, ioffu.size(1) // 6, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(r)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(r)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_131": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(ioffu, ioffu.size(1) // 6, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_133": {
                "input": {
                    "value": "f_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(ioffu, ioffu.size(1) // 6, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(f_l)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "left_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(self.h_dim).cuda().fill_(0.0))",
                            "Call"
                        ],
                        [
                            "tree.left_child.state_c",
                            "Attribute"
                        ],
                        [
                            "left_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_134": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(i, u) + torch.mul(f_l, left_c) + torch.mul(f_r, right_c)",
                            "BinOp"
                        ],
                        [
                            "self.node_forward(next_feature, left_c, right_c, left_h, right_h, treelstm_io.dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(i, u) + torch.mul(f, root_c)",
                            "BinOp"
                        ],
                        [
                            "self.node_backward(next_features, root_c, root_h, treelstm_io.dropout_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_135": {
                "input": {
                    "value": "1 - r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "projected_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ],
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_235": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(ioffu, ioffu.size(1) // 6, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(r)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(r)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_235": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(ioffu, ioffu.size(1) // 6, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ],
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.tanh(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_237": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(iofu, iofu.size(1) // 5, dim=1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(f)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "root_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.FloatTensor(self.h_dim).cuda().fill_(0.0))",
                            "Call"
                        ],
                        [
                            "tree.parent.state_c_backward",
                            "Attribute"
                        ],
                        [
                            "root_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_238": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(i, u) + torch.mul(f_l, left_c) + torch.mul(f_r, right_c)",
                            "BinOp"
                        ],
                        [
                            "self.node_forward(next_feature, left_c, right_c, left_h, right_h, treelstm_io.dropout_mask)",
                            "Call"
                        ],
                        [
                            "torch.mul(i, u) + torch.mul(f, root_c)",
                            "BinOp"
                        ],
                        [
                            "self.node_backward(next_features, root_c, root_h, treelstm_io.dropout_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_239": {
                "input": {
                    "value": "1 - r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "projected_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ],
                        [
                            "self.px(feat_inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_301": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_339": {
                "*size": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_301": {
                "input": {
                    "value": "pred_dist.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_303": {
                "input": {
                    "value": "pred_dist.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/tree_lstm/tree_utils.py": {
        "torch": {
            "min_75": {
                "variable": {
                    "value": "unionbox[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_76": {
                "variable": {
                    "value": "unionbox[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_77": {
                "variable": {
                    "value": "unionbox[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_78": {
                "variable": {
                    "value": "unionbox[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_83": {
                "variable": {
                    "value": "intersextion_box[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_84": {
                "variable": {
                    "value": "intersextion_box[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_85": {
                "variable": {
                    "value": "intersextion_box[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_86": {
                "variable": {
                    "value": "intersextion_box[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_87": {
                "variable": {
                    "value": "case1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intersextion_box[:, 2].contiguous().view(-1) < intersextion_box[:, 0].contiguous().view(-1)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_88": {
                "variable": {
                    "value": "case2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intersextion_box[:, 3].contiguous().view(-1) < intersextion_box[:, 1].contiguous().view(-1)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_48": {
                "variable": {
                    "value": "boxes_info[obj_idx, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "intersection[obj_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "numel_48": {
                "variable": {
                    "value": "boxes_info[obj_idx, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "(boxes / float(IM_SCALE), center_size(boxes) / float(IM_SCALE))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "(box1, box2, union_info, intersextion_info)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_40": {
                "n": {
                    "value": "num_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_priors.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "lib/tree_lstm/val_gen_hrtree.py": {
        "torch": {
            "clamp_141": {
                "variable": {
                    "value": "sample_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.view(image.shape[1:]).clone()",
                            "Call"
                        ],
                        [
                            "(revert_normalize(sample_image) * 255).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(sample_image, 0, 255)",
                            "Call"
                        ],
                        [
                            "sample_image.permute(1, 2, 0).contiguous().data.cpu().numpy().astype(dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(sample_image, 'RGB').convert('RGBA')",
                            "Call"
                        ],
                        [
                            "image.view(image.shape[1:]).clone()",
                            "Call"
                        ],
                        [
                            "(revert_normalize(sample_image) * 255).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(sample_image, 0, 255)",
                            "Call"
                        ],
                        [
                            "sample_image.permute(1, 2, 0).contiguous().data.cpu().numpy().astype(dtype=np.uint8)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_174": {
                "variable": {
                    "value": "sample_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.view(image.shape[1:]).clone()",
                            "Call"
                        ],
                        [
                            "(revert_normalize(sample_image) * 255).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(sample_image, 0, 255)",
                            "Call"
                        ],
                        [
                            "sample_image.permute(1, 2, 0).contiguous().data.cpu().numpy().astype(dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(sample_image, 'RGB').convert('RGBA')",
                            "Call"
                        ],
                        [
                            "image.view(image.shape[1:]).clone()",
                            "Call"
                        ],
                        [
                            "(revert_normalize(sample_image) * 255).int()",
                            "Call"
                        ],
                        [
                            "torch.clamp(sample_image, 0, 255)",
                            "Call"
                        ],
                        [
                            "sample_image.permute(1, 2, 0).contiguous().data.cpu().numpy().astype(dtype=np.uint8)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_38": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/word_vectors.py": {
        "torch": {
            "Tensor_20": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_94": {
                "variable": {
                    "value": "wv_arr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_96": {
                "obj": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(wv_dict, wv_arr, wv_size)",
                            "Tuple"
                        ]
                    ]
                },
                "f": {
                    "value": "fname + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_55": {
                "f": {
                    "value": "fname_pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fname + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/eval_GCNcaptions.py": {
        "torch": {
            "load_169": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "conf.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_133": {
                "variable": {
                    "value": "caption_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "conf.caption_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_180": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_225": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask[:, :input.shape[1]]",
                            "Subscript"
                        ],
                        [
                            "to_contiguous(mask).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/eval_captions.py": {
        "torch": {
            "load_159": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "conf.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_124": {
                "variable": {
                    "value": "caption_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "conf.caption_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_170": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_215": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask[:, :input.shape[1]]",
                            "Subscript"
                        ],
                        [
                            "to_contiguous(mask).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/eval_rel_count.py": {
        "torch": {
            "load_53": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "conf.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/eval_rels.py": {
        "torch": {
            "load_73": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "conf.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/train_GCNcaptions.py": {
        "torch": {
            "load_166": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "conf.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_130": {
                "variable": {
                    "value": "caption_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "conf.caption_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_179": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf.lr * decay_factor",
                            "BinOp"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_358": {
                "obj": {
                    "value": "{'epoch': epoch, 'state_dict': captionGenerator.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(conf.save_dir, '{}-{}.tar'.format('vgcaption', epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_371": {
                "obj": {
                    "value": "{'epoch': epoch, 'state_dict': captionGenerator.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(conf.save_dir, '{}-best.tar'.format('vgcaption'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_226": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask[:, :input.shape[1]]",
                            "Subscript"
                        ],
                        [
                            "to_contiguous(mask).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/train_captions.py": {
        "torch": {
            "load_157": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "conf.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_122": {
                "variable": {
                    "value": "caption_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "conf.caption_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_168": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf.lr * decay_factor",
                            "BinOp"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_347": {
                "obj": {
                    "value": "{'epoch': epoch, 'state_dict': captionGenerator.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(conf.save_dir, '{}-{}.tar'.format('vgcaption', epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_360": {
                "obj": {
                    "value": "{'epoch': epoch, 'state_dict': captionGenerator.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(conf.save_dir, '{}-best.tar'.format('vgcaption'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_213": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask[:, :input.shape[1]]",
                            "Subscript"
                        ],
                        [
                            "to_contiguous(mask).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/train_detector.py": {
        "torch": {
            "SGD_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in detector.parameters() if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "conf.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "conf.lr * conf.num_gpus * conf.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_52": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD([p for p in detector.parameters() if p.requires_grad], weight_decay=conf.l2, lr=conf.lr * conf.num_gpus * conf.batch_size, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_57": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "conf.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_113": {
                "variable": {
                    "value": "class_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result.od_obj_dists",
                            "Attribute"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result.od_obj_labels",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cross_entropy_131": {
                "variable": {
                    "value": "rpn_class_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result.rpn_scores",
                            "Attribute"
                        ]
                    ]
                },
                "target": {
                    "value": "train_anchor_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b.train_anchor_labels[:, -1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_216": {
                "obj": {
                    "value": "{'epoch': epoch, 'state_dict': detector.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(conf.save_dir, '{}-{}.tar'.format('coco' if conf.coco else 'vg', epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/train_rels.py": {
        "torch": {
            "load_159": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "conf.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_154": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_optim(conf.lr * conf.num_gpus * conf.batch_size)",
                            "Call"
                        ],
                        [
                            "optim.Adadelta(params, weight_decay=conf.l2, lr=lr, eps=0.001)",
                            "Call"
                        ],
                        [
                            "optim.SGD(params, weight_decay=conf.l2, lr=lr, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_223": {
                "variable": {
                    "value": "losses[class_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "result.rm_obj_dists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "result.rm_obj_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_149": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': fc_params, 'lr': lr / 10.0}, {'params': non_fc_params}]",
                            "List"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "conf.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_151": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': fc_params, 'lr': lr / 10.0}, {'params': non_fc_params}]",
                            "List"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "conf.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_225": {
                "variable": {
                    "value": "losses[rel_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "result.rel_dists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "result.rel_proposal_labels[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_227": {
                "variable": {
                    "value": "losses[rel_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "result.rel_dists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "result.rel_labels[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_231": {
                "variable": {
                    "value": "losses[rel_proposal_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "result.rel_anchor_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "result.rel_anchor_labels[:, -1].float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_316": {
                "obj": {
                    "value": "{'epoch': epoch, 'state_dict': detector.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(conf.save_dir, '{}-{}.tar'.format('vgrel', epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_327": {
                "obj": {
                    "value": "{'epoch': epoch, 'state_dict': detector.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(conf.save_dir, '{}-best.tar'.format('vgrel'))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/visual_eval_rels.py": {
        "torch": {
            "load_77": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "conf.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}