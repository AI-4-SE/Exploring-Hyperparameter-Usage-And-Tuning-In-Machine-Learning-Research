{
    "blpa/graph.py": {
        "tensorflow": {
            "Variable_184": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(kshp, stddev=sq, dtype=DT)",
                            "Call"
                        ],
                        [
                            "tf.Variable(kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_185": {
                "variable": {
                    "value": "kgrad",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(kshp, dtype=DT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_191": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prev.ftop",
                            "Attribute"
                        ],
                        [
                            "out + rtop",
                            "BinOp"
                        ],
                        [
                            "(out - mu) / bnfac",
                            "BinOp"
                        ],
                        [
                            "out * cscale",
                            "BinOp"
                        ],
                        [
                            "out + bias",
                            "BinOp"
                        ],
                        [
                            "out + rt",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(out, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out, [1, 2], True)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(out, kernel, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "sess.run(self.pred)",
                            "Call"
                        ],
                        [
                            "sess.run([self.acc, self.loss, self.gOp], feed_dict={self.ph: labels})",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(kshp, stddev=sq, dtype=DT)",
                            "Call"
                        ],
                        [
                            "tf.Variable(kernel)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, self.stride, self.stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_196": {
                "variable": {
                    "value": "self.fOp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*fsave",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "self.ftop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scratch[:np.prod(self.oSz)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.oSz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_backprop_filter_210": {
                "variable": {
                    "value": "kg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.btop",
                            "Attribute"
                        ],
                        [
                            "tf.reduce_mean(inp, [1, 2], True)",
                            "Call"
                        ]
                    ]
                },
                "filter_sizes": {
                    "value": "kshp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.ksz, self.ksz, self.inCh, self.outCh]",
                            "List"
                        ]
                    ]
                },
                "out_backprop": {
                    "value": "ingrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ftop",
                            "Attribute"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], 1, 1, self.inSz[3]], kernel, ingrad, [1, 1, 1, 1], 'VALID') / np.float32(self.inSz[1] * self.inSz[2])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], self.inSz[1] // 2, self.inSz[2] // 2, self.inSz[3]], kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input(self.inSz, kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "ingrad + tf.reshape(graph.scratch2[:np.prod(self.inSz)], self.inSz)",
                            "BinOp"
                        ],
                        [
                            "max_pool_grad(self.premp, self.btop, ingrad, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "ingrad * cscale",
                            "BinOp"
                        ],
                        [
                            "ingrad - tf.reduce_mean(ingrad, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "ingrad[:, :, :, respad:-respad]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.depthwise_conv2d_native_backprop_input(rsz, reskern, ingrad, [1, rstride, rstride, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "(tf.exp(smx) - ph2) / np.float32(xsz[0])",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, self.stride, self.stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_258": {
                "variable": {
                    "value": "self.bOp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*bsave",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "placeholder_268": {
                "variable": {
                    "value": "self.ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[xsz[0], xsz[1], xsz[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_271": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([prev.oSz[-1]], dtype=DT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_272": {
                "variable": {
                    "value": "bgrad",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([prev.oSz[-1]], dtype=DT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_279": {
                "variable": {
                    "value": "amx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(tf.argmax(pred, 3), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_280": {
                "x": {
                    "value": "tf.reshape(tf.range(xsz[3]), [xsz[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_282": {
                "variable": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(amx, self.ph), DT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_288": {
                "variable": {
                    "value": "self.gOp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*gOp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_350": {
                "variable": {
                    "value": "self.scratch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=msz, dtype=DT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_351": {
                "variable": {
                    "value": "self.scratch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=msz2, dtype=DT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_445": {
                "variable": {
                    "value": "self.ftop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "xsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev.oSz",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "rtop",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scratch2[:np.prod(rsz)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "rsz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "moments_90": {
                "variable": {
                    "value": "(mu, vr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prev.ftop",
                            "Attribute"
                        ],
                        [
                            "out + rtop",
                            "BinOp"
                        ],
                        [
                            "(out - mu) / bnfac",
                            "BinOp"
                        ],
                        [
                            "out * cscale",
                            "BinOp"
                        ],
                        [
                            "out + bias",
                            "BinOp"
                        ],
                        [
                            "out + rt",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(out, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out, [1, 2], True)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(out, kernel, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "sess.run(self.pred)",
                            "Call"
                        ],
                        [
                            "sess.run([self.acc, self.loss, self.gOp], feed_dict={self.ph: labels})",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_91": {
                "variable": {
                    "value": "bnfac",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vr + BNEPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_93": {
                "variable": {
                    "value": "self.bnfac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros_like(bnfac)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_96": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([self.inCh], dtype=DT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_97": {
                "variable": {
                    "value": "sgrad",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.inCh], dtype=DT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_100": {
                "variable": {
                    "value": "cscale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([self.inCh], dtype=DT))",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_105": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.inCh], dtype=DT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_106": {
                "variable": {
                    "value": "bgrad",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.inCh], dtype=DT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_117": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(out.get_shape(), dtype=DT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_122": {
                "variable": {
                    "value": "self.Rm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "var > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "relu_123": {
                "variable": {
                    "value": "btop",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(out.get_shape(), dtype=DT))",
                            "Call"
                        ],
                        [
                            "tf.reshape(scratch2[:np.prod(self.inSz)], out.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros(out.get_shape(), dtype=DT))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_125": {
                "variable": {
                    "value": "self.btop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "btop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(var)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prev.ftop",
                            "Attribute"
                        ],
                        [
                            "out + rtop",
                            "BinOp"
                        ],
                        [
                            "(out - mu) / bnfac",
                            "BinOp"
                        ],
                        [
                            "out * cscale",
                            "BinOp"
                        ],
                        [
                            "out + bias",
                            "BinOp"
                        ],
                        [
                            "out + rt",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(out, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out, [1, 2], True)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(out, kernel, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "sess.run(self.pred)",
                            "Call"
                        ],
                        [
                            "sess.run([self.acc, self.loss, self.gOp], feed_dict={self.ph: labels})",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_128": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prev.ftop",
                            "Attribute"
                        ],
                        [
                            "out + rtop",
                            "BinOp"
                        ],
                        [
                            "(out - mu) / bnfac",
                            "BinOp"
                        ],
                        [
                            "out * cscale",
                            "BinOp"
                        ],
                        [
                            "out + bias",
                            "BinOp"
                        ],
                        [
                            "out + rt",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(out, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out, [1, 2], True)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(out, kernel, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "sess.run(self.pred)",
                            "Call"
                        ],
                        [
                            "sess.run([self.acc, self.loss, self.gOp], feed_dict={self.ph: labels})",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_190": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prev.ftop",
                            "Attribute"
                        ],
                        [
                            "out + rtop",
                            "BinOp"
                        ],
                        [
                            "(out - mu) / bnfac",
                            "BinOp"
                        ],
                        [
                            "out * cscale",
                            "BinOp"
                        ],
                        [
                            "out + bias",
                            "BinOp"
                        ],
                        [
                            "out + rt",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(out, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out, [1, 2], True)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(out, kernel, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "sess.run(self.pred)",
                            "Call"
                        ],
                        [
                            "sess.run([self.acc, self.loss, self.gOp], feed_dict={self.ph: labels})",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_208": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.btop",
                            "Attribute"
                        ],
                        [
                            "tf.reduce_mean(inp, [1, 2], True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "group_215": {
                "variable": {
                    "value": "self.bOp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*bsave",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_367": {
                "variable": {
                    "value": "self.aginit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[ag.initializer for ag in self.agrads]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_368": {
                "variable": {
                    "value": "self.aupd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[tf.assign_add(self.agrads[i], self.grads[i]).op for i in range(len(self.grads))]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "placeholder_374": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_375": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConfigProto_379": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_381": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scratch2[:np.prod(self.inSz)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "out.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_159": {
                "variable": {
                    "value": "self.btop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(out.get_shape(), dtype=DT))",
                            "Call"
                        ],
                        [
                            "tf.reshape(scratch2[:np.prod(self.inSz)], out.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros(out.get_shape(), dtype=DT))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_160": {
                "variable": {
                    "value": "self.Rm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "var > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "relu_161": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prev.ftop",
                            "Attribute"
                        ],
                        [
                            "out + rtop",
                            "BinOp"
                        ],
                        [
                            "(out - mu) / bnfac",
                            "BinOp"
                        ],
                        [
                            "out * cscale",
                            "BinOp"
                        ],
                        [
                            "out + bias",
                            "BinOp"
                        ],
                        [
                            "out + rt",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(out, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out, [1, 2], True)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(out, kernel, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "sess.run(self.pred)",
                            "Call"
                        ],
                        [
                            "sess.run([self.acc, self.loss, self.gOp], feed_dict={self.ph: labels})",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_185": {
                "shape": {
                    "value": "kshp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.ksz, self.ksz, self.inCh, self.outCh]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_backprop_input_222": {
                "variable": {
                    "value": "ingrad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_sizes": {
                    "value": "[self.inSz[0], self.inSz[1] // 2, self.inSz[2] // 2, self.inSz[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "filter": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(kshp, stddev=sq, dtype=DT)",
                            "Call"
                        ],
                        [
                            "tf.Variable(kernel)",
                            "Call"
                        ]
                    ]
                },
                "out_backprop": {
                    "value": "ingrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ftop",
                            "Attribute"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], 1, 1, self.inSz[3]], kernel, ingrad, [1, 1, 1, 1], 'VALID') / np.float32(self.inSz[1] * self.inSz[2])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], self.inSz[1] // 2, self.inSz[2] // 2, self.inSz[3]], kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input(self.inSz, kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "ingrad + tf.reshape(graph.scratch2[:np.prod(self.inSz)], self.inSz)",
                            "BinOp"
                        ],
                        [
                            "max_pool_grad(self.premp, self.btop, ingrad, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "ingrad * cscale",
                            "BinOp"
                        ],
                        [
                            "ingrad - tf.reduce_mean(ingrad, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "ingrad[:, :, :, respad:-respad]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.depthwise_conv2d_native_backprop_input(rsz, reskern, ingrad, [1, rstride, rstride, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "(tf.exp(smx) - ph2) / np.float32(xsz[0])",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, self.stride, self.stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_backprop_input_225": {
                "variable": {
                    "value": "ingrad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_sizes": {
                    "value": "self.inSz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filter": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(kshp, stddev=sq, dtype=DT)",
                            "Call"
                        ],
                        [
                            "tf.Variable(kernel)",
                            "Call"
                        ]
                    ]
                },
                "out_backprop": {
                    "value": "ingrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ftop",
                            "Attribute"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], 1, 1, self.inSz[3]], kernel, ingrad, [1, 1, 1, 1], 'VALID') / np.float32(self.inSz[1] * self.inSz[2])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], self.inSz[1] // 2, self.inSz[2] // 2, self.inSz[3]], kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input(self.inSz, kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "ingrad + tf.reshape(graph.scratch2[:np.prod(self.inSz)], self.inSz)",
                            "BinOp"
                        ],
                        [
                            "max_pool_grad(self.premp, self.btop, ingrad, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "ingrad * cscale",
                            "BinOp"
                        ],
                        [
                            "ingrad - tf.reduce_mean(ingrad, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "ingrad[:, :, :, respad:-respad]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.depthwise_conv2d_native_backprop_input(rsz, reskern, ingrad, [1, rstride, rstride, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "(tf.exp(smx) - ph2) / np.float32(xsz[0])",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, self.stride, self.stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_229": {
                "tensor": {
                    "value": "graph.scratch2[:np.prod(gshp)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "gshp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ingrad.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_244": {
                "tensor": {
                    "value": "graph.scratch2[:np.prod(self.inSz)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.inSz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_271": {
                "shape": {
                    "value": "[prev.oSz[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_272": {
                "shape": {
                    "value": "[prev.oSz[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_logsumexp_278": {
                "input_tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev.ftop",
                            "Attribute"
                        ],
                        [
                            "pred + bias",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_279": {
                "input": {
                    "value": "tf.argmax(pred, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_280": {
                "x": {
                    "value": "tf.cast(tf.reshape(tf.range(xsz[3]), [xsz[3]]), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_282": {
                "x": {
                    "value": "tf.equal(amx, self.ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_350": {
                "shape": {
                    "value": "msz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(self.dL.oSz)",
                            "Call"
                        ],
                        [
                            "lsz",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_351": {
                "shape": {
                    "value": "msz2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "lsz",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "depthwise_conv2d_81": {
                "variable": {
                    "value": "rt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rtop",
                            "Name"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(rt, reskern, [1, rstride, rstride, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(rt, [[0, 0], [0, 0], [0, 0], [respad, respad]])",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "reskern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([rstride, rstride, rsz[-1], 1], dtype=DT) / np.float32(rstride ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, rstride, rstride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_83": {
                "variable": {
                    "value": "rt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rtop",
                            "Name"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(rt, reskern, [1, rstride, rstride, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(rt, [[0, 0], [0, 0], [0, 0], [respad, respad]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [respad, respad]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_93": {
                "input": {
                    "value": "bnfac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(vr + BNEPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_96": {
                "shape": {
                    "value": "[self.inCh]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_97": {
                "shape": {
                    "value": "[self.inCh]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_105": {
                "shape": {
                    "value": "[self.inCh]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_106": {
                "shape": {
                    "value": "[self.inCh]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_117": {
                "shape": {
                    "value": "out.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "relu_143": {
                "variable": {
                    "value": "self.btop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "outs * cscale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_144": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prev.ftop",
                            "Attribute"
                        ],
                        [
                            "out + rtop",
                            "BinOp"
                        ],
                        [
                            "(out - mu) / bnfac",
                            "BinOp"
                        ],
                        [
                            "out * cscale",
                            "BinOp"
                        ],
                        [
                            "out + bias",
                            "BinOp"
                        ],
                        [
                            "out + rt",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(out, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out, [1, 2], True)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(out, kernel, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "sess.run(self.pred)",
                            "Call"
                        ],
                        [
                            "sess.run([self.acc, self.loss, self.gOp], feed_dict={self.ph: labels})",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_149": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(out.get_shape(), dtype=DT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_195": {
                "ref": {
                    "value": "scratch[:np.prod(self.oSz)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(out, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_212": {
                "ref": {
                    "value": "kgrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(kshp, dtype=DT))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "kg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_backprop_filter(inp, kshp, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "kg + graph.WD * kernel",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_backprop_input_219": {
                "input_sizes": {
                    "value": "[self.inSz[0], 1, 1, self.inSz[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "filter": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(kshp, stddev=sq, dtype=DT)",
                            "Call"
                        ],
                        [
                            "tf.Variable(kernel)",
                            "Call"
                        ]
                    ]
                },
                "out_backprop": {
                    "value": "ingrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ftop",
                            "Attribute"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], 1, 1, self.inSz[3]], kernel, ingrad, [1, 1, 1, 1], 'VALID') / np.float32(self.inSz[1] * self.inSz[2])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], self.inSz[1] // 2, self.inSz[2] // 2, self.inSz[3]], kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input(self.inSz, kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "ingrad + tf.reshape(graph.scratch2[:np.prod(self.inSz)], self.inSz)",
                            "BinOp"
                        ],
                        [
                            "max_pool_grad(self.premp, self.btop, ingrad, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "ingrad * cscale",
                            "BinOp"
                        ],
                        [
                            "ingrad - tf.reduce_mean(ingrad, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "ingrad[:, :, :, respad:-respad]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.depthwise_conv2d_native_backprop_input(rsz, reskern, ingrad, [1, rstride, rstride, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "(tf.exp(smx) - ph2) / np.float32(xsz[0])",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_236": {
                "ref": {
                    "value": "bgrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([self.inCh], dtype=DT))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros([prev.oSz[-1]], dtype=DT))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.reduce_sum(ingrad, [0, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_240": {
                "input_tensor": {
                    "value": "ingrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ftop",
                            "Attribute"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], 1, 1, self.inSz[3]], kernel, ingrad, [1, 1, 1, 1], 'VALID') / np.float32(self.inSz[1] * self.inSz[2])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], self.inSz[1] // 2, self.inSz[2] // 2, self.inSz[3]], kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input(self.inSz, kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "ingrad + tf.reshape(graph.scratch2[:np.prod(self.inSz)], self.inSz)",
                            "BinOp"
                        ],
                        [
                            "max_pool_grad(self.premp, self.btop, ingrad, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "ingrad * cscale",
                            "BinOp"
                        ],
                        [
                            "ingrad - tf.reduce_mean(ingrad, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "ingrad[:, :, :, respad:-respad]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.depthwise_conv2d_native_backprop_input(rsz, reskern, ingrad, [1, rstride, rstride, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "(tf.exp(smx) - ph2) / np.float32(xsz[0])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_241": {
                "input_tensor": {
                    "value": "ingrad * self.btop1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_246": {
                "ref": {
                    "value": "graph.scratch[:np.prod(self.inSz)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(ingrad, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_279": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prev.ftop",
                            "Attribute"
                        ],
                        [
                            "pred + bias",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_282": {
                "x": {
                    "value": "amx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.expand_dims(tf.argmax(pred, 3), 3), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_283": {
                "input_tensor": {
                    "value": "ph2 * smx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_285": {
                "x": {
                    "value": "smx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred - tf.reduce_logsumexp(pred, 3, True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_286": {
                "ref": {
                    "value": "bgrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([self.inCh], dtype=DT))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros([prev.oSz[-1]], dtype=DT))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.reduce_sum(ingrad, [0, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_287": {
                "ref": {
                    "value": "graph.scratch[:np.prod(xsz)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(ingrad, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_366": {
                "initial_value": {
                    "value": "tf.zeros(self.grads[i].get_shape())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_77": {
                "shape": {
                    "value": "[rstride, rstride, rsz[-1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "assign_94": {
                "ref": {
                    "value": "self.bnfac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "bnfac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(vr + BNEPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_118": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(out.get_shape(), dtype=DT))",
                            "Call"
                        ],
                        [
                            "tf.reshape(scratch2[:np.prod(self.inSz)], out.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros(out.get_shape(), dtype=DT))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prev.ftop",
                            "Attribute"
                        ],
                        [
                            "out + rtop",
                            "BinOp"
                        ],
                        [
                            "(out - mu) / bnfac",
                            "BinOp"
                        ],
                        [
                            "out * cscale",
                            "BinOp"
                        ],
                        [
                            "out + bias",
                            "BinOp"
                        ],
                        [
                            "out + rt",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(out, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out, [1, 2], True)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(out, kernel, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "sess.run(self.pred)",
                            "Call"
                        ],
                        [
                            "sess.run([self.acc, self.loss, self.gOp], feed_dict={self.ph: labels})",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_195": {
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prev.ftop",
                            "Attribute"
                        ],
                        [
                            "out + rtop",
                            "BinOp"
                        ],
                        [
                            "(out - mu) / bnfac",
                            "BinOp"
                        ],
                        [
                            "out * cscale",
                            "BinOp"
                        ],
                        [
                            "out + bias",
                            "BinOp"
                        ],
                        [
                            "out + rt",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(out, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out, [1, 2], True)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(out, kernel, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "sess.run(self.pred)",
                            "Call"
                        ],
                        [
                            "sess.run([self.acc, self.loss, self.gOp], feed_dict={self.ph: labels})",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_236": {
                "input_tensor": {
                    "value": "ingrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ftop",
                            "Attribute"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], 1, 1, self.inSz[3]], kernel, ingrad, [1, 1, 1, 1], 'VALID') / np.float32(self.inSz[1] * self.inSz[2])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], self.inSz[1] // 2, self.inSz[2] // 2, self.inSz[3]], kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input(self.inSz, kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "ingrad + tf.reshape(graph.scratch2[:np.prod(self.inSz)], self.inSz)",
                            "BinOp"
                        ],
                        [
                            "max_pool_grad(self.premp, self.btop, ingrad, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "ingrad * cscale",
                            "BinOp"
                        ],
                        [
                            "ingrad - tf.reduce_mean(ingrad, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "ingrad[:, :, :, respad:-respad]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.depthwise_conv2d_native_backprop_input(rsz, reskern, ingrad, [1, rstride, rstride, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "(tf.exp(smx) - ph2) / np.float32(xsz[0])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_238": {
                "ref": {
                    "value": "sgrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([self.inCh], dtype=DT))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.reduce_sum(ingrad * self.btop0, [0, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_246": {
                "tensor": {
                    "value": "ingrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ftop",
                            "Attribute"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], 1, 1, self.inSz[3]], kernel, ingrad, [1, 1, 1, 1], 'VALID') / np.float32(self.inSz[1] * self.inSz[2])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], self.inSz[1] // 2, self.inSz[2] // 2, self.inSz[3]], kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input(self.inSz, kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "ingrad + tf.reshape(graph.scratch2[:np.prod(self.inSz)], self.inSz)",
                            "BinOp"
                        ],
                        [
                            "max_pool_grad(self.premp, self.btop, ingrad, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "ingrad * cscale",
                            "BinOp"
                        ],
                        [
                            "ingrad - tf.reduce_mean(ingrad, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "ingrad[:, :, :, respad:-respad]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.depthwise_conv2d_native_backprop_input(rsz, reskern, ingrad, [1, rstride, rstride, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "(tf.exp(smx) - ph2) / np.float32(xsz[0])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "tensor": {
                    "value": "tf.range(xsz[3])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[xsz[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_286": {
                "input_tensor": {
                    "value": "ingrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ftop",
                            "Attribute"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], 1, 1, self.inSz[3]], kernel, ingrad, [1, 1, 1, 1], 'VALID') / np.float32(self.inSz[1] * self.inSz[2])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], self.inSz[1] // 2, self.inSz[2] // 2, self.inSz[3]], kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input(self.inSz, kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "ingrad + tf.reshape(graph.scratch2[:np.prod(self.inSz)], self.inSz)",
                            "BinOp"
                        ],
                        [
                            "max_pool_grad(self.premp, self.btop, ingrad, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "ingrad * cscale",
                            "BinOp"
                        ],
                        [
                            "ingrad - tf.reduce_mean(ingrad, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "ingrad[:, :, :, respad:-respad]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.depthwise_conv2d_native_backprop_input(rsz, reskern, ingrad, [1, rstride, rstride, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "(tf.exp(smx) - ph2) / np.float32(xsz[0])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_287": {
                "tensor": {
                    "value": "ingrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ftop",
                            "Attribute"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], 1, 1, self.inSz[3]], kernel, ingrad, [1, 1, 1, 1], 'VALID') / np.float32(self.inSz[1] * self.inSz[2])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], self.inSz[1] // 2, self.inSz[2] // 2, self.inSz[3]], kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input(self.inSz, kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "ingrad + tf.reshape(graph.scratch2[:np.prod(self.inSz)], self.inSz)",
                            "BinOp"
                        ],
                        [
                            "max_pool_grad(self.premp, self.btop, ingrad, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "ingrad * cscale",
                            "BinOp"
                        ],
                        [
                            "ingrad - tf.reduce_mean(ingrad, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "ingrad[:, :, :, respad:-respad]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.depthwise_conv2d_native_backprop_input(rsz, reskern, ingrad, [1, rstride, rstride, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "(tf.exp(smx) - ph2) / np.float32(xsz[0])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_366": {
                "shape": {
                    "value": "self.grads[i].get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_371": {
                "input": {
                    "value": "self.grads[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_initializer_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_132": {
                "ref": {
                    "value": "scratch2[:np.prod(self.inSz)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(out, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "shape": {
                    "value": "out.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "assign_171": {
                "ref": {
                    "value": "scratch2[:sidx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(out0, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_173": {
                "ref": {
                    "value": "scratch2[:sidx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(out, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_238": {
                "input_tensor": {
                    "value": "ingrad * self.btop0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_250": {
                "ref": {
                    "value": "graph.scratch2[:np.prod(self.inSz)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(ingrad, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_256": {
                "ref": {
                    "value": "graph.scratch2[:np.prod(rsz)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(ingrad, [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_all_variables_385": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_132": {
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prev.ftop",
                            "Attribute"
                        ],
                        [
                            "out + rtop",
                            "BinOp"
                        ],
                        [
                            "(out - mu) / bnfac",
                            "BinOp"
                        ],
                        [
                            "out * cscale",
                            "BinOp"
                        ],
                        [
                            "out + bias",
                            "BinOp"
                        ],
                        [
                            "out + rt",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(out, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out, [1, 2], True)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(out, kernel, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "sess.run(self.pred)",
                            "Call"
                        ],
                        [
                            "sess.run([self.acc, self.loss, self.gOp], feed_dict={self.ph: labels})",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_150": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(out.get_shape(), dtype=DT))",
                            "Call"
                        ],
                        [
                            "tf.reshape(scratch2[:np.prod(self.inSz)], out.get_shape())",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros(out.get_shape(), dtype=DT))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prev.ftop",
                            "Attribute"
                        ],
                        [
                            "out + rtop",
                            "BinOp"
                        ],
                        [
                            "(out - mu) / bnfac",
                            "BinOp"
                        ],
                        [
                            "out * cscale",
                            "BinOp"
                        ],
                        [
                            "out + bias",
                            "BinOp"
                        ],
                        [
                            "out + rt",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(out, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out, [1, 2], True)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(out, kernel, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "sess.run(self.pred)",
                            "Call"
                        ],
                        [
                            "sess.run([self.acc, self.loss, self.gOp], feed_dict={self.ph: labels})",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_171": {
                "tensor": {
                    "value": "out0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prev.ftop",
                            "Attribute"
                        ],
                        [
                            "out + rtop",
                            "BinOp"
                        ],
                        [
                            "(out - mu) / bnfac",
                            "BinOp"
                        ],
                        [
                            "out * cscale",
                            "BinOp"
                        ],
                        [
                            "out + bias",
                            "BinOp"
                        ],
                        [
                            "out + rt",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(out, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out, [1, 2], True)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(out, kernel, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "sess.run(self.pred)",
                            "Call"
                        ],
                        [
                            "sess.run([self.acc, self.loss, self.gOp], feed_dict={self.ph: labels})",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_250": {
                "tensor": {
                    "value": "ingrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ftop",
                            "Attribute"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], 1, 1, self.inSz[3]], kernel, ingrad, [1, 1, 1, 1], 'VALID') / np.float32(self.inSz[1] * self.inSz[2])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], self.inSz[1] // 2, self.inSz[2] // 2, self.inSz[3]], kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input(self.inSz, kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "ingrad + tf.reshape(graph.scratch2[:np.prod(self.inSz)], self.inSz)",
                            "BinOp"
                        ],
                        [
                            "max_pool_grad(self.premp, self.btop, ingrad, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "ingrad * cscale",
                            "BinOp"
                        ],
                        [
                            "ingrad - tf.reduce_mean(ingrad, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "ingrad[:, :, :, respad:-respad]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.depthwise_conv2d_native_backprop_input(rsz, reskern, ingrad, [1, rstride, rstride, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "(tf.exp(smx) - ph2) / np.float32(xsz[0])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_256": {
                "tensor": {
                    "value": "ingrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ftop",
                            "Attribute"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], 1, 1, self.inSz[3]], kernel, ingrad, [1, 1, 1, 1], 'VALID') / np.float32(self.inSz[1] * self.inSz[2])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input([self.inSz[0], self.inSz[1] // 2, self.inSz[2] // 2, self.inSz[3]], kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_backprop_input(self.inSz, kernel, ingrad, [1, self.stride, self.stride, 1], self.pad)",
                            "Call"
                        ],
                        [
                            "ingrad + tf.reshape(graph.scratch2[:np.prod(self.inSz)], self.inSz)",
                            "BinOp"
                        ],
                        [
                            "max_pool_grad(self.premp, self.btop, ingrad, [1, 3, 3, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ],
                        [
                            "ingrad * cscale",
                            "BinOp"
                        ],
                        [
                            "ingrad - tf.reduce_mean(ingrad, [0, 1, 2])",
                            "BinOp"
                        ],
                        [
                            "ingrad[:, :, :, respad:-respad]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.depthwise_conv2d_native_backprop_input(rsz, reskern, ingrad, [1, rstride, rstride, 1], 'VALID')",
                            "Call"
                        ],
                        [
                            "(tf.exp(smx) - ph2) / np.float32(xsz[0])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_add_368": {
                "ref": {
                    "value": "self.agrads[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self.grads[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "blpa/mgraph.py": {
        "tensorflow": {
            "group_83": {
                "variable": {
                    "value": "self.wg2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*self.wg2c",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_84": {
                "variable": {
                    "value": "self.wc2g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*self.wc2g",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_85": {
                "variable": {
                    "value": "self.gg2c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*self.gg2c",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_93": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConfigProto_114": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_116": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_74": {
                "variable": {
                    "value": "gsum",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "gsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(gsum)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_82": {
                "variable": {
                    "value": "self.gzero",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[g.initializer for g in self.grads]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_63": {
                "variable": {
                    "value": "wl",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_64": {
                "variable": {
                    "value": "gl",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_add_76": {
                "variable": {
                    "value": "gop",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "gl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(shp))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "gsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(gsum)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_78": {
                "variable": {
                    "value": "gop",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "gl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(shp))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "gsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(gsum)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_110": {
                "inputs": {
                    "value": "self.acc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_111": {
                "inputs": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_49": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_62": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_69": {
                "ref": {
                    "value": "wl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(shp))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "g0.weights[l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_initializer_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_63": {
                "shape": {
                    "value": "shp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g0.weights[l].get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "shp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g0.weights[l].get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_72": {
                "ref": {
                    "value": "g.weights[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "wl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(shp))",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_all_variables_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "blpa/quant.py": {
        "tensorflow": {
            "load_op_library_8": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "sopath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(os.path.dirname(__file__)) + '/ops/quant.so'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_24": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(vshp, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_38": {
                "variable": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "nbins // 2 - tf.floor(bias * nbins / 6.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_40": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(act - 1e-06) * nbins / 6.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_41": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(outs + shift, 0, nbins - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(outs.shape, dtype=tf.uint8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_60": {
                "x": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(1.0, nbins // 2 - tf.floor(bias * nbins / 6.0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_83": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "left_shift_46": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outs[:bsz // 2, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bitwise_or_47": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.bitwise.left_shift(outs[:bsz // 2, :, :, :], 4)",
                            "Call"
                        ],
                        [
                            "tf.bitwise.right_shift(outs, 4)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "outs[bsz // 2:, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "right_shift_56": {
                "variable": {
                    "value": "o1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor((act - 1e-06) * nbins / 6.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(outs + shift, 0, nbins - 1), tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.bitwise.bitwise_or(o1, outs[bsz // 2:, :, :, :])",
                            "Call"
                        ],
                        [
                            "var",
                            "Name"
                        ],
                        [
                            "tf.concat([o1, o2], 0)",
                            "Call"
                        ],
                        [
                            "(tf.cast(outs, tf.float32) + (0.5 - shift)) * 6.0 / nbins",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bitwise_and_57": {
                "variable": {
                    "value": "o2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor((act - 1e-06) * nbins / 6.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(outs + shift, 0, nbins - 1), tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.bitwise.bitwise_or(o1, outs[bsz // 2:, :, :, :])",
                            "Call"
                        ],
                        [
                            "var",
                            "Name"
                        ],
                        [
                            "tf.concat([o1, o2], 0)",
                            "Call"
                        ],
                        [
                            "(tf.cast(outs, tf.float32) + (0.5 - shift)) * 6.0 / nbins",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_58": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[o1, o2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "shape": {
                    "value": "vshp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "act.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_41": {
                "t": {
                    "value": "outs + shift",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "nbins - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "shape": {
                    "value": "outs.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "floor_38": {
                "x": {
                    "value": "bias * nbins / 6.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_51": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(vshp, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros(outs.shape, dtype=tf.uint8))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor((act - 1e-06) * nbins / 6.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(outs + shift, 0, nbins - 1), tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.bitwise.bitwise_or(o1, outs[bsz // 2:, :, :, :])",
                            "Call"
                        ],
                        [
                            "var",
                            "Name"
                        ],
                        [
                            "tf.concat([o1, o2], 0)",
                            "Call"
                        ],
                        [
                            "(tf.cast(outs, tf.float32) + (0.5 - shift)) * 6.0 / nbins",
                            "BinOp"
                        ]
                    ]
                }
            },
            "range_74": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_61": {
                "x": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor((act - 1e-06) * nbins / 6.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(outs + shift, 0, nbins - 1), tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.bitwise.bitwise_or(o1, outs[bsz // 2:, :, :, :])",
                            "Call"
                        ],
                        [
                            "var",
                            "Name"
                        ],
                        [
                            "tf.concat([o1, o2], 0)",
                            "Call"
                        ],
                        [
                            "(tf.cast(outs, tf.float32) + (0.5 - shift)) * 6.0 / nbins",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "imgnet/im10crop152.py": {
        "tensorflow": {
            "to_float_9": {
                "variable": {
                    "value": "in_s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(img)[:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "minimum_10": {
                "variable": {
                    "value": "min_s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "in_s[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "in_s[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_11": {
                "variable": {
                    "value": "new_s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(scale / min_s * in_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_15": {
                "variable": {
                    "value": "ishp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, SCALE)",
                            "Call"
                        ],
                        [
                            "crop(img, [224, 224], self.cid)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isflip, lambda : tf.image.flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_19": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[0, 0, xr, xr, xr // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_20": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[0, yr, 0, yr, yr // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_25": {
                "input_": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, SCALE)",
                            "Call"
                        ],
                        [
                            "crop(img, [224, 224], self.cid)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isflip, lambda : tf.image.flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "tf.stack([ys, xs, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[shp[0], shp[1], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.isflip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.cid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_59": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "imgs + [img]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_11": {
                "x": {
                    "value": "scale / min_s * in_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_25": {
                "values": {
                    "value": "[ys, xs, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_42": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "self.fns[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cond_44": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(code, 137)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.image.decode_png(img, channels=3)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.image.decode_jpeg(img, channels=3)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_52": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.isflip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.image.flip_left_right(img)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_9": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, SCALE)",
                            "Call"
                        ],
                        [
                            "crop(img, [224, 224], self.cid)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isflip, lambda : tf.image.flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "decode_raw_43": {
                "input_bytes": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, SCALE)",
                            "Call"
                        ],
                        [
                            "crop(img, [224, 224], self.cid)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isflip, lambda : tf.image.flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_44": {
                "x": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(img, tf.uint8)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "137",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_56": {
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, SCALE)",
                            "Call"
                        ],
                        [
                            "crop(img, [224, 224], self.cid)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isflip, lambda : tf.image.flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "decode_png_45": {
                "contents": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, SCALE)",
                            "Call"
                        ],
                        [
                            "crop(img, [224, 224], self.cid)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isflip, lambda : tf.image.flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "decode_jpeg_46": {
                "contents": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, SCALE)",
                            "Call"
                        ],
                        [
                            "crop(img, [224, 224], self.cid)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isflip, lambda : tf.image.flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_left_right_53": {
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, SCALE)",
                            "Call"
                        ],
                        [
                            "crop(img, [224, 224], self.cid)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isflip, lambda : tf.image.flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "imgnet/imloader.py": {
        "tensorflow": {
            "to_float_6": {
                "variable": {
                    "value": "in_s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(img)[:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "minimum_7": {
                "variable": {
                    "value": "min_s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "in_s[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "in_s[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_8": {
                "variable": {
                    "value": "new_s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(scale / min_s * in_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_12": {
                "variable": {
                    "value": "ishp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(img, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(img, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, scale)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.random_crop(img, [224, 224, 3]), lambda : cent_crop(img, [224, 224]))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.image.random_flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : rand_color(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "random_brightness_19": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(img, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(img, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, scale)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.random_crop(img, [224, 224, 3]), lambda : cent_crop(img, [224, 224]))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.image.random_flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : rand_color(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_20": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(img, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(img, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, scale)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.random_crop(img, [224, 224, 3]), lambda : cent_crop(img, [224, 224]))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.image.random_flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : rand_color(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_hue_21": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(img, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(img, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, scale)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.random_crop(img, [224, 224, 3]), lambda : cent_crop(img, [224, 224]))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.image.random_flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : rand_color(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_contrast_22": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(img, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(img, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, scale)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.random_crop(img, [224, 224, 3]), lambda : cent_crop(img, [224, 224]))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.image.random_flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : rand_color(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "slice_16": {
                "input_": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(img, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(img, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, scale)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.random_crop(img, [224, 224, 3]), lambda : cent_crop(img, [224, 224]))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.image.random_flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : rand_color(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "tf.stack([ys, xs, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[shp[0], shp[1], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_23": {
                "t": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(img, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(img, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, scale)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.random_crop(img, [224, 224, 3]), lambda : cent_crop(img, [224, 224]))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.image.random_flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : rand_color(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.isrand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "imgs + [img]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_8": {
                "x": {
                    "value": "scale / min_s * in_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_16": {
                "values": {
                    "value": "[ys, xs, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_38": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "self.fns[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cond_40": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(code, 137)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.image.decode_png(img, channels=3)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.image.decode_jpeg(img, channels=3)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_45": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.isrand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.to_float(tf.random_uniform((), 256, 481, dtype=tf.int32))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 368.0",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_51": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.isrand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.random_crop(img, [224, 224, 3])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : cent_crop(img, [224, 224])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_54": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.isrand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.image.random_flip_left_right(img)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_58": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.isrand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : rand_color(img)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : img",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_6": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(img, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(img, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, scale)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.random_crop(img, [224, 224, 3]), lambda : cent_crop(img, [224, 224]))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.image.random_flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : rand_color(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "decode_raw_39": {
                "input_bytes": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(img, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(img, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, scale)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.random_crop(img, [224, 224, 3]), lambda : cent_crop(img, [224, 224]))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.image.random_flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : rand_color(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_40": {
                "x": {
                    "value": "code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(img, tf.uint8)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "137",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_57": {
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(img, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(img, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, scale)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.random_crop(img, [224, 224, 3]), lambda : cent_crop(img, [224, 224]))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.image.random_flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : rand_color(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "decode_png_41": {
                "contents": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(img, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(img, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, scale)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.random_crop(img, [224, 224, 3]), lambda : cent_crop(img, [224, 224]))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.image.random_flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : rand_color(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "decode_jpeg_42": {
                "contents": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(img, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(img, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, scale)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.random_crop(img, [224, 224, 3]), lambda : cent_crop(img, [224, 224]))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.image.random_flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : rand_color(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_46": {
                "x": {
                    "value": "tf.random_uniform((), 256, 481, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_crop_52": {
                "value": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(img, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(img, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, scale)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.random_crop(img, [224, 224, 3]), lambda : cent_crop(img, [224, 224]))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.image.random_flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : rand_color(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[224, 224, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_55": {
                "image": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(img, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(img, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.read_file(self.fns[i])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(code, 137), lambda : tf.image.decode_png(img, channels=3), lambda : tf.image.decode_jpeg(img, channels=3))",
                            "Call"
                        ],
                        [
                            "rsz_img(img, scale)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.random_crop(img, [224, 224, 3]), lambda : cent_crop(img, [224, 224]))",
                            "Call"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : tf.image.random_flip_left_right(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.to_float(img) / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.cond(self.isrand, lambda : rand_color(img), lambda : img)",
                            "Call"
                        ],
                        [
                            "tf.stack(imgs, 0)",
                            "Call"
                        ],
                        [
                            "(img - [0.485, 0.456, 0.406]) / [0.229, 0.224, 0.225]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}