{
    "training/BertBaselineTraining.py": {
        "sklearn": {
            "accuracy_score_127": {
                "y_true": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.argmax(out, dim=1).detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, torch.argmax(out, dim=1).detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_score_127": {
                "y_true": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.argmax(out, dim=1).detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, torch.argmax(out, dim=1).detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_score_128": {
                "y_true": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.argmax(out, dim=1).detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, torch.argmax(out, dim=1).detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_128": {
                "y_true": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.argmax(out, dim=1).detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, torch.argmax(out, dim=1).detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "ConcatDataset_160": {
                "variable": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(highlighted_train_set, non_highlighted_train_set)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Subset_162": {
                "variable": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_train_set, non_highlighted_train_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_split",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_172": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(Path(f'../data/Spouse/', f'Spouse_test/processed/'))",
                            "Call"
                        ],
                        [
                            "str(Path(f'../data/hatespeech/', f'hatespeech_test/processed/'))",
                            "Call"
                        ],
                        [
                            "str(Path(f'../data/MovieReview/', f'moviereview_test/processed/'))",
                            "Call"
                        ],
                        [
                            "dataset_class(test_set_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Subset_167": {
                "variable": {
                    "value": "unlabelled_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_train_set, non_highlighted_train_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "validation_split + unlabelled_split",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Subset_169": {
                "variable": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_train_set, non_highlighted_train_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "validation_split",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Subset_170": {
                "variable": {
                    "value": "unlabelled_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_train_set, non_highlighted_train_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "unlabelled_split",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_287": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "best_params['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "deepcopy({'learning_rate': learning_rate, 'train_split': train_split, 'valid_split': validation_split, 'weight_decay': weight_decay, 'epochs': num_epochs, 'error_base': hpb, 'tokens_dropout': t_d, 'hidden_units': hidden})",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "best_params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "deepcopy({'learning_rate': learning_rate, 'train_split': train_split, 'valid_split': validation_split, 'weight_decay': weight_decay, 'epochs': num_epochs, 'error_base': hpb, 'tokens_dropout': t_d, 'hidden_units': hidden})",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_289": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=best_params['learning_rate'], weight_decay=best_params['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_332": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ],
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "torch.argmax(out, dim=1).long() == targets.long()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "argmax_111": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_113": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_64": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_216": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Subset(all_train_dataset, train_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_218": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(validation_set_path)",
                            "Call"
                        ],
                        [
                            "Subset(all_train_dataset, validation_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_235": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.01, 0.001]",
                            "List"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.01, 0.0001]",
                            "List"
                        ]
                    ]
                }
            },
            "StepLR_237": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=best_params['learning_rate'], weight_decay=best_params['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "training/BertFinetuneTraining.py": {
        "sklearn": {
            "accuracy_score_118": {
                "y_true": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.argmax(out, dim=1).detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, torch.argmax(out, dim=1).detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_score_118": {
                "y_true": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.argmax(out, dim=1).detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, torch.argmax(out, dim=1).detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_score_119": {
                "y_true": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.argmax(out, dim=1).detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, torch.argmax(out, dim=1).detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_119": {
                "y_true": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.argmax(out, dim=1).detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, torch.argmax(out, dim=1).detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "ConcatDataset_139": {
                "variable": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(highlighted_train_set, non_highlighted_train_set)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Subset_141": {
                "variable": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_train_set, non_highlighted_train_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_split",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Subset_146": {
                "variable": {
                    "value": "unlabelled_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_train_set, non_highlighted_train_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "validation_split + unlabelled_split",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Subset_148": {
                "variable": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_train_set, non_highlighted_train_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "validation_split",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Subset_149": {
                "variable": {
                    "value": "unlabelled_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_train_set, non_highlighted_train_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "unlabelled_split",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_243": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Subset(all_train_dataset, train_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_sizes",
                            "variable"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_245": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(validation_set_path)",
                            "Call"
                        ],
                        [
                            "Subset(all_train_dataset, validation_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_sizes",
                            "variable"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_247": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(Path(f'../data/Spouse/Spouse_FineTune/', f'Spouse_test/processed/'))",
                            "Call"
                        ],
                        [
                            "dataset_class(test_set_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_sizes",
                            "variable"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_252": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "best_params['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "deepcopy({'learning_rate': learning_rate, 'train_split': train_split, 'valid_split': validation_split, 'batch_size': batch_size, 'epochs': num_epochs})",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_254": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=best_params['learning_rate'], weight_decay=0.0)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_304": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ],
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_101": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_179": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Subset(all_train_dataset, train_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_sizes",
                            "variable"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(validation_set_path)",
                            "Call"
                        ],
                        [
                            "Subset(all_train_dataset, validation_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_sizes",
                            "variable"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_183": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(Path(f'../data/Spouse/Spouse_FineTune/', f'Spouse_test/processed/'))",
                            "Call"
                        ],
                        [
                            "dataset_class(test_set_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_sizes",
                            "variable"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_187": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2e-05, 3e-05, 5e-05]",
                            "List"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_189": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=best_params['learning_rate'], weight_decay=0.0)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=0.0)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_cache_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_103": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "training/NGramLogRegTraining.py": {
        "sklearn": {
            "accuracy_score_117": {
                "y_true": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.argmax(out, dim=1).detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, torch.argmax(out, dim=1).detach().cpu().numpy()), axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, out.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_score_117": {
                "y_true": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.argmax(out, dim=1).detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, torch.argmax(out, dim=1).detach().cpu().numpy()), axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, out.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_score_118": {
                "y_true": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.argmax(out, dim=1).detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, torch.argmax(out, dim=1).detach().cpu().numpy()), axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, out.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_118": {
                "y_true": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((all_targets, targets.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.argmax(out, dim=1).detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, torch.argmax(out, dim=1).detach().cpu().numpy()), axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "out.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((outs, out.detach().cpu().numpy()), axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "ConcatDataset_175": {
                "variable": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(highlighted_train_set, non_highlighted_train_set)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Subset_177": {
                "variable": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_train_set, non_highlighted_train_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_split",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_187": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(Path(f'../data/hatespeech/', 'hatespeech_ngrams_test/processed'))",
                            "Call"
                        ],
                        [
                            "dataset_class(test_set_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Subset_182": {
                "variable": {
                    "value": "unlabelled_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_train_set, non_highlighted_train_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "validation_split + unlabelled_split",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Subset_184": {
                "variable": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_train_set, non_highlighted_train_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "validation_split",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Subset_185": {
                "variable": {
                    "value": "unlabelled_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_train_set, non_highlighted_train_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "unlabelled_split",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_250": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "best_params['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "deepcopy({'learning_rate': learning_rate, 'train_split': train_split, 'valid_split': validation_split, 'weight_decay': weight_decay, 'epochs': num_epochs})",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "best_params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "deepcopy({'learning_rate': learning_rate, 'train_split': train_split, 'valid_split': validation_split, 'weight_decay': weight_decay, 'epochs': num_epochs})",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_252": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=best_params['learning_rate'], weight_decay=best_params['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_293": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ],
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "torch.argmax(out, dim=1).long() == targets.long()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "argmax_101": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_206": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Subset(all_train_dataset, train_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_208": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(validation_set_path)",
                            "Call"
                        ],
                        [
                            "Subset(all_train_dataset, validation_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_213": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.01, 0.001, 0.0001]",
                            "List"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.1, 0.01, 0.0001]",
                            "List"
                        ]
                    ]
                }
            },
            "StepLR_215": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=best_params['learning_rate'], weight_decay=best_params['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_103": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_59": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "training/NeuralPatternMatchingTraining.py": {
        "sklearn": {
            "precision_score_458": {
                "y_true": {
                    "value": "all_targets_valid_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(all_targets_valid)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_vl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_aggregator.predict(Ls_valid)",
                            "Call"
                        ],
                        [
                            "Ls_valid[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "recall_score_459": {
                "y_true": {
                    "value": "all_targets_valid_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(all_targets_valid)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_vl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_aggregator.predict(Ls_valid)",
                            "Call"
                        ],
                        [
                            "Ls_valid[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "accuracy_score_460": {
                "y_true": {
                    "value": "all_targets_valid_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(all_targets_valid)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_vl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_aggregator.predict(Ls_valid)",
                            "Call"
                        ],
                        [
                            "Ls_valid[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "f1_score_461": {
                "y_true": {
                    "value": "all_targets_valid_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(all_targets_valid)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_vl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_aggregator.predict(Ls_valid)",
                            "Call"
                        ],
                        [
                            "Ls_valid[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "precision_score_463": {
                "y_true": {
                    "value": "all_targets_test_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(all_targets_test)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_aggregator.predict(Ls_test)",
                            "Call"
                        ],
                        [
                            "Ls_test[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "recall_score_464": {
                "y_true": {
                    "value": "all_targets_test_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(all_targets_test)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_aggregator.predict(Ls_test)",
                            "Call"
                        ],
                        [
                            "Ls_test[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "accuracy_score_465": {
                "y_true": {
                    "value": "all_targets_test_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(all_targets_test)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_aggregator.predict(Ls_test)",
                            "Call"
                        ],
                        [
                            "Ls_test[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "f1_score_466": {
                "y_true": {
                    "value": "all_targets_test_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.copy(all_targets_test)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_aggregator.predict(Ls_test)",
                            "Call"
                        ],
                        [
                            "Ls_test[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "CrossEntropyLoss_37": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_99": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_228": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(train_set)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConcatDataset_290": {
                "variable": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(highlighted_set, non_highlighted_set)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Subset_292": {
                "variable": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_set, non_highlighted_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_split",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_253": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.01]",
                            "List"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.001, 0.0001]",
                            "List"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StepLR_256": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr, weight_decay=l2)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Subset_297": {
                "variable": {
                    "value": "unlabelled_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_set, non_highlighted_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "validation_split + unlabelled_split",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Subset_299": {
                "variable": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_set, non_highlighted_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "validation_split",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Subset_300": {
                "variable": {
                    "value": "unlabelled_set",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset((highlighted_set, non_highlighted_set))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "unlabelled_split",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_136": {
                "variable": {
                    "value": "l1_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.lin.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "predictions_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(predictions_mat, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_242": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Subset(all_train_dataset, train_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SingleRunWeightedRandomSampler(weights=p, num_samples=N, replacement=True)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_246": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Subset(all_train_dataset, train_split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_527": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ],
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_67": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outs, out.detach().cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_targets, targets.detach().cpu())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_233": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(N)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_193": {
                "obj": {
                    "value": "predictions_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "preds",
                            "variable"
                        ],
                        [
                            "torch.cat((predictions_mat, preds), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(save_path)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_374": {
                "variable": {
                    "value": "all_targets_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(results_folder, 'stored_results', f'all_targets_validation_{train_size}_size_{no_Lfs}_rules_bootstrap_{boostrap_split}.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_376": {
                "variable": {
                    "value": "all_targets_test",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(results_folder, 'stored_results', f'all_targets_test_{train_size}_size_{no_Lfs}_rules_bootstrap_{boostrap_split}.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_387": {
                "variable": {
                    "value": "train_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(results_folder, 'stored_results', f'predictions_{train_size}_size_train_{no_Lfs}_rules_bootstrap_{boostrap_split}.torch')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_396": {
                "variable": {
                    "value": "valid_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(results_folder, 'stored_results', f'predictions_{train_size}_size_validation_{no_Lfs}_rules_bootstrap_{boostrap_split}.torch')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_400": {
                "variable": {
                    "value": "test_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(results_folder, 'stored_results', f'predictions_{train_size}_size_test_{no_Lfs}_rules_bootstrap_{boostrap_split}.torch')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_344": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_355": {
                "variable": {
                    "value": "dataset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_392": {
                "variable": {
                    "value": "unlabelled_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(results_folder, 'stored_results', f'predictions_{train_size}_size_unlabelled_{no_Lfs}_rules_bootstrap_{boostrap_split}.torch')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_371": {
                "obj": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets.detach().cpu()",
                            "Call"
                        ],
                        [
                            "torch.cat((all_targets, targets.detach().cpu()), dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "targets",
                            "variable"
                        ],
                        [
                            "torch.cat((all_targets, targets), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "Path(results_folder, 'stored_results', f'all_targets_{dataset_type}_{train_size}_size_{no_Lfs}_rules_bootstrap_{boostrap_split}.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_366": {
                "variable": {
                    "value": "all_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_targets, targets)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "training/utils.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConcatDataset_70": {
                "variable": {
                    "value": "concatenated",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(highlighted_dataset, non_highlighted_dataset)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_25": {
                "variable": {
                    "value": "softmax_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions[no_elements * i:no_elements * (i + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "softmax_preds.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "Ls_set",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Ls_set, mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/BertBaselineDataset.py": {
        "torch": {
            "ones_92": {
                "variable": {
                    "value": "mask_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "embeddings.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_30": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_79": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_33": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_82": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "[idx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_25": {
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/BertFinetuneDataset.py": {
        "torch": {
            "load_32": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "[idx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_27": {
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/NREDataset.py": {
        "torch": {
            "ones_61": {
                "variable": {
                    "value": "mask_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "embeddings.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_119": {
                "variable": {
                    "value": "mask_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "embeddings.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_182": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example['tokens_embeddings']",
                            "Subscript"
                        ],
                        [
                            "example['tokens_embeddings']",
                            "Subscript"
                        ],
                        [
                            "example['tokens_embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "alex_chris_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_34": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_92": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_149": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_43": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "[idx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_101": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "[idx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_158": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "data": {
                    "value": "[idx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_29": {
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_87": {
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_144": {
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_38": {
                "*size": {
                    "value": "annotations.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_96": {
                "*size": {
                    "value": "annotations.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_153": {
                "*size": {
                    "value": "annotations.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_47": {
                "*size": {
                    "value": "annotations.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_105": {
                "*size": {
                    "value": "annotations.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_162": {
                "*size": {
                    "value": "annotations.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/NgramDataset.py": {
        "torch": {
            "load_28": {
                "variable": {
                    "value": "(example, target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_31": {
                "variable": {
                    "value": "(example, target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/SpouseBaselineDataset.py": {
        "torch": {
            "mul_81": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example['tokens_embeddings']",
                            "Subscript"
                        ],
                        [
                            "example['tokens_embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "both_present",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example['tokens_both_present']",
                            "Subscript"
                        ],
                        [
                            "example['tokens_both_present']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mul_126": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example['tokens_embeddings']",
                            "Subscript"
                        ],
                        [
                            "example['tokens_embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "alex_chris_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_31": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_71": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_109": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_34": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_112": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "data": {
                    "value": "[idx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_26": {
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_104": {
                "f": {
                    "value": "Path(self.folder, self.files[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/utils.py": {
        "torch": {
            "multinomial_97": {
                "variable": {
                    "value": "self.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "self.replacement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "batch_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_45": {
                "variable": {
                    "value": "batch_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ],
                        [
                            "src.new_full(out_size, fill_value)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_47": {
                "variable": {
                    "value": "batch_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_idxs, torch.full((batch[i].shape[0], 1), i, dtype=torch.int))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "[self.noisy_targets[idx]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_48": {
                "size": {
                    "value": "(batch[i].shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(1, len(batch))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/BertFinetune.py": {
        "torch": {
            "Linear_41": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/LogisticRegression.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/NPM.py": {
        "torch": {
            "mul_54": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_output.clone()",
                            "Call"
                        ],
                        [
                            "torch.mul(grad_input, sample_weight.unsqueeze(dim=1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sample_weight.unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.gating_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([gating_param])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.a_or",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "variable": {
                    "value": "self.two",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "self.prototypes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(num_prototypes, dim_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.no_logic_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_150": {
                "variable": {
                    "value": "(and_deltas, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_151": {
                "variable": {
                    "value": "(or_deltas, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "all_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(deltas, not_deltas, and_deltas.unsqueeze(1), or_deltas.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_191": {
                "variable": {
                    "value": "(and_deltas, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_192": {
                "variable": {
                    "value": "(or_deltas, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ],
                        [
                            "self._compute_delta(x, self.prototypes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "all_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(deltas, not_deltas, and_deltas.unsqueeze(1), or_deltas.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_260": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_279": {
                "variable": {
                    "value": "self.anchor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(input_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_282": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mm_288": {
                "variable": {
                    "value": "a_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(x, a_w)",
                            "Call"
                        ],
                        [
                            "x[dropout_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.anchor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_289": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(x, a_w)",
                            "Call"
                        ],
                        [
                            "x[dropout_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "a_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(x, self.anchor)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_307": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(input_size, hidden_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_343": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(input_size, hidden_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_400": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.no_logic_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "all_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(deltas, not_deltas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_440": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.no_logic_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_470": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.no_logic_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_478": {
                "variable": {
                    "value": "all_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(deltas,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_518": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.no_logic_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_527": {
                "variable": {
                    "value": "all_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(deltas, not_deltas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_39": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.pow(base, annotations.float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.highlights_pow_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([highlights_pow_base])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_139": {
                "input": {
                    "value": "self.gating_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "out - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_212": {
                "variable": {
                    "value": "more_than_one",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_215": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "torch.mul(src, more_than_one.float())",
                            "Call"
                        ],
                        [
                            "scatter_mean(x, batch_idx.long(), dim=0)",
                            "Call"
                        ],
                        [
                            "scatter_mean(x, batch_idx.long(), dim=0)",
                            "Call"
                        ],
                        [
                            "scatter_mean(x, batch_idx.long(), dim=0)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "torch.mul(src, more_than_one.float())",
                            "Call"
                        ],
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "torch.mul(src, more_than_one.float())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "more_than_one.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_350": {
                "variable": {
                    "value": "self.highlights_pow_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([highlights_pow_base])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_493": {
                "variable": {
                    "value": "more_than_one",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_496": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "torch.mul(src, more_than_one.float())",
                            "Call"
                        ],
                        [
                            "scatter_mean(x, batch_idx.long(), dim=0)",
                            "Call"
                        ],
                        [
                            "scatter_mean(x, batch_idx.long(), dim=0)",
                            "Call"
                        ],
                        [
                            "scatter_mean(x, batch_idx.long(), dim=0)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "torch.mul(src, more_than_one.float())",
                            "Call"
                        ],
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "torch.mul(src, more_than_one.float())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "more_than_one.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_539": {
                "variable": {
                    "value": "more_than_one",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_542": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "torch.mul(src, more_than_one.float())",
                            "Call"
                        ],
                        [
                            "scatter_mean(x, batch_idx.long(), dim=0)",
                            "Call"
                        ],
                        [
                            "scatter_mean(x, batch_idx.long(), dim=0)",
                            "Call"
                        ],
                        [
                            "scatter_mean(x, batch_idx.long(), dim=0)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "torch.mul(src, more_than_one.float())",
                            "Call"
                        ],
                        [
                            "self.lin(all_feats).squeeze()",
                            "Call"
                        ],
                        [
                            "WeightedIdentity.apply(src, annotations, self.highlights_pow_base)",
                            "Call"
                        ],
                        [
                            "torch.mul(src, more_than_one.float())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "more_than_one.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_26": {
                "input": {
                    "value": "torch.sum(annotations.float(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_28": {
                "input": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "torch.sum(annotations.float(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_39": {
                "input": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "annotations.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_93": {
                "*size": {
                    "value": "num_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cosine_similarity_110": {
                "x1": {
                    "value": "w_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "w.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "p_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "p.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_126": {
                "input": {
                    "value": "self.two",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "-2 * self.a_or",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "tmp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._or_auxiliary(deltas)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_279": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_308": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_310": {
                "in_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_312": {
                "in_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_322": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_344": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_346": {
                "in_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "annotations.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "annotations.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_122": {
                "x1": {
                    "value": "w_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "w.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "p_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "p.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parsers/Hatespeech/Hatespeech_Dataset_Builder.py": {
        "torch": {
            "load_116": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(dataset_path, example_filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sentence.input_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sentence.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_75": {
                "variable": {
                    "value": "all_encoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(all_encoder_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_100": {
                "obj": {
                    "value": "example_sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'target': target, 'sentences': [], 'highlighted': highlight}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "example_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(dataset_path, f'example_{example_id}.torch')",
                            "Call"
                        ],
                        [
                            "filename",
                            "variable"
                        ]
                    ]
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "tokens_annotations",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sentence['tokens_annotations'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "tokens_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sentence['tokens_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "sentence_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sentence['sentence_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_166": {
                "obj": {
                    "value": "processed_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'target': torch.tensor([target], dtype=torch.long), 'tokens': [], 'tokens_embeddings': None, 'sentence_embeddings': None, 'tokens_annotations': None}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "Path(store_path, f'{example_filename[:-6]}_processed.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "[target]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "processed_example[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(processed_example[key], val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_79": {
                "input": {
                    "value": "all_encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(all_encoder_layers)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parsers/Hatespeech/Hatespeech_Dataset_Fasttext_Builder.py": {
        "torch": {
            "load_103": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(dataset_path, example_filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "tokens_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[gensim_model[t] for t in tokens]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_86": {
                "obj": {
                    "value": "example_sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'target': target, 'sentences': [], 'highlighted': highlight}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "example_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(dataset_path, f'example_{example_id}.torch')",
                            "Call"
                        ],
                        [
                            "filename",
                            "variable"
                        ]
                    ]
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "tokens_annotations",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sentence['tokens_annotations'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_156": {
                "obj": {
                    "value": "processed_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'target': torch.tensor([target], dtype=torch.long), 'tokens': [], 'tokens_embeddings': None, 'sentence_embeddings': None, 'tokens_annotations': None}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "Path(store_path, f'{example_filename[:-6]}_processed.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "[target]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_72": {
                "input": {
                    "value": "tokens_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([gensim_model[t] for t in tokens])",
                            "Call"
                        ],
                        [
                            "sentence['tokens_embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "processed_example[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(processed_example[key], val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parsers/Hatespeech/Hatespeech_Ngram_Builder.py": {
        "torch": {
            "save_51": {
                "obj": {
                    "value": "(ngram_feats, target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(store_path, f'example_{example_id}_processed.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "parsers/Hatespeech/Hatespeech_Preprocess_Ngrams.py": {
        "torch": {
            "zeros_41": {
                "variable": {
                    "value": "ngram_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "no_ngrams + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parsers/MovieReview/MovieReview_Dataset_Builder.py": {
        "torch": {
            "load_117": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(dataset_path, example_filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sentence.input_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sentence.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_67": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "all_encoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(all_encoder_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_101": {
                "obj": {
                    "value": "example_sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'target': target, 'sentences': []}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "example_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(dataset_path, f'example_{example_id}.torch')",
                            "Call"
                        ],
                        [
                            "filename",
                            "variable"
                        ]
                    ]
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "tokens_annotations",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sentence['tokens_annotations'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "tokens_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sentence['tokens_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "sentence_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sentence['sentence_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "processed_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'target': torch.tensor([target], dtype=torch.long), 'tokens': [], 'tokens_embeddings': None, 'sentence_embeddings': None, 'tokens_annotations': None}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "Path(store_path, f'{example_filename[:-6]}_processed.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "[target]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "processed_example[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(processed_example[key], val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_80": {
                "input": {
                    "value": "all_encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(all_encoder_layers)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parsers/MovieReview/MovieReview_Finetune_Dataset_Builder.py": {
        "torch": {
            "tensor_66": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sentence.input_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sentence.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_67": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_101": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(dataset_path, example_filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "example_sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'target': target, 'sentences': []}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "example_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(dataset_path, f'example_{example_id}.torch')",
                            "Call"
                        ],
                        [
                            "filename",
                            "variable"
                        ]
                    ]
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "tokens_annotations",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sentence['tokens_annotations'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "processed_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'target': torch.tensor([target], dtype=torch.long), 'tokens': [], 'input_ids': None, 'input_mask': None, 'tokens_annotations': None}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "Path(store_path, f'{example_filename[:-6]}_processed.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "data": {
                    "value": "[target]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "processed_example[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(processed_example[key], val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parsers/Spouse/Spouse_Dataset_Builder.py": {
        "torch": {
            "load_119": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(dataset_path, example_filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "tokens_annotations",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sentence['tokens_annotations'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "tokens_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sentence['tokens_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "sentence_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sentence['sentence_embeddings']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_146": {
                "variable": {
                    "value": "alex_chris_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tokens_embeddings.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_199": {
                "obj": {
                    "value": "processed_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'target': torch.tensor([target], dtype=torch.long), 'tokens': [], 'tokens_embeddings': None, 'sentence_embeddings': None, 'alex_chris_mask': None, 'tokens_annotations': None, 'tokens_both_present': None}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "Path(store_path, f'{example_filename[:-6]}_processed.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sentence.input_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sentence.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_67": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "all_encoder_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(all_encoder_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_103": {
                "obj": {
                    "value": "example_sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'target': target, 'sentences': [], 'highlighted': highlight}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "example_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(dataset_path, f'example_{example_id}.torch')",
                            "Call"
                        ],
                        [
                            "filename",
                            "variable"
                        ]
                    ]
                }
            },
            "tensor_122": {
                "data": {
                    "value": "[target]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_160": {
                "variable": {
                    "value": "tokens_both_present",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tokens_embeddings.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "variable": {
                    "value": "tokens_both_present",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tokens_embeddings.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "processed_example[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(processed_example[key], val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_80": {
                "input": {
                    "value": "all_encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(all_encoder_layers)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parsers/Spouse/Spouse_Finetune_Dataset_Builder.py": {
        "torch": {
            "tensor_64": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sentence.input_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_64": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sentence.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_100": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(dataset_path, example_filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_83": {
                "obj": {
                    "value": "example_sentences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'target': target, 'sentences': [], 'highlighted': highlight}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "example_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Path(dataset_path, f'example_{example_id}.torch')",
                            "Call"
                        ],
                        [
                            "filename",
                            "variable"
                        ]
                    ]
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "tokens_annotations",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sentence['tokens_annotations'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "processed_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'target': torch.tensor([target], dtype=torch.long), 'tokens': [], 'input_ids': None, 'input_mask': None, 'tokens_annotations': None}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "Path(store_path, f'{example_filename[:-6]}_processed.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "data": {
                    "value": "[target]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "processed_example[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(processed_example[key], val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/bert.py": {
        "torch": {
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}