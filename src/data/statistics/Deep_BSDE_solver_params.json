{
    "cir_bond.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_9": {
                "*size": {
                    "value": "dim_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_19": {
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_19": {
                "input": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "dim_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_19": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "multi_cir_bond.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "rand_14": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_15": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_16": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_9": {
                "*size": {
                    "value": "dim_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_32": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_28": {
                "input": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "dim_y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_24": {
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_24": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_28": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "solver.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "equation.dim_x + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "equation.dim_y * equation.dim_d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.y_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(equation.dim_y, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_61": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, torch.ones(x.size()[0], 1, device=device) * delta_t * i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_29": {
                "*size": {
                    "value": "equation.dim_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_42": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.equation.dim_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_44": {
                "*size": {
                    "value": "W.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.equation.dim_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "W.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.equation.dim_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_50": {
                "input": {
                    "value": "self.equation.sigma(delta_t * i, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W[:, :, i].reshape(-1, self.equation.dim_d, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_50": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.equation.dim_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "phi(u)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W[:, :, i].reshape(-1, self.equation.dim_d, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_51": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.equation.dim_y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_47": {
                "*size": {
                    "value": "x.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}