{
    "run_tocca.py": {
        "ParameterSampler_168": {
            "variable": {
                "value": "param_sampler",
                "possible_values": []
            },
            "param_distributions": {
                "value": "params",
                "possible_values": [
                    "{'layers': layers, 'layer_size': layer_size, 'l2dist_weight': l2dist_weight, 'weight_decay': weight_decay, 'momentum': momentum, 'learning_rate': learning_rate, 'batch_size': batch_size}",
                    "{'layers': layers, 'layer_size': layer_size, 'l2dist_weight': l2dist_weight, 'weight_decay': weight_decay, 'momentum': momentum, 'learning_rate': learning_rate, 'batch_size': batch_size}",
                    "{'C': [float(2 ** e) for e in range(-10, 5)]}"
                ]
            },
            "n_iter": {
                "value": "param_search",
                "possible_values": [
                    "args.param_search",
                    "int(param_search)",
                    "1"
                ]
            }
        },
        "LinearSVC_41": {
            "variable": {
                "value": "svm",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "GridSearchCV_43": {
            "variable": {
                "value": "grid_search",
                "possible_values": []
            },
            "estimator": {
                "value": "svm",
                "possible_values": [
                    "sklearn.svm.LinearSVC()",
                    "grid_search.best_estimator_"
                ]
            },
            "param_grid": {
                "value": "params",
                "possible_values": [
                    "{'layers': layers, 'layer_size': layer_size, 'l2dist_weight': l2dist_weight, 'weight_decay': weight_decay, 'momentum': momentum, 'learning_rate': learning_rate, 'batch_size': batch_size}",
                    "{'layers': layers, 'layer_size': layer_size, 'l2dist_weight': l2dist_weight, 'weight_decay': weight_decay, 'momentum': momentum, 'learning_rate': learning_rate, 'batch_size': batch_size}",
                    "{'C': [float(2 ** e) for e in range(-10, 5)]}"
                ]
            },
            "scoring": {
                "value": "accuracy",
                "possible_values": []
            },
            "cv": {
                "value": "5",
                "possible_values": []
            },
            "refit": {
                "value": "True",
                "possible_values": []
            },
            "verbose": {
                "value": "1",
                "possible_values": []
            },
            "n_jobs": {
                "value": "4",
                "possible_values": []
            }
        }
    }
}