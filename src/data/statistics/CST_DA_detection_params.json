{
    "cityscapes_pretrain.py": {
        "torch": {
            "DataLoader_200": {
                "variable": {
                    "value": "dataloader_cityscapes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_cityscapes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb_cityscapes, ratio_list_cityscapes, ratio_index_cityscapes, args.batch_size, imdb_cityscapes.num_classes, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_batch_cityscapes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sampler(train_size_cityscapes, args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_130": {
                "variable": {
                    "value": "self.range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_248": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataParallel_259": {
                "variable": {
                    "value": "fasterRCNN",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "fasterRCNN",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vgg16(imdb_cityscapes.classes, pretrained=True, class_agnostic=args.class_agnostic)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(fasterRCNN)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_133": {
                "variable": {
                    "value": "self.leftover",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_per_batch * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "self.rand_num_view",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.rand_num_view, self.leftover)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_251": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_137": {
                "n": {
                    "value": "self.num_per_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_322": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_329": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cityscapes_pretrain_test_on_foggy.py": {
        "torch": {
            "load_165": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'da_detection_pretrained_cityscapes_{}_{}_{}.pth'.format(args.checksession, args.checkepoch, args.checkpoint))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, 1, imdb.num_classes, training=False, normalize=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_264": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.tile(boxes, (1, scores.shape[2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_278": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[:, j] > thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sort_282": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores[:, j][inds]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "cls_dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_boxes, cls_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cityscapes_to_foggycityscapes_da.py": {
        "torch": {
            "DataLoader_217": {
                "variable": {
                    "value": "dataloader_cityscapes",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_cityscapes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb_cityscapes, ratio_list_cityscapes, ratio_index_cityscapes, args.batch_size, imdb_cityscapes.num_classes, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_batch_cityscapes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sampler(train_size_cityscapes, args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_225": {
                "variable": {
                    "value": "dataloader_cityscapes_pl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_cityscape_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb_cityscapes_pl, ratio_list_cityscapes_pl, ratio_index_cityscapes_pl, args.batch_size, imdb_cityscapes_pl.num_classes, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_batch_cityscapes_pl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sampler(train_size_cityscapes_pl, args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_358": {
                "variable": {
                    "value": "backbone_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "backbone_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "backbone_params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_134": {
                "variable": {
                    "value": "self.range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_182": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_184": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_185": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_268": {
                "variable": {
                    "value": "pretrained_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrain_load_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(pretrain_input_dir, 'da_detection_pretrained_cityscapes_{}_{}_{}.pth'.format(1, 10, 2964))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_340": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataParallel_365": {
                "variable": {
                    "value": "fasterRCNN",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "fasterRCNN",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vgg16(imdb_cityscapes.classes, pretrained=True, class_agnostic=args.class_agnostic)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(fasterRCNN)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_137": {
                "variable": {
                    "value": "self.leftover",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_per_batch * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "self.rand_num_view",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.rand_num_view, self.leftover)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_343": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_344": {
                "variable": {
                    "value": "optimizer_fe",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "RCNN_base_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "RCNN_base_params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_345": {
                "variable": {
                    "value": "optimizer_cl",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "RCNN_RPN_CLS_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "RCNN_RPN_CLS_params + [{'params': [value], 'lr': lr * 1 / 2, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_346": {
                "variable": {
                    "value": "optimizer_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "RCNN_CLS_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "RCNN_CLS_params + [{'params': [value], 'lr': 0.001, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_347": {
                "variable": {
                    "value": "optimizer_rpn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "RCNN_RPN_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "RCNN_RPN_params + [{'params': [value], 'lr': 0.001, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_141": {
                "n": {
                    "value": "self.num_per_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_489": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_496": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cityscapes_to_foggycityscapes_da_test.py": {
        "torch": {
            "load_158": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'fasterRCNN_da_cityscapes_to_foggycityscapes_{}_{}_{}.pth'.format(args.checksession, args.checkepoch, args.checkpoint))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_207": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, 1, imdb.num_classes, training=False, normalize=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_252": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.tile(boxes, (1, scores.shape[2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_266": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[:, j] > thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sort_270": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores[:, j][inds]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "cls_dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_boxes, cls_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "load_191": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'faster_rcnn_{}_{}_{}.pth'.format(args.checksession, args.checkepoch, args.checkpoint))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_193": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'faster_rcnn_{}_{}_{}.pth'.format(args.checksession, args.checkepoch, args.checkpoint))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_278": {
                "variable": {
                    "value": "im_data_pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_blob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "blobs",
                            "Name"
                        ]
                    ]
                }
            },
            "from_numpy_280": {
                "variable": {
                    "value": "im_info_pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_info_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([[im_blob.shape[1], im_blob.shape[2], im_scales[0]]], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_325": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.tile(boxes, (1, scores.shape[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_338": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[:, j] > thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sort_342": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores[:, j][inds]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "cls_dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_boxes, cls_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "global_discriminator.py": {
        "torch": {
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_91": {
                "variable": {
                    "value": "cls_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_92": {
                "input": {
                    "value": "roi_score[:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_82": {
                "input": {
                    "value": "cls_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_82": {
                "input": {
                    "value": "cls_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/faster_rcnn/faster_rcnn.py": {
        "torch": {
            "softmax_152": {
                "variable": {
                    "value": "cls_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_boxes[gt_boxes[:, :, -1] != 0], gt_boxes[gt_boxes[:, :, -1] == 0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_130": {
                "variable": {
                    "value": "grid_yx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_xy.data[:, :, :, 1], grid_xy.data[:, :, :, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_147": {
                "variable": {
                    "value": "bbox_pred_select",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred_view",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_pred.view(bbox_pred.size(0), int(bbox_pred.size(1) / 4), 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rois_label.view(rois_label.size(0), 1, 1).expand(rois_label.size(0), 1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_133": {
                "variable": {
                    "value": "pooled_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pooled_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.RCNN_roi_crop(base_feat, Variable(grid_yx).detach())",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(pooled_feat, 2, 2)",
                            "Call"
                        ],
                        [
                            "self._head_to_tail(pooled_feat)",
                            "Call"
                        ],
                        [
                            "self.RCNN_roi_align(base_feat, rois.view(-1, 5))",
                            "Call"
                        ],
                        [
                            "self.RCNN_roi_pool(base_feat, rois.view(-1, 5))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_165": {
                "variable": {
                    "value": "RCNN_loss_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rois_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.FloatTensor([1, 1, 1, 0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_167": {
                "variable": {
                    "value": "RCNN_loss_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.RCNN_cls_score(pooled_feat)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rois_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Variable(rois_label.view(-1).long())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/faster_rcnn/resnet.py": {
        "torch": {
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_113": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_120": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_238": {
                "variable": {
                    "value": "self.RCNN_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_241": {
                "variable": {
                    "value": "self.RCNN_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.layer4",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_243": {
                "variable": {
                    "value": "self.RCNN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_234": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_245": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_247": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.n_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_137": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/faster_rcnn/vgg16.py": {
        "torch": {
            "Sequential_35": {
                "variable": {
                    "value": "vgg.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(vgg.classifier._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.RCNN_base1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*base1_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.RCNN_base2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*base2_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.RCNN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_32": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.RCNN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * self.n_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/nms/_ext/nms/__init__.py": {
        "torch": {}
    },
    "lib/model/nms/build.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/nms/nms_cpu.py": {
        "torch": {}
    },
    "lib/model/nms/nms_gpu.py": {
        "torch": {}
    },
    "lib/model/nms/nms_wrapper.py": {
        "torch": {
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_align/_ext/roi_align/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_align/build.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_align/functions/roi_align.py": {
        "torch": {}
    },
    "lib/model/roi_align/modules/roi_align.py": {
        "torch": {
            "avg_pool2d_29": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_42": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/_ext/crop_resize/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_crop/_ext/roi_crop/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_crop/build.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/functions/crop_resize.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input2.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "input1.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input2.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "input2.size()[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "grad_input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "grad_input2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "current_device_16": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/functions/gridgen.py": {
        "torch": {
            "from_numpy_18": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "baddbmm_45": {
                "variable": {
                    "value": "grad_input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_input1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.input1.new(self.input1.size()).zero_()",
                            "Call"
                        ],
                        [
                            "torch.baddbmm(grad_input1, torch.transpose(grad_output.view(-1, self.height * self.width, 2), 1, 2), self.batchgrid.view(-1, self.height * self.width, 3))",
                            "Call"
                        ]
                    ]
                },
                "batch1": {
                    "value": "torch.transpose(grad_output.view(-1, self.height * self.width, 2), 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch2": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_33": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(input1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_45": {
                "input": {
                    "value": "grad_output.view(-1, self.height * self.width, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_33": {
                "input": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/functions/roi_crop.py": {
        "torch": {}
    },
    "lib/model/roi_crop/modules/gridgen.py": {
        "torch": {
            "from_numpy_60": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_73": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(input1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output0, output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_131": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_132": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sum(x, 3), torch.sum(y, 3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_158": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_177": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 0:4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_178": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 4:8])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_179": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 8:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_209": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_216": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_218": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_227": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_243": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 0:4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_244": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 4:8])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_245": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 8:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[:, :, :, 0:1], output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_276": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_283": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_285": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_294": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[:, :, :, 0:1], output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_350": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_357": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_359": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_368": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_375": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan_101": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (self.batchgrid[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_156": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_156": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_157": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_177": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_178": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 4:8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_179": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 8:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_181": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_186": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_214": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_214": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_215": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_243": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_244": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 4:8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_245": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 8:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_247": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_252": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_259": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_281": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_281": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_282": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_313": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_318": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_329": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_355": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_355": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_356": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_399": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_46": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tan_101": {
                "input": {
                    "value": "np.pi / 2.0 * (self.batchgrid[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_134": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(self.batchgrid, input1[:, :, :, 3:6])",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(self.batchgrid3d, input1[:, :, :, 4:8]), 3)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(self.batchgrid3d, input1[:, :, :, 4:8]), 3)",
                            "Call"
                        ],
                        [
                            "self.batchgrid3d[:, :, :, 1:2] * depth + trans1.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1)",
                            "BinOp"
                        ],
                        [
                            "x_ * torch.sin(rotate_z) + y_ * torch.cos(rotate_z)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "acos_184": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_250": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tan_259": {
                "input": {
                    "value": "np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_316": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tan_329": {
                "input": {
                    "value": "np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_395": {
                "input": {
                    "value": "rotate_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_395": {
                "input": {
                    "value": "rotate_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_396": {
                "input": {
                    "value": "rotate_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_396": {
                "input": {
                    "value": "rotate_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "acos_402": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_406": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_408": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_73": {
                "input": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/modules/roi_crop.py": {
        "torch": {}
    },
    "lib/model/roi_pooling/_ext/roi_pooling/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_pooling/build.py": {
        "torch": {
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_pooling/functions/roi_pool.py": {
        "torch": {}
    },
    "lib/model/roi_pooling/modules/roi_pool.py": {
        "torch": {}
    },
    "lib/model/rpn/anchor_target_layer.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "generate_anchors(scales=np.array(anchor_scales), ratios=np.array(ratios))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "shifts",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_91": {
                "variable": {
                    "value": "inds_inside",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ],
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_103": {
                "variable": {
                    "value": "(max_overlaps, argmax_overlaps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ],
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_104": {
                "variable": {
                    "value": "(gt_max_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ],
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_110": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_126": {
                "variable": {
                    "value": "sum_fg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_127": {
                "variable": {
                    "value": "sum_bg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_214": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_217": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_240": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "generate_anchors(scales=np.array(anchor_scales), ratios=np.array(ratios))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_272": {
                "variable": {
                    "value": "shifts",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_290": {
                "variable": {
                    "value": "inds_inside",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ],
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_302": {
                "variable": {
                    "value": "(max_overlaps, argmax_overlaps)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ],
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_303": {
                "variable": {
                    "value": "(gt_max_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ],
                        [
                            "bbox_overlaps_batch(anchors, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_330": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_347": {
                "variable": {
                    "value": "sum_fg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_348": {
                "variable": {
                    "value": "sum_bg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(labels == 0).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_162": {
                "variable": {
                    "value": "num_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_316": {
                "variable": {
                    "value": "(max_overlaps_gf_boxes, argmax_overlaps_gf_boxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps_gf_boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gf_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_317": {
                "variable": {
                    "value": "(gf_max_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps_gf_boxes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(anchors, gf_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_383": {
                "variable": {
                    "value": "num_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_112": {
                "input": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ],
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_132": {
                "variable": {
                    "value": "fg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_146": {
                "variable": {
                    "value": "bg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(bg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_153": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt_boxes.size(0)",
                            "Call"
                        ],
                        [
                            "gt_boxes.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_332": {
                "input": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ],
                        [
                            "(all_anchors[:, 0] >= -self._allowed_border) & (all_anchors[:, 1] >= -self._allowed_border) & (all_anchors[:, 2] < long(im_info[0][1]) + self._allowed_border) & (all_anchors[:, 3] < long(im_info[0][0]) + self._allowed_border)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(overlaps.eq(gt_max_overlaps.view(batch_size, 1, -1).expand_as(overlaps)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_353": {
                "variable": {
                    "value": "fg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_358": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_367": {
                "variable": {
                    "value": "bg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[i] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_370": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(bg_inds.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_374": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt_boxes.size(0)",
                            "Call"
                        ],
                        [
                            "gt_boxes.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_142": {
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_363": {
                "input": {
                    "value": "(labels == 1).int()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/rpn/bbox_transform.py": {
        "torch": {
            "log_28": {
                "variable": {
                    "value": "targets_dw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_29": {
                "variable": {
                    "value": "targets_dh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_31": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_72": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_51": {
                "variable": {
                    "value": "targets_dw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths.view(1, -1).expand_as(gt_widths)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_52": {
                "variable": {
                    "value": "targets_dh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights.view(1, -1).expand_as(gt_heights)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_67": {
                "variable": {
                    "value": "targets_dw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_68": {
                "variable": {
                    "value": "targets_dh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_90": {
                "input": {
                    "value": "dw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deltas[:, :, 2::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_91": {
                "input": {
                    "value": "dh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deltas[:, :, 3::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_155": {
                "input": {
                    "value": "boxes[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_156": {
                "input": {
                    "value": "boxes[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_159": {
                "input": {
                    "value": "boxes[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_160": {
                "input": {
                    "value": "boxes[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_201": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_202": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_205": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_206": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_240": {
                "input": {
                    "value": "boxes[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_241": {
                "input": {
                    "value": "boxes[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_244": {
                "input": {
                    "value": "boxes[:, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_245": {
                "input": {
                    "value": "boxes[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/rpn/proposal_layer.py": {
        "torch": {
            "from_numpy_38": {
                "variable": {
                    "value": "self._anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "generate_anchors(scales=np.array(scales), ratios=np.array(ratios))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "shifts",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((shift_x.ravel(), shift_y.ravel(), shift_x.ravel(), shift_y.ravel())).transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_131": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_160": {
                "tensors": {
                    "value": "(proposals_single, scores_single)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/rpn/proposal_target_layer_cascade.py": {
        "torch": {
            "cat_43": {
                "variable": {
                    "value": "all_rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_rois, gt_boxes_append]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_124": {
                "variable": {
                    "value": "(max_overlaps, gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_batch(all_rois, gt_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_87": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clss[b] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_142": {
                "variable": {
                    "value": "fg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_overlaps[i] >= cfg.TRAIN.FG_THRESH",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_146": {
                "variable": {
                    "value": "bg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(max_overlaps[i] < cfg.TRAIN.BG_THRESH_HI) & (max_overlaps[i] >= cfg.TRAIN.BG_THRESH_LO)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "keep_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fg_inds, bg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_130": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels_batch.size(0)",
                            "Call"
                        ],
                        [
                            "ex_rois.size(0)",
                            "Call"
                        ],
                        [
                            "overlaps.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_num_rois)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_175": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(bg_rois_per_this_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(rois_per_image) * bg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(gt_boxes).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/rpn/proposal_target_layer_cascade_target.py": {
        "torch": {
            "nonzero_84": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clss[b] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "arange_202": {
                "variable": {
                    "value": "keep_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "target_roi_num_to_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                }
            },
            "arange_200": {
                "start": {
                    "value": "len_all_roi - 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "len_all_roi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_rois.size(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/rpn/rpn.py": {
        "torch": {
            "Conv2d_29": {
                "variable": {
                    "value": "self.RPN_Conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.din",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.RPN_cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nc_score_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.RPN_bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nc_bbox_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "rpn_conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.RPN_Conv(base_feat)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "variable": {
                    "value": "rpn_cls_prob_reshape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score_reshape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.reshape(rpn_cls_score, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_148": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score.view(-1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(rpn_label.view(-1).ne(-1).nonzero().view(-1))",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.view(-1).ne(-1).nonzero().view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_149": {
                "variable": {
                    "value": "rpn_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_153": {
                "variable": {
                    "value": "rpn_anchor_max_overlaps_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_anchor_max_overlaps_cls.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_157": {
                "variable": {
                    "value": "rpn_anchor_gt_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_anchor_gt_score.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_161": {
                "variable": {
                    "value": "rpn_anchor_gf_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_anchor_gf_score.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_184": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_96": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score.view(-1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(rpn_label.view(-1).ne(-1).nonzero().view(-1))",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.view(-1).ne(-1).nonzero().view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_97": {
                "variable": {
                    "value": "rpn_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rpn_keep.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_105": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_180": {
                "variable": {
                    "value": "self.rpn_loss_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.RPN_cls_score(rpn_conv1)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score_reshape.permute(0, 2, 3, 1).contiguous().view(batch_size, -1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_cls_score.view(-1, 2), 0, rpn_keep)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score_reshape.permute(0, 2, 3, 1).contiguous().view(batch_size, -1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_cls_score.view(-1, 2), 0, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rpn_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rpn_data[0].view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_label.view(-1), 0, rpn_keep.data)",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.long())",
                            "Call"
                        ],
                        [
                            "rpn_data[0].view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_label.view(-1), 0, rpn_keep.data)",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "self.rpn_loss_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "base_feat.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_101": {
                "variable": {
                    "value": "self.rpn_loss_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_cls_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.RPN_cls_score(rpn_conv1)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score_reshape.permute(0, 2, 3, 1).contiguous().view(batch_size, -1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_cls_score.view(-1, 2), 0, rpn_keep)",
                            "Call"
                        ],
                        [
                            "rpn_cls_score_reshape.permute(0, 2, 3, 1).contiguous().view(batch_size, -1, 2)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_cls_score.view(-1, 2), 0, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rpn_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rpn_data[0].view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_label.view(-1), 0, rpn_keep.data)",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.long())",
                            "Call"
                        ],
                        [
                            "rpn_data[0].view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(rpn_label.view(-1), 0, rpn_keep.data)",
                            "Call"
                        ],
                        [
                            "Variable(rpn_label.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "self.rpn_loss_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "base_feat.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_170": {
                "input": {
                    "value": "rpn_anchor_max_overlaps_cls == i",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "numel_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/utils/net_utils.py": {
        "torch": {
            "sqrt_45": {
                "variable": {
                    "value": "totalnorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "totalnorm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "torch.sqrt(totalnorm).item()",
                            "Call"
                        ],
                        [
                            "totalnorm + modulenorm ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_77": {
                "variable": {
                    "value": "abs_in_box_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_box_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_119": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_162": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, grid_size, grid_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_209": {
                "variable": {
                    "value": "out_offcial",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(torch.randn(N, C, H, W).cuda(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, grid_size, grid_size)))",
                            "Call"
                        ],
                        [
                            "Variable(torch.randn(N, H, W, 2).cuda(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_212": {
                "variable": {
                    "value": "grad_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "out_offcial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.grid_sample(input, grid)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(input, grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "grad_outputs.contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_217": {
                "variable": {
                    "value": "grid_yx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_clone.data[:, :, :, 1], grid_clone.data[:, :, :, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(h5f[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_70": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "affine_grid_129": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_132": {
                "variable": {
                    "value": "crops",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ],
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, grid_size, grid_size)))",
                            "Call"
                        ],
                        [
                            "Variable(torch.randn(N, H, W, 2).cuda(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_133": {
                "variable": {
                    "value": "crops",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "crops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.grid_sample(bottom, grid)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(crops, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(bottom, grid)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_135": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ],
                        [
                            "torch.cat([(y2 - y1) / (height - 1), zero, (y1 + y2 - height + 1) / (height - 1), zero, (x2 - x1) / (width - 1), (x1 + x2 - width + 1) / (width - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_138": {
                "variable": {
                    "value": "crops",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ],
                        [
                            "bottom.view(1, batch_size, D, H, W).contiguous().expand(roi_per_batch, batch_size, D, H, W).contiguous().view(-1, D, H, W)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, pre_pool_size, pre_pool_size)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, cfg.POOLING_SIZE, cfg.POOLING_SIZE)))",
                            "Call"
                        ],
                        [
                            "F.affine_grid(theta, torch.Size((rois.size(0), 1, grid_size, grid_size)))",
                            "Call"
                        ],
                        [
                            "Variable(torch.randn(N, H, W, 2).cuda(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_203": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.randint(1, 8)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bottom.size(2)",
                            "Call"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bottom.size(3)",
                            "Call"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_206": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.randint(1, 8)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bottom.size(2)",
                            "Call"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bottom.size(3)",
                            "Call"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_210": {
                "*size": {
                    "value": "out_offcial.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_79": {
                "input": {
                    "value": "in_box_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_inside_weights * box_diff",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/roi_data_layer/roibatchLoader.py": {
        "torch": {
            "Tensor_38": {
                "variable": {
                    "value": "self.ratio_list_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "im_info",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['im_info']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "self.ratio_list_batch[left_idx:right_idx + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "target_ratio.astype(np.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs['gt_boxes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_191": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_keep == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "permute_207": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_92": {
                "input": {
                    "value": "gt_boxes[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_93": {
                "input": {
                    "value": "gt_boxes[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_128": {
                "input": {
                    "value": "gt_boxes[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_129": {
                "input": {
                    "value": "gt_boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pseudo_label.py": {
        "torch": {
            "from_numpy_40": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.tile(boxes, (1, scores.shape[2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.tile(boxes, (1, scores.shape[2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_52": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[:, j] > thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_175": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[:, j] > thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sort_56": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores[:, j][inds]",
                            "Subscript"
                        ],
                        [
                            "scores[:, j][inds]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "cls_dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_boxes, cls_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_179": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores[:, j][inds]",
                            "Subscript"
                        ],
                        [
                            "scores[:, j][inds]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "cls_dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_boxes, cls_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test_net.py": {
        "torch": {
            "load_167": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'faster_rcnn_{}_{}_{}.pth'.format(args.checksession, args.checkepoch, args.checkpoint))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_217": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, 1, imdb.num_classes, training=False, normalize=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_263": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.tile(boxes, (1, scores.shape[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_277": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[:, j] > thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sort_281": {
                "variable": {
                    "value": "(_, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores[:, j][inds]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "cls_dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_boxes, cls_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "trainval_net.py": {
        "torch": {
            "DataLoader_211": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "roibatchLoader(roidb, ratio_list, ratio_index, args.batch_size, imdb.num_classes, training=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sampler(train_size, args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_128": {
                "variable": {
                    "value": "self.range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_267": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_279": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, 'faster_rcnn_{}_{}_{}.pth'.format(args.checksession, args.checkepoch, args.checkpoint))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_290": {
                "variable": {
                    "value": "fasterRCNN",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "fasterRCNN",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vgg16(imdb.classes, pretrained=True, class_agnostic=args.class_agnostic)",
                            "Call"
                        ],
                        [
                            "resnet(imdb.classes, 101, pretrained=True, class_agnostic=args.class_agnostic)",
                            "Call"
                        ],
                        [
                            "resnet(imdb.classes, 50, pretrained=True, class_agnostic=args.class_agnostic)",
                            "Call"
                        ],
                        [
                            "resnet(imdb.classes, 152, pretrained=True, class_agnostic=args.class_agnostic)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(fasterRCNN)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_131": {
                "variable": {
                    "value": "self.leftover",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_per_batch * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(roidb)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_141": {
                "variable": {
                    "value": "self.rand_num_view",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.rand_num_view, self.leftover)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_270": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': cfg.TRAIN.WEIGHT_DECAY}]",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_135": {
                "n": {
                    "value": "self.num_per_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_343": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_350": {
                "variable": {
                    "value": "fg_cnt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_label.data.ne(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}