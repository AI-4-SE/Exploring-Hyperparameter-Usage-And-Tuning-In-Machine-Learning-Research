{
    "components/dataset.py": {
        "torch": {
            "from_numpy_208": {
                "ndarray": {
                    "value": "self.primitive_copy_token_idx_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eq_213": {
                "input": {
                    "value": "self.gen_token_mask + self.primitive_copy_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "components/reranker.py": {
        "torch": {
            "load_368": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_364": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'parameter': self.parameter, 'feature_names': feature_names, 'transition_system': self.transition_system}",
                            "Dict"
                        ],
                        [
                            "torch.load(model_path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "{'objective': 'rank:ndcg', 'learning_rate': 0.1, 'gamma': 5.0, 'min_child_weight': 0.1, 'max_depth': 4, 'n_estimators': 5}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "components/standalone_parser.py": {
        "torch": {}
    },
    "components/vocab.py": {
        "torch": {}
    },
    "exp.py": {
        "torch": {
            "load_423": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_56": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_78": {
                "variable": {
                    "value": "params1",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_290": {
                "variable": {
                    "value": "params1",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_141": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + rl_loss",
                            "BinOp"
                        ],
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_228": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_to + '.bin'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "mean_319": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + rl_loss",
                            "BinOp"
                        ],
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_398": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_to + '.bin'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "mean_505": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + rl_loss",
                            "BinOp"
                        ],
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_582": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_to + '.bin'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "mean_143": {
                "variable": {
                    "value": "rl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-ret_val[1]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_to + '.optim.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_235": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_377": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_to + '.optim.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_405": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_561": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_to + '.optim.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_589": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ],
                        [
                            "optimizer.param_groups[0]['lr'] * args.lr_decay",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_238": {
                "f": {
                    "value": "args.save_to + '.optim.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_408": {
                "f": {
                    "value": "args.save_to + '.optim.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_592": {
                "f": {
                    "value": "args.save_to + '.optim.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_138": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + rl_loss",
                            "BinOp"
                        ],
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_316": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + rl_loss",
                            "BinOp"
                        ],
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_502": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + rl_loss",
                            "BinOp"
                        ],
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "-ret_val[0]",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/attention.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.q_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "q_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.k_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.v_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_33": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_transform(torch.tanh(q + k))",
                            "Call"
                        ],
                        [
                            "torch.transpose(logits, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(logits, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(qh, kh)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_35": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_transform(torch.tanh(q + k))",
                            "Call"
                        ],
                        [
                            "torch.transpose(logits, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(logits, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(qh, kh)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_37": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_transform(torch.tanh(q + k))",
                            "Call"
                        ],
                        [
                            "torch.transpose(logits, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(logits, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(qh, kh)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_40": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(weights, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.dropout(torch.softmax(logits, dim=-1), p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(weights, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.dropout(torch.softmax(logits, dim=-1), p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory",
                            "Method Argument"
                        ],
                        [
                            "memory",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(weights, vh)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, length, heads, channels // heads]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_67": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(weights, vh)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.q_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.k_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.v_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.o_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_117": {
                "variable": {
                    "value": "kh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_heads(k, self.num_heads)",
                            "Call"
                        ],
                        [
                            "torch.transpose(kh, -2, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_heads(q, self.num_heads)",
                            "Call"
                        ],
                        [
                            "qh * (self.hidden_size // self.num_heads) ** (-0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "kh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_heads(k, self.num_heads)",
                            "Call"
                        ],
                        [
                            "torch.transpose(kh, -2, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_121": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(weights, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.dropout(torch.softmax(logits, dim=-1), p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "vh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_heads(v, self.num_heads)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_58": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [batch, length, heads, channels // heads])",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, [batch, length, heads, channels // heads])",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, length, heads * channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_74": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1.0 - mask) * inf",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_31": {
                "input": {
                    "value": "q + k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_transform(torch.tanh(q + k))",
                            "Call"
                        ],
                        [
                            "torch.transpose(logits, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(logits, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(qh, kh)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/branch_selector.py": {
        "torch": {
            "Embedding_16": {
                "variable": {
                    "value": "self.production_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "grammar_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "action_embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.field_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "field_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fields_emb.size(1)",
                            "Call"
                        ],
                        [
                            "field_len",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "field_embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field_embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.input_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size + action_embed_size + field_embed_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.score_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_t.unsqueeze(1).expand(-1, field_len, -1), action_emb.unsqueeze(1).expand(-1, field_len, -1), fields_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_39": {
                "variable": {
                    "value": "mid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_linear(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid",
                            "variable"
                        ],
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.score(h_t[mask], action_ids[mask], fields_ids[mask], masks[mask], select)",
                            "Call"
                        ],
                        [
                            "self.score(h_t.unsqueeze(0), action_ids.unsqueeze(0), fields_ids.unsqueeze(0), masks.unsqueeze(0), True).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_70": {
                "variable": {
                    "value": "branch_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "branch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "dist.sample()",
                            "Call"
                        ],
                        [
                            "torch.argmax(scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "max_field",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.size()",
                            "Call"
                        ],
                        [
                            "masks.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_87": {
                "variable": {
                    "value": "branch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid",
                            "variable"
                        ],
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.score(h_t[mask], action_ids[mask], fields_ids[mask], masks[mask], select)",
                            "Call"
                        ],
                        [
                            "self.score(h_t.unsqueeze(0), action_ids.unsqueeze(0), fields_ids.unsqueeze(0), masks.unsqueeze(0), True).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_90": {
                "variable": {
                    "value": "branch_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "branch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmax(weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "dist.sample()",
                            "Call"
                        ],
                        [
                            "torch.argmax(scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "max_field",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.size()",
                            "Call"
                        ],
                        [
                            "masks.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_64": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "variable"
                        ],
                        [
                            "masks[mask] / masks[mask].sum(-1, True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_68": {
                "variable": {
                    "value": "branch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "variable"
                        ],
                        [
                            "masks[mask] / masks[mask].sum(-1, True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/decomposable_attention_model.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.att_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_60": {
                "variable": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_to_tgt_att_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(src_sents_embed, tgt_sents_embed, src_sents_mask, tgt_sents_mask)",
                            "Call"
                        ],
                        [
                            "F.softmax(att_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(att_weights * tgt_sents_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "src_to_tgt_att_prob * tgt_sents_mask",
                            "BinOp"
                        ],
                        [
                            "src_to_tgt_att_prob / (src_to_tgt_att_prob.sum(dim=-1, keepdim=True) + 1e-13)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "tgt_sents_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode_sentence(tgt_sents_var, type='tgt')",
                            "Call"
                        ],
                        [
                            "tgt_sents_embed",
                            "Method Argument"
                        ],
                        [
                            "tgt_sents_embed",
                            "Method Argument"
                        ],
                        [
                            "tgt_sents_embed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_63": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_to_src_att_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(src_sents_embed, tgt_sents_embed, src_sents_mask, tgt_sents_mask)",
                            "Call"
                        ],
                        [
                            "F.softmax(tgt_to_src_att_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(att_weights_t * src_sents_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "tgt_to_src_att_prob * src_sents_mask",
                            "BinOp"
                        ],
                        [
                            "tgt_to_src_att_prob / (tgt_to_src_att_prob.sum(dim=-1, keepdim=True) + 1e-13)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "src_sents_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode_sentence(src_sents_var, type='src')",
                            "Call"
                        ],
                        [
                            "src_sents_embed",
                            "Method Argument"
                        ],
                        [
                            "src_sents_embed",
                            "Method Argument"
                        ],
                        [
                            "src_sents_embed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_72": {
                "variable": {
                    "value": "att_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_embed_att_linear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.att_linear(src_sents_embed)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "tgt_sents_embed.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_111": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aggregate_ff(torch.cat([v_src, v_tgt], dim=-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_22": {
                "variable": {
                    "value": "self.src_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(src_vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "src_vocab['<pad>']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "src_vocab",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_24": {
                "variable": {
                    "value": "self.src_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(src_vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "src_vocab['<pad>']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "src_vocab",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_25": {
                "variable": {
                    "value": "self.tgt_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(tgt_vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "tgt_vocab['<pad>']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tgt_vocab",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "src_to_tgt_att_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(src_embed_att_linear, tgt_sents_embed.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "tgt_to_src_att_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_to_src_att_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "att_weights.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_84": {
                "variable": {
                    "value": "src_to_tgt_att_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weights * tgt_sents_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_90": {
                "variable": {
                    "value": "tgt_to_src_att_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weights_t * src_sents_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "[src_sents_embed, src_aligned_phrases]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_103": {
                "tensors": {
                    "value": "[tgt_sents_embed, tgt_aligned_phrases]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "[v_src, v_tgt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/lstm.py": {
        "torch": {
            "Parameter_23": {
                "variable": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.U_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.W_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.U_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.U_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.W_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.U_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_83": {
                "variable": {
                    "value": "xi_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input * get_mask_slice(self._input_dropout_mask, 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_84": {
                "variable": {
                    "value": "xf_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input * get_mask_slice(self._input_dropout_mask, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_85": {
                "variable": {
                    "value": "xc_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input * get_mask_slice(self._input_dropout_mask, 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_86": {
                "variable": {
                    "value": "xo_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input * get_mask_slice(self._input_dropout_mask, 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_88": {
                "variable": {
                    "value": "hi_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_tm1 * get_mask_slice(self._h_dropout_mask, 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.U_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_89": {
                "variable": {
                    "value": "hf_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_tm1 * get_mask_slice(self._h_dropout_mask, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.U_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_90": {
                "variable": {
                    "value": "hc_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_tm1 * get_mask_slice(self._h_dropout_mask, 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.U_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_91": {
                "variable": {
                    "value": "ho_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_tm1 * get_mask_slice(self._h_dropout_mask, 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.U_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_116": {
                "variable": {
                    "value": "self.U_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "self.U_i_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.b_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "self.W_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_121": {
                "variable": {
                    "value": "self.U_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_122": {
                "variable": {
                    "value": "self.U_f_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_123": {
                "variable": {
                    "value": "self.b_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.b_f_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_126": {
                "variable": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.U_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self.U_c_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "self.b_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_131": {
                "variable": {
                    "value": "self.W_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "self.U_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_133": {
                "variable": {
                    "value": "self.U_o_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_134": {
                "variable": {
                    "value": "self.b_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_164": {
                "variable": {
                    "value": "i_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(input, self.W_i) + F.linear(h_tm1, self.U_i) + F.linear(h_tm1_p, self.U_i_p) + self.b_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_166": {
                "variable": {
                    "value": "xf_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_167": {
                "variable": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xf_t + F.linear(h_tm1, self.U_f) + self.b_f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_168": {
                "variable": {
                    "value": "f_t_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xf_t + F.linear(h_tm1_p, self.U_f_p) + self.b_f_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_173": {
                "variable": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(input, self.W_o) + F.linear(h_tm1, self.U_o) + F.linear(h_tm1_p, self.U_o_p) + self.b_o",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "orthogonal_47": {
                "module": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_48": {
                "module": {
                    "value": "self.U_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_49": {
                "module": {
                    "value": "self.W_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_50": {
                "module": {
                    "value": "self.U_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_51": {
                "module": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_52": {
                "module": {
                    "value": "self.U_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_53": {
                "module": {
                    "value": "self.W_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_54": {
                "module": {
                    "value": "self.U_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "igates",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xi_t, xf_t, xc_t, xo_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "hgates",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hi_t, hf_t, hc_t, ho_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_99": {
                "variable": {
                    "value": "i_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xi_t + self.bias_ih[:self.hidden_size] + hi_t + self.bias_hh[:self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_100": {
                "variable": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xf_t + self.bias_ih[self.hidden_size:2 * self.hidden_size] + hf_t + self.bias_hh[self.hidden_size:2 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_102": {
                "variable": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xo_t + self.bias_ih[3 * self.hidden_size:4 * self.hidden_size] + ho_t + self.bias_hh[3 * self.hidden_size:4 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "orthogonal_139": {
                "module": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_140": {
                "module": {
                    "value": "self.U_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_141": {
                "module": {
                    "value": "self.U_i_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_143": {
                "module": {
                    "value": "self.W_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_144": {
                "module": {
                    "value": "self.U_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_145": {
                "module": {
                    "value": "self.U_f_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_147": {
                "module": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_148": {
                "module": {
                    "value": "self.U_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_149": {
                "module": {
                    "value": "self.U_c_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_151": {
                "module": {
                    "value": "self.W_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_152": {
                "module": {
                    "value": "self.U_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "orthogonal_153": {
                "module": {
                    "value": "self.U_o_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PackedSequence_231": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "func(input, hidden_state, weight=[[], []])",
                            "Call"
                        ],
                        [
                            "PackedSequence(output, batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "batch_sizes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_174": {
                "input": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_t * c_tm1 + i_t * F.tanh(xc_t + self.bias_ih[2 * self.hidden_size:3 * self.hidden_size] + hc_t + self.bias_hh[2 * self.hidden_size:3 * self.hidden_size])",
                            "BinOp"
                        ],
                        [
                            "f_t * c_tm1 + f_t_p * c_tm1_p + i_t * F.tanh(xc_t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_103": {
                "input": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_t * c_tm1 + i_t * F.tanh(xc_t + self.bias_ih[2 * self.hidden_size:3 * self.hidden_size] + hc_t + self.bias_hh[2 * self.hidden_size:3 * self.hidden_size])",
                            "BinOp"
                        ],
                        [
                            "f_t * c_tm1 + f_t_p * c_tm1_p + i_t * F.tanh(xc_t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_170": {
                "input": {
                    "value": "h_tm1",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.U_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_171": {
                "input": {
                    "value": "xc_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(input * get_mask_slice(self._input_dropout_mask, 2), self.W_c)",
                            "Call"
                        ],
                        [
                            "F.linear(input, self.W_c) + F.linear(h_tm1, self.U_c) + F.linear(h_tm1_p, self.U_c_p) + self.b_c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bernoulli_64": {
                "input": {
                    "value": "new_tensor(4, batch_size, self.input_size).fill_(1 - self.dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_66": {
                "input": {
                    "value": "new_tensor(4, batch_size, self.hidden_size).fill_(1 - self.dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_101": {
                "input": {
                    "value": "xc_t + self.bias_ih[2 * self.hidden_size:3 * self.hidden_size] + hc_t + self.bias_hh[2 * self.hidden_size:3 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_164": {
                "input": {
                    "value": "h_tm1",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.U_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_167": {
                "input": {
                    "value": "h_tm1",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.U_f",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_168": {
                "input": {
                    "value": "h_tm1_p",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.U_f_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_173": {
                "input": {
                    "value": "h_tm1",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.U_o",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/neural_lm.py": {
        "torch": {
            "Embedding_24": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_27": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.read_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_29": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_31": {
                "variable": {
                    "value": "self.cross_entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "vocab['<pad>']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "vocab",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "softmax_67": {
                "variable": {
                    "value": "p_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.read_out(h_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_97": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "{'args': (self.embed_size, self.hidden_size, self.dropout_rate), 'vocab': self.vocab, 'state_dict': self.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multinomial_68": {
                "input": {
                    "value": "p_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.read_out(h_t), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/nn_utils.py": {
        "torch": {
            "bmm_102": {
                "variable": {
                    "value": "att_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_encoding_att_linear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_encoding_att_linear",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h_t.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "att_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_105": {
                "variable": {
                    "value": "att_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(src_encoding_att_linear, h_t.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(att_weight, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_109": {
                "variable": {
                    "value": "ctx_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weight.view(*att_view)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "src_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_encoding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_109": {
                "variable": {
                    "value": "ctx_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_220": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.view(-1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "list(model_prob.size())[:-1] + [1]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "KLDivLoss_253": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_255": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(tgt_vocab_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_293": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "linear_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_295": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "dropout_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[nn.Dropout(p=value) for value in dropout]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_294": {
                "p": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_291": {
                "in_features": {
                    "value": "layer_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(input_dims, hidden_dims)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(input_dims, hidden_dims)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/paraphrase.py": {
        "torch": {
            "load_130": {
                "variable": {
                    "value": "decoder_params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_126": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'args': self.args, 'vocab': self.vocab, 'state_dict': self.state_dict(), 'transition_system': self.transition_system}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/parser.py": {
        "torch": {
            "Embedding_51": {
                "variable": {
                    "value": "self.src_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.source)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_55": {
                "variable": {
                    "value": "self.production_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(transition_system.grammar) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.action_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_58": {
                "variable": {
                    "value": "self.primitive_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.primitive)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.action_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_61": {
                "variable": {
                    "value": "self.field_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(transition_system.grammar.fields)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.field_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_64": {
                "variable": {
                    "value": "self.type_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(transition_system.grammar.types)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.type_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.decoder_cell_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.att_src_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.att_vec_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size + args.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.production_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(len(transition_system.grammar) + 1).zero_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self.tgt_token_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(len(vocab.primitive)).zero_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_158": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_187": {
                "variable": {
                    "value": "packed_src_token_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_token_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.src_embed(src_sents_var)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "src_sents_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_sents_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_191": {
                "variable": {
                    "value": "(src_encodings, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "src_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_lstm(packed_src_token_embed)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(src_encodings)",
                            "Call"
                        ],
                        [
                            "src_encodings.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.encode(batch.src_sents_var, batch.src_sents_len)",
                            "Call"
                        ],
                        [
                            "self.encode(src_sent_var, [len(src_sent)])",
                            "Call"
                        ],
                        [
                            "src_encodings",
                            "Method Argument"
                        ],
                        [
                            "src_encodings",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_196": {
                "variable": {
                    "value": "last_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_state[0], last_state[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "last_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_cell[0], last_cell[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_205": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder_cell_init(enc_last_cell)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_236": {
                "variable": {
                    "value": "apply_rule_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.production_readout(query_vectors)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_240": {
                "variable": {
                    "value": "tgt_apply_rule_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "apply_rule_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.production_readout(query_vectors), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "batch.apply_rule_idx_matrix.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_240": {
                "variable": {
                    "value": "tgt_apply_rule_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_246": {
                "variable": {
                    "value": "gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tgt_token_readout(query_vectors)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_249": {
                "variable": {
                    "value": "tgt_primitive_gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.tgt_token_readout(query_vectors), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.tgt_token_readout(att_t), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "batch.primitive_idx_matrix.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_249": {
                "variable": {
                    "value": "tgt_primitive_gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_299": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tgt_apply_rule_prob * batch.apply_rule_mask + primitive_predictor[:, :, 0] * tgt_primitive_gen_from_vocab_prob * batch.gen_token_mask + primitive_predictor[:, :, 1] * tgt_primitive_copy_prob * batch.primitive_copy_mask",
                            "BinOp"
                        ],
                        [
                            "action_prob.log() * action_mask",
                            "BinOp"
                        ],
                        [
                            "tgt_apply_rule_prob.log() * batch.apply_rule_mask + tgt_primitive_gen_from_vocab_log_prob * batch.gen_token_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_331": {
                "variable": {
                    "value": "att_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.att_vec_linear(torch.cat([h_t, ctx_t], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_470": {
                "variable": {
                    "value": "att_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_vecs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_839": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "LSTM_74": {
                "variable": {
                    "value": "self.encoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_85": {
                "variable": {
                    "value": "self.decoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.action_embed_size",
                            "Attribute"
                        ],
                        [
                            "input_dim + args.att_vec_size * (not args.no_input_feed)",
                            "BinOp"
                        ],
                        [
                            "args.action_embed_size",
                            "Attribute"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.primitive_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.query_vec_to_action_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "args.readout == 'non_linear'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_274": {
                "variable": {
                    "value": "primitive_predictor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.primitive_predictor(query_vectors)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_282": {
                "variable": {
                    "value": "tgt_primitive_copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "primitive_copy_prob * batch.primitive_copy_token_idx_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eq_286": {
                "variable": {
                    "value": "action_mask_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.apply_rule_mask + batch.gen_token_mask + batch.primitive_copy_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_softmax_601": {
                "variable": {
                    "value": "apply_rule_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.production_readout(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_604": {
                "variable": {
                    "value": "gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tgt_token_readout(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_686": {
                "variable": {
                    "value": "(top_new_hyp_scores, top_new_hyp_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_hyp_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Variable(self.new_tensor(applyrule_new_hyp_scores))",
                            "Call"
                        ],
                        [
                            "gen_token_new_hyp_scores",
                            "variable"
                        ],
                        [
                            "torch.cat([new_hyp_scores, gen_token_new_hyp_scores])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "min(new_hyp_scores.size(0), beam_size - len(completed_hypotheses))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_835": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'args': self.args, 'transition_system': self.transition_system, 'vocab': self.vocab, 'state_dict': self.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(model_path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_87": {
                "variable": {
                    "value": "self.encoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.query_vec_to_primitive_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "args.readout == 'non_linear'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "stack_413": {
                "variable": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_444": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_508": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_557": {
                "variable": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_593": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_613": {
                "variable": {
                    "value": "primitive_predictor_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.primitive_predictor(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_681": {
                "variable": {
                    "value": "primitive_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "primitive_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_from_vocab_prob",
                            "variable"
                        ],
                        [
                            "primitive_predictor_prob[:, 0].unsqueeze(1) * gen_from_vocab_prob",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_136": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.production_embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.production_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_137": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.primitive_embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.tgt_token_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_152": {
                "input": {
                    "value": "self.read_out_act(self.query_vec_to_action_embed(q))",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.production_embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.production_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_154": {
                "input": {
                    "value": "self.read_out_act(self.query_vec_to_primitive_embed(q))",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.primitive_embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.tgt_token_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_331": {
                "tensors": {
                    "value": "[h_t, ctx_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_431": {
                "variable": {
                    "value": "parent_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[history_states[p_t][0][batch_id] for (batch_id, p_t) in enumerate((a_t.parent_t if a_t else 0 for a_t in actions_t))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_435": {
                "variable": {
                    "value": "parent_cells",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[history_states[p_t][1][batch_id] for (batch_id, p_t) in enumerate((a_t.parent_t if a_t else 0 for a_t in actions_t))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_585": {
                "variable": {
                    "value": "parent_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hyp_states[hyp_id][p_t][0] for (hyp_id, p_t) in enumerate(p_ts)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_586": {
                "variable": {
                    "value": "parent_cells",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hyp_states[hyp_id][p_t][1] for (hyp_id, p_t) in enumerate(p_ts)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_685": {
                "variable": {
                    "value": "new_hyp_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_hyp_scores, gen_token_new_hyp_scores]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_531": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_459": {
                "variable": {
                    "value": "att_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(batch, src_encodings, dec_init_vec)",
                            "Call"
                        ],
                        [
                            "[att_weight[e_id, token_id] for token_id in cand_src_tokens]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(att_prob).sum()",
                            "Call"
                        ],
                        [
                            "att_prob[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_459": {
                "variable": {
                    "value": "att_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_657": {
                "variable": {
                    "value": "sum_copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "primitive_copy_prob[hyp_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "Variable(T.LongTensor(token_pos_list))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_657": {
                "variable": {
                    "value": "sum_copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_751": {
                "input": {
                    "value": "primitive_copy_prob[prev_hyp_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "Variable(T.LongTensor(action_info.src_token_position))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_751": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_751": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/parser_RL.py": {
        "torch": {
            "Embedding_55": {
                "variable": {
                    "value": "self.src_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.source)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_59": {
                "variable": {
                    "value": "self.production_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(transition_system.grammar) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.action_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_62": {
                "variable": {
                    "value": "self.primitive_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.primitive)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.action_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_65": {
                "variable": {
                    "value": "self.field_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(transition_system.grammar.fields)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.field_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_68": {
                "variable": {
                    "value": "self.type_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(transition_system.grammar.types)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.type_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.decoder_cell_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.att_src_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.att_vec_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size + args.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_131": {
                "variable": {
                    "value": "self.production_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(len(transition_system.grammar) + 1).zero_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "self.tgt_token_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(len(vocab.primitive)).zero_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_165": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_194": {
                "variable": {
                    "value": "packed_src_token_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_token_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.src_embed(src_sents_var)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "src_sents_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_sents_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_198": {
                "variable": {
                    "value": "(src_encodings, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "src_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_lstm(packed_src_token_embed)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(src_encodings)",
                            "Call"
                        ],
                        [
                            "src_encodings.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.encode(batch.src_sents_var, batch.src_sents_len)",
                            "Call"
                        ],
                        [
                            "self.encode(src_sent_var, [len(src_sent)])",
                            "Call"
                        ],
                        [
                            "src_encodings",
                            "Method Argument"
                        ],
                        [
                            "src_encodings",
                            "Method Argument"
                        ],
                        [
                            "src_encodings",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_203": {
                "variable": {
                    "value": "last_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_state[0], last_state[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "last_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_cell[0], last_cell[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_212": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder_cell_init(enc_last_cell)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_219": {
                "variable": {
                    "value": "apply_rule_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.production_readout(query_vectors)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_223": {
                "variable": {
                    "value": "tgt_apply_rule_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "apply_rule_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.production_readout(query_vectors), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "batch.apply_rule_idx_matrix.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_223": {
                "variable": {
                    "value": "tgt_apply_rule_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_229": {
                "variable": {
                    "value": "gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tgt_token_readout(query_vectors)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_232": {
                "variable": {
                    "value": "tgt_primitive_gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.tgt_token_readout(query_vectors), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.tgt_token_readout(att_t), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "batch.primitive_idx_matrix.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_232": {
                "variable": {
                    "value": "tgt_primitive_gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_358": {
                "variable": {
                    "value": "ori_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_action_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.baseline_classifier(src_encodings, query_vectors, new_batch)",
                            "Call"
                        ],
                        [
                            "sample_action_prob.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "sample_action_prob",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_359": {
                "variable": {
                    "value": "rl_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rl_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(rl_losses, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_422": {
                "variable": {
                    "value": "att_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.att_vec_linear(torch.cat([h_t, ctx_t], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_614": {
                "variable": {
                    "value": "att_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_vecs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(att_vecs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_616": {
                "variable": {
                    "value": "policy_prob_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "policy_prob_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode_reinforce(batch, src_encodings, dec_init_vec, epsilon=epsilon)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(policy_prob_mask, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_722": {
                "variable": {
                    "value": "att_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_vecs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(att_vecs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_1074": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "LSTM_78": {
                "variable": {
                    "value": "self.encoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_89": {
                "variable": {
                    "value": "self.decoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.action_embed_size",
                            "Attribute"
                        ],
                        [
                            "input_dim + args.att_vec_size * (not args.no_input_feed)",
                            "BinOp"
                        ],
                        [
                            "args.action_embed_size",
                            "Attribute"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.primitive_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.query_vec_to_action_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "args.readout == 'non_linear'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_257": {
                "variable": {
                    "value": "primitive_predictor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.primitive_predictor(query_vectors)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_265": {
                "variable": {
                    "value": "tgt_primitive_copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "primitive_copy_prob * batch.primitive_copy_token_idx_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eq_269": {
                "variable": {
                    "value": "action_mask_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.apply_rule_mask + batch.gen_token_mask + batch.primitive_copy_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_642": {
                "variable": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_679": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_858": {
                "variable": {
                    "value": "apply_rule_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.production_readout(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_861": {
                "variable": {
                    "value": "gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tgt_token_readout(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_943": {
                "variable": {
                    "value": "(top_new_hyp_scores, top_new_hyp_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_hyp_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Variable(self.new_tensor(applyrule_new_hyp_scores))",
                            "Call"
                        ],
                        [
                            "gen_token_new_hyp_scores",
                            "variable"
                        ],
                        [
                            "torch.cat([new_hyp_scores, gen_token_new_hyp_scores])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "min(new_hyp_scores.size(0), beam_size - len(completed_hypotheses))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_1070": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'args': self.args, 'transition_system': self.transition_system, 'vocab': self.vocab, 'state_dict': self.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(model_path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_91": {
                "variable": {
                    "value": "self.encoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.query_vec_to_primitive_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "args.readout == 'non_linear'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_344": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.9 - torch.stack(probs, 0).prod()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_352": {
                "variable": {
                    "value": "rl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_354": {
                "variable": {
                    "value": "rl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rl_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(0.0).cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack(rl_loss, 0)",
                            "Call"
                        ],
                        [
                            "rl_loss.mean()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_494": {
                "variable": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_525": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_561": {
                "variable": {
                    "value": "action_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "action_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(action_embs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(action_embs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_562": {
                "variable": {
                    "value": "fields_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fields_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(fields_embs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(fields_embs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_563": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(masks, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(masks, 0)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor([1 if i < length else 0 for i in range(self.max_field)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_666": {
                "variable": {
                    "value": "parent_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[history_states[p_t][0][batch_id] for (batch_id, p_t) in enumerate((a_t.parent_t if a_t else 0 for a_t in actions_t))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_670": {
                "variable": {
                    "value": "parent_cells",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[history_states[p_t][1][batch_id] for (batch_id, p_t) in enumerate((a_t.parent_t if a_t else 0 for a_t in actions_t))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_714": {
                "variable": {
                    "value": "action_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "action_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(action_embs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(action_embs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_715": {
                "variable": {
                    "value": "fields_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fields_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(fields_embs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(fields_embs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_716": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(masks, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(masks, 0)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor([1 if i < length else 0 for i in range(self.max_field)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_765": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_814": {
                "variable": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_850": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_870": {
                "variable": {
                    "value": "primitive_predictor_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.primitive_predictor(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_938": {
                "variable": {
                    "value": "primitive_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "primitive_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_from_vocab_prob",
                            "variable"
                        ],
                        [
                            "primitive_predictor_prob[:, 0].unsqueeze(1) * gen_from_vocab_prob",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_140": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.production_embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.production_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_141": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.primitive_embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.tgt_token_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_156": {
                "input": {
                    "value": "self.read_out_act(self.query_vec_to_action_embed(q))",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.production_embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.production_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_158": {
                "input": {
                    "value": "self.read_out_act(self.query_vec_to_primitive_embed(q))",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.primitive_embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.tgt_token_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_422": {
                "tensors": {
                    "value": "[h_t, ctx_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_512": {
                "variable": {
                    "value": "parent_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[history_states[p_t][0][batch_id] for (batch_id, p_t) in enumerate((a_t.parent_t if a_t else 0 for a_t in actions_t))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_516": {
                "variable": {
                    "value": "parent_cells",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[history_states[p_t][1][batch_id] for (batch_id, p_t) in enumerate((a_t.parent_t if a_t else 0 for a_t in actions_t))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_842": {
                "variable": {
                    "value": "parent_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hyp_states[hyp_id][p_t][0] for (hyp_id, p_t) in enumerate(p_ts)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_843": {
                "variable": {
                    "value": "parent_cells",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hyp_states[hyp_id][p_t][1] for (hyp_id, p_t) in enumerate(p_ts)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_942": {
                "variable": {
                    "value": "new_hyp_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_hyp_scores, gen_token_new_hyp_scores]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_1028": {
                "variable": {
                    "value": "action_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_610": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_action_prob.size()",
                            "Call"
                        ],
                        [
                            "len(batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.max_field",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_611": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_action_prob.size()",
                            "Call"
                        ],
                        [
                            "len(batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.max_field",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_788": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_344": {
                "tensors": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy_prob[policy_mask[count][1]][i]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_548": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_556": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_557": {
                "*size": {
                    "value": "self.max_field",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_558": {
                "*size": {
                    "value": "self.max_field",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_571": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_701": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_709": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_710": {
                "*size": {
                    "value": "self.max_field",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_711": {
                "*size": {
                    "value": "self.max_field",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_584": {
                "tensors": {
                    "value": "[temp[p] for i in range(sample_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_914": {
                "variable": {
                    "value": "sum_copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "primitive_copy_prob[hyp_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "Variable(T.LongTensor(token_pos_list))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_914": {
                "variable": {
                    "value": "sum_copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_346": {
                "tensors": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy_prob[policy_mask[count][1]][i]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1008": {
                "input": {
                    "value": "primitive_copy_prob[prev_hyp_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "Variable(T.LongTensor(action_info.src_token_position))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_1008": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_1008": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/parser_pre.py": {
        "torch": {
            "Embedding_55": {
                "variable": {
                    "value": "self.src_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.source)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_59": {
                "variable": {
                    "value": "self.production_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(transition_system.grammar) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.action_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_62": {
                "variable": {
                    "value": "self.primitive_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab.primitive)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.action_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_65": {
                "variable": {
                    "value": "self.field_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(transition_system.grammar.fields)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.field_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_68": {
                "variable": {
                    "value": "self.type_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(transition_system.grammar.types)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.type_embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.decoder_cell_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.att_src_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.att_vec_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size + args.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_131": {
                "variable": {
                    "value": "self.production_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(len(transition_system.grammar) + 1).zero_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "self.tgt_token_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(len(vocab.primitive)).zero_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_166": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_195": {
                "variable": {
                    "value": "packed_src_token_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_token_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.src_embed(src_sents_var)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "src_sents_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_sents_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_199": {
                "variable": {
                    "value": "(src_encodings, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "src_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_lstm(packed_src_token_embed)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(src_encodings)",
                            "Call"
                        ],
                        [
                            "src_encodings.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.encode(batch.src_sents_var, batch.src_sents_len)",
                            "Call"
                        ],
                        [
                            "self.encode(src_sent_var, [len(src_sent)])",
                            "Call"
                        ],
                        [
                            "src_encodings",
                            "Method Argument"
                        ],
                        [
                            "src_encodings",
                            "Method Argument"
                        ],
                        [
                            "src_encodings",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_204": {
                "variable": {
                    "value": "last_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_state[0], last_state[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "last_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_cell[0], last_cell[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_213": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder_cell_init(enc_last_cell)",
                            "Call"
                        ],
                        [
                            "torch.tanh(h_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_220": {
                "variable": {
                    "value": "apply_rule_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.production_readout(query_vectors)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_224": {
                "variable": {
                    "value": "tgt_apply_rule_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "apply_rule_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.production_readout(query_vectors), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "batch.apply_rule_idx_matrix.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_224": {
                "variable": {
                    "value": "tgt_apply_rule_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_230": {
                "variable": {
                    "value": "gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tgt_token_readout(query_vectors)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_233": {
                "variable": {
                    "value": "tgt_primitive_gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.tgt_token_readout(query_vectors), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.tgt_token_readout(att_t), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "batch.primitive_idx_matrix.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_233": {
                "variable": {
                    "value": "tgt_primitive_gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_317": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "select_action_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.baseline_classifier(src_encodings, query_vectors, new_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_343": {
                "variable": {
                    "value": "att_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.att_vec_linear(torch.cat([h_t, ctx_t], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_508": {
                "variable": {
                    "value": "att_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_vecs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_854": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "LSTM_78": {
                "variable": {
                    "value": "self.encoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_89": {
                "variable": {
                    "value": "self.decoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.action_embed_size",
                            "Attribute"
                        ],
                        [
                            "input_dim + args.att_vec_size * (not args.no_input_feed)",
                            "BinOp"
                        ],
                        [
                            "args.action_embed_size",
                            "Attribute"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.primitive_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.query_vec_to_action_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "args.readout == 'non_linear'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_258": {
                "variable": {
                    "value": "primitive_predictor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.primitive_predictor(query_vectors)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_266": {
                "variable": {
                    "value": "tgt_primitive_copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "primitive_copy_prob * batch.primitive_copy_token_idx_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eq_270": {
                "variable": {
                    "value": "action_mask_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.apply_rule_mask + batch.gen_token_mask + batch.primitive_copy_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_softmax_640": {
                "variable": {
                    "value": "apply_rule_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.production_readout(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_643": {
                "variable": {
                    "value": "gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tgt_token_readout(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_725": {
                "variable": {
                    "value": "(top_new_hyp_scores, top_new_hyp_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_hyp_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "Variable(self.new_tensor(applyrule_new_hyp_scores))",
                            "Call"
                        ],
                        [
                            "gen_token_new_hyp_scores",
                            "variable"
                        ],
                        [
                            "torch.cat([new_hyp_scores, gen_token_new_hyp_scores])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "min(new_hyp_scores.size(0), beam_size - len(completed_hypotheses))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_850": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'args': self.args, 'transition_system': self.transition_system, 'vocab': self.vocab, 'state_dict': self.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(model_path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_91": {
                "variable": {
                    "value": "self.encoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.query_vec_to_primitive_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.att_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "args.readout == 'non_linear'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "stack_425": {
                "variable": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_456": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_493": {
                "variable": {
                    "value": "action_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "action_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(action_embs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_494": {
                "variable": {
                    "value": "fields_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fields_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(fields_embs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_495": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(masks, 0)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor([1 if i < length else 0 for i in range(self.max_field)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_547": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_596": {
                "variable": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_632": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_652": {
                "variable": {
                    "value": "primitive_predictor_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.primitive_predictor(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_720": {
                "variable": {
                    "value": "primitive_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "primitive_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_from_vocab_prob",
                            "variable"
                        ],
                        [
                            "primitive_predictor_prob[:, 0].unsqueeze(1) * gen_from_vocab_prob",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_140": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.production_embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.production_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_141": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.primitive_embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.tgt_token_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_156": {
                "input": {
                    "value": "self.read_out_act(self.query_vec_to_action_embed(q))",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.production_embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.production_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_158": {
                "input": {
                    "value": "self.read_out_act(self.query_vec_to_primitive_embed(q))",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.primitive_embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.tgt_token_readout_b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_343": {
                "tensors": {
                    "value": "[h_t, ctx_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_443": {
                "variable": {
                    "value": "parent_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[history_states[p_t][0][batch_id] for (batch_id, p_t) in enumerate((a_t.parent_t if a_t else 0 for a_t in actions_t))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_447": {
                "variable": {
                    "value": "parent_cells",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[history_states[p_t][1][batch_id] for (batch_id, p_t) in enumerate((a_t.parent_t if a_t else 0 for a_t in actions_t))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_624": {
                "variable": {
                    "value": "parent_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hyp_states[hyp_id][p_t][0] for (hyp_id, p_t) in enumerate(p_ts)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_625": {
                "variable": {
                    "value": "parent_cells",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hyp_states[hyp_id][p_t][1] for (hyp_id, p_t) in enumerate(p_ts)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_724": {
                "variable": {
                    "value": "new_hyp_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_hyp_scores, gen_token_new_hyp_scores]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_809": {
                "variable": {
                    "value": "action_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_496": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_570": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_479": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_487": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_488": {
                "*size": {
                    "value": "self.max_field",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_489": {
                "*size": {
                    "value": "self.max_field",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_696": {
                "variable": {
                    "value": "sum_copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "primitive_copy_prob[hyp_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "Variable(T.LongTensor(token_pos_list))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_696": {
                "variable": {
                    "value": "sum_copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_790": {
                "input": {
                    "value": "primitive_copy_prob[prev_hyp_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "Variable(T.LongTensor(action_info.src_token_position))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_790": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_790": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/pointer_net.py": {
        "torch": {
            "matmul_38": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.src_encoding_linear(src_encodings)",
                            "Call"
                        ],
                        [
                            "src_encodings.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "src_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_vec.permute(1, 0, 2).unsqueeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_38": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "variable": {
                    "value": "ptr_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(src_encodings, q).squeeze(3)",
                            "Call"
                        ],
                        [
                            "weights.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.src_encoding_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "src_encoding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_encoding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "query_vec_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_vec_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/prior.py": {
        "torch": {
            "load_46": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_path, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "{'args': self.args, 'vocab': self.vocab, 'state_dict': self.state_dict(), 'transition_system': self.transition_system}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/reconstruction_model.py": {
        "torch": {
            "load_161": {
                "variable": {
                    "value": "decoder_params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_157": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'args': self.args, 'vocab': self.vocab, 'state_dict': self.state_dict(), 'transition_system': self.transition_system}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_137": {
                "ndarray": {
                    "value": "tgt_token_copy_idx_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_generate_and_copy_meta_tensor(src_codes, tgt_nls)",
                            "Call"
                        ],
                        [
                            "np.zeros((max_time_step, batch_size, max_src_len), dtype='float32')",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(tgt_token_copy_idx_mask))",
                            "Call"
                        ],
                        [
                            "tgt_token_copy_idx_mask.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_138": {
                "ndarray": {
                    "value": "tgt_token_gen_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_generate_and_copy_meta_tensor(src_codes, tgt_nls)",
                            "Call"
                        ],
                        [
                            "np.zeros((max_time_step, batch_size), dtype='float32')",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(tgt_token_gen_mask))",
                            "Call"
                        ],
                        [
                            "tgt_token_gen_mask.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/seq2seq.py": {
        "torch": {
            "LSTM_41": {
                "variable": {
                    "value": "self.encoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_42": {
                "variable": {
                    "value": "self.decoder_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embed_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.decoder_cell_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.att_src_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.att_vec_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "len(tgt_vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_79": {
                "variable": {
                    "value": "packed_src_token_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_token_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.src_embed(src_sents_var)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "src_sents_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(src_sent) for src_sent in src_sents]",
                            "ListComp"
                        ],
                        [
                            "src_sents_len",
                            "Method Argument"
                        ],
                        [
                            "src_sents_len",
                            "Method Argument"
                        ],
                        [
                            "src_sents_len",
                            "Method Argument"
                        ],
                        [
                            "src_sents_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_83": {
                "variable": {
                    "value": "(src_encodings, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "src_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_lstm(packed_src_token_embed)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(src_encodings)",
                            "Call"
                        ],
                        [
                            "src_encodings.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.encode(src_sents_var, src_sents_len)",
                            "Call"
                        ],
                        [
                            "self.encode(src_sents_var, src_sents_len)",
                            "Call"
                        ],
                        [
                            "src_encodings.repeat(1, 1, sample_size).view(src_encodings.size(0), src_sents_num, src_encodings.size(2))",
                            "Call"
                        ],
                        [
                            "src_encodings.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.encode(src_sents_var, [len(src_sents[0])])",
                            "Call"
                        ],
                        [
                            "src_encodings.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "src_encodings",
                            "Method Argument"
                        ],
                        [
                            "src_encodings",
                            "Method Argument"
                        ],
                        [
                            "src_encodings",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_86": {
                "variable": {
                    "value": "last_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_state[0], last_state[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "last_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_cell[0], last_cell[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_93": {
                "variable": {
                    "value": "dec_init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_init_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder_cell_init(enc_last_cell)",
                            "Call"
                        ],
                        [
                            "dec_init_cell.repeat(1, sample_size).view(src_sents_num, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_146": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(scores)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_160": {
                "variable": {
                    "value": "log_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(scores)",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_188": {
                "variable": {
                    "value": "att_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.att_vec_linear(torch.cat([h_t, ctx_t], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_222": {
                "variable": {
                    "value": "att_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_encoding_att_linear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_encoding_att_linear",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h_t.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_222": {
                "variable": {
                    "value": "att_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_225": {
                "variable": {
                    "value": "att_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(src_encoding_att_linear, h_t.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(att_weight, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_229": {
                "variable": {
                    "value": "ctx_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_weight.view(*att_view)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "src_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_encoding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_229": {
                "variable": {
                    "value": "ctx_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_337": {
                "variable": {
                    "value": "sample_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(sample_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_31": {
                "variable": {
                    "value": "self.src_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(src_vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_36": {
                "variable": {
                    "value": "self.tgt_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(tgt_vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_134": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_tm1_embed, att_tm1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_168": {
                "variable": {
                    "value": "tgt_sent_log_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "tgt_sents_var_sos_omitted.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_168": {
                "variable": {
                    "value": "tgt_sent_log_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_tm1_embed, att_tm1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_300": {
                "variable": {
                    "value": "p_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.step(x, h_tm1, src_encodings, src_encodings_att_linear, src_sent_masks=src_sent_masks)",
                            "Call"
                        ],
                        [
                            "self.readout(att_t)",
                            "Call"
                        ],
                        [
                            "self.step(x, h_tm1, src_encodings, src_encodings_att_linear, src_sent_masks=src_sent_masks)",
                            "Call"
                        ],
                        [
                            "self.step(x, h_tm1, expanded_src_encodings, expanded_src_encodings_att_linear, src_sent_masks=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_302": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(score_t)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(score_t)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_304": {
                "variable": {
                    "value": "p_y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(score_t)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(score_t)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(p_t, num_samples=1).detach()",
                            "Call"
                        ],
                        [
                            "y_t.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_305": {
                "variable": {
                    "value": "log_y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(p_t, 1, y_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_305": {
                "variable": {
                    "value": "log_y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_392": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_tm1_embed, att_tm1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_399": {
                "variable": {
                    "value": "p_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.step(x, h_tm1, src_encodings, src_encodings_att_linear, src_sent_masks=src_sent_masks)",
                            "Call"
                        ],
                        [
                            "self.readout(att_t)",
                            "Call"
                        ],
                        [
                            "self.step(x, h_tm1, src_encodings, src_encodings_att_linear, src_sent_masks=src_sent_masks)",
                            "Call"
                        ],
                        [
                            "self.step(x, h_tm1, expanded_src_encodings, expanded_src_encodings_att_linear, src_sent_masks=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_403": {
                "variable": {
                    "value": "(top_new_hyp_scores, top_new_hyp_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_hyp_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(hyp_scores.unsqueeze(1).expand_as(p_t) + p_t).view(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "k": {
                    "value": "live_hyp_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_size - len(completed_hypotheses)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_367": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_368": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_170": {
                "input": {
                    "value": "tgt_sents_var_sos_omitted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tgt_sents_var[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "tensors": {
                    "value": "[h_t, ctx_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bernoulli_131": {
                "input": {
                    "value": "new_tensor(batch_size).fill_(1 - self.decoder_word_dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/seq2seq_copy.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.tgt_token_predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_44": {
                "variable": {
                    "value": "packed_src_token_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_token_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.src_embed(src_sents_var)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "src_sents_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_sents_len",
                            "Method Argument"
                        ],
                        [
                            "src_sents_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_48": {
                "variable": {
                    "value": "(src_encodings, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "src_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder_lstm(packed_src_token_embed)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(src_encodings)",
                            "Call"
                        ],
                        [
                            "src_encodings.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.encode(src_sents_var, src_sents_len)",
                            "Call"
                        ],
                        [
                            "self.encode(src_sent_var, [len(src_sent)])",
                            "Call"
                        ],
                        [
                            "src_encodings",
                            "Method Argument"
                        ],
                        [
                            "src_encodings",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_53": {
                "variable": {
                    "value": "last_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_state[0], last_state[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "last_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_cell[0], last_cell[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_90": {
                "variable": {
                    "value": "att_ves",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ves",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ves)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "tgt_token_predictor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tgt_token_predictor(att_vecs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_115": {
                "variable": {
                    "value": "token_gen_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.readout(att_vecs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_128": {
                "variable": {
                    "value": "tgt_token_copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_copy_prob * tgt_token_copy_idx_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gt_131": {
                "variable": {
                    "value": "tgt_token_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_token_gen_mask + tgt_token_copy_idx_mask.sum(dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_132": {
                "variable": {
                    "value": "tgt_token_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_token_predictor[:, :, 0] * tgt_token_gen_prob + tgt_token_predictor[:, :, 1] * tgt_token_copy_prob + 1e-07 * (1.0 - tgt_token_mask)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_153": {
                "variable": {
                    "value": "att_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.att_vec_linear(torch.cat([h_t, ctx_t], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_tm1_embed, att_tm1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_tm1_embed, att_tm1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_219": {
                "variable": {
                    "value": "tgt_token_predictor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tgt_token_predictor(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_222": {
                "variable": {
                    "value": "token_gen_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.readout(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_124": {
                "input": {
                    "value": "token_gen_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.readout(att_vecs), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.readout(att_t), dim=-1)",
                            "Call"
                        ],
                        [
                            "tgt_token_predictor[:, 0].unsqueeze(1) * token_gen_prob",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "tgt_token_idx.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_124": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_250": {
                "variable": {
                    "value": "log_token_gen_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_gen_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.readout(att_vecs), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.readout(att_t), dim=-1)",
                            "Call"
                        ],
                        [
                            "tgt_token_predictor[:, 0].unsqueeze(1) * token_gen_prob",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_252": {
                "variable": {
                    "value": "(top_new_hyp_scores, top_new_hyp_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_hyp_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(hyp_scores.unsqueeze(1).expand_as(token_gen_prob) + log_token_gen_prob).view(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "k": {
                    "value": "live_hyp_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_size - len(completed_hypotheses)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multinomial_257": {
                "variable": {
                    "value": "word_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_gen_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.readout(att_vecs), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.readout(att_t), dim=-1)",
                            "Call"
                        ],
                        [
                            "tgt_token_predictor[:, 0].unsqueeze(1) * token_gen_prob",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "tensors": {
                    "value": "[h_t, ctx_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_259": {
                "input": {
                    "value": "torch.gather(token_gen_prob, dim=1, index=word_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_259": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_259": {
                "input": {
                    "value": "token_gen_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.readout(att_vecs), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.readout(att_t), dim=-1)",
                            "Call"
                        ],
                        [
                            "tgt_token_predictor[:, 0].unsqueeze(1) * token_gen_prob",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "word_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(top_new_hyp_pos % len(self.tgt_vocab)).cpu().data",
                            "Attribute"
                        ],
                        [
                            "torch.multinomial(token_gen_prob, num_samples=1)",
                            "Call"
                        ],
                        [
                            "word_ids.view(-1).cpu().data",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "model/struct_vae.py": {
        "torch": {
            "Linear_34": {
                "variable": {
                    "value": "self.b_x_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.b_x_l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_161": {
                "variable": {
                    "value": "self.b_lm_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0.5 if args.lang == 'python' else 0.9])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.b_x_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_58": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "learning_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_learning_signal.detach() - baseline",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.args.clip_learning_signal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_135": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'args': self.args, 'state_dict': state_dict}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_139": {
                "f": {
                    "value": "fname + '.encoder' + ext",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_142": {
                "f": {
                    "value": "fname + '.decoder' + ext",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_145": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "tanh_84": {
                "input": {
                    "value": "self.b_x_l1(enc_states.detach())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/utils.py": {
        "torch": {}
    },
    "model/wikisql/dataset.py": {
        "torch": {}
    },
    "model/wikisql/parser.py": {
        "torch": {
            "LSTM_31": {
                "variable": {
                    "value": "self.table_header_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.column_rnn_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_75": {
                "variable": {
                    "value": "packed_table_head_word_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_table_head_word_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "table_head_word_embeds_flatten[sorted_col_ids, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_table_col_lens_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[table_col_lens_flatten[i] for i in sorted_col_ids]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_79": {
                "variable": {
                    "value": "(column_word_encodings, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "column_word_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.table_header_lstm(packed_table_head_word_embeds)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(column_word_encodings, batch_first=True)",
                            "Call"
                        ],
                        [
                            "column_word_encodings[col_old_pos_map]",
                            "Subscript"
                        ],
                        [
                            "column_word_encodings.view(batch_size, max_col_num, max_col_word_num, -1)",
                            "Call"
                        ],
                        [
                            "self.encode_table_header([e.table for e in examples])",
                            "Call"
                        ],
                        [
                            "self.encode_table_header([table])",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "table_header_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[table_header_encoding[0], table_header_encoding[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_247": {
                "tensors": {
                    "value": "action_probs_i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_192": {
                "variable": {
                    "value": "apply_rule_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.production_readout(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_359": {
                "variable": {
                    "value": "apply_rule_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.production_readout(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_365": {
                "variable": {
                    "value": "column_selection_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "column_attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.column_pointer_net(table_header_encoding, table_header_mask, att_t.unsqueeze(0)).squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.column_pointer_net(table_header_encoding, table_header_mask, att_t.unsqueeze(0)).squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_368": {
                "variable": {
                    "value": "primitive_predictor_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.primitive_predictor(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_376": {
                "variable": {
                    "value": "primitive_gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tgt_token_readout(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_459": {
                "variable": {
                    "value": "new_hyp_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['new_hyp_score'] for x in new_hyp_meta]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "topk_460": {
                "variable": {
                    "value": "(top_new_hyp_scores, meta_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_hyp_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x['new_hyp_score'] for x in new_hyp_meta])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "min(new_hyp_scores.size(0), beam_size - len(completed_hypotheses))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_153": {
                "variable": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_184": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_200": {
                "variable": {
                    "value": "primitive_predictor_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.primitive_predictor(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_208": {
                "variable": {
                    "value": "primitive_gen_from_vocab_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tgt_token_readout(att_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_315": {
                "variable": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_tm1_embeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_tm1_embeds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_351": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ],
                        [
                            "[a_tm1_embeds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_171": {
                "variable": {
                    "value": "parent_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[history_states[p_t][0][batch_id] for (batch_id, p_t) in enumerate((a_t.parent_t if a_t else 0 for a_t in actions_t))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_175": {
                "variable": {
                    "value": "parent_cells",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[history_states[p_t][1][batch_id] for (batch_id, p_t) in enumerate((a_t.parent_t if a_t else 0 for a_t in actions_t))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_343": {
                "variable": {
                    "value": "parent_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hyp_states[hyp_id][p_t][0] for (hyp_id, p_t) in enumerate(p_ts)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_344": {
                "variable": {
                    "value": "parent_cells",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hyp_states[hyp_id][p_t][1] for (hyp_id, p_t) in enumerate(p_ts)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_437": {
                "variable": {
                    "value": "score_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_copies[token_pos]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_449": {
                "variable": {
                    "value": "eos_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eos_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "primitive_predictor_prob[hyp_id, 0] * primitive_gen_from_vocab_prob[hyp_id, self.vocab.primitive['</primitive>']]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}