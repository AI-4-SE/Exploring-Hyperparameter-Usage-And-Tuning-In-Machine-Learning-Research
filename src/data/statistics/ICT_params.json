{
    "Guided_Upsample/main.py": {
        "torch": {
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_28": {
                "variable": {
                    "value": "config.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "config.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_40": {
                "seed": {
                    "value": "config.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_41": {
                "seed": {
                    "value": "config.SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Guided_Upsample/src/Guided_Upsampler.py": {
        "torch": {
            "DataLoader_55": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_143": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.val_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_193": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "all_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[images, edges, images * (1 - masks), outputs_merged]",
                            "List"
                        ],
                        [
                            "torch.cat(all_tensor, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_175": {
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stitch_images(self.postprocess(images), self.postprocess(inputs), self.postprocess(edges), self.postprocess(outputs), self.postprocess(outputs_merged), img_per_row=image_per_row)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_98": {
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stitch_images(self.postprocess(images), self.postprocess(inputs), self.postprocess(edges), self.postprocess(outputs), self.postprocess(outputs_merged), img_per_row=image_per_row)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_175": {
                "input": {
                    "value": "images - outputs_merged",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_98": {
                "input": {
                    "value": "images - outputs_merged",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Guided_Upsample/src/dataset_my.py": {
        "torch": {
            "DataLoader_239": {
                "variable": {
                    "value": "sample_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Guided_Upsample/src/loss.py": {
        "torch": {
            "L1Loss_56": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_91": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.relu1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.relu1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.relu2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.relu2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.relu3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.relu3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.relu3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.relu3_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.relu4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.relu4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.relu4_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.relu4_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.relu5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.relu5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.relu5_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.relu5_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_23": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "target_real_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_20": {
                "data": {
                    "value": "target_fake_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MSELoss_26": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Guided_Upsample/src/metrics.py": {
        "torch": {
            "log_9": {
                "variable": {
                    "value": "base10",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_10": {
                "variable": {
                    "value": "max_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "max_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(max_val).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_16": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(a.float() - b.float()) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_9": {
                "data": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_13": {
                "input": {
                    "value": "max_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(max_val).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_21": {
                "input": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean((a.float() - b.float()) ** 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Guided_Upsample/src/models.py": {
        "torch": {
            "L1Loss_75": {
                "variable": {
                    "value": "l1_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "self.gen_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.LR)",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.BETA1, config.BETA2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "self.dis_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.LR) * float(config.D2G_LR)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.BETA1, config.BETA2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(images_masked, edges)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "{'iteration': self.iteration, 'generator': self.generator.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "self.gen_weights_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_50": {
                "obj": {
                    "value": "{'discriminator': self.discriminator.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dis_weights_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_72": {
                "variable": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "InpaintGenerator_5()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator, config.GPU)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "config.GPU",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_73": {
                "variable": {
                    "value": "discriminator",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Discriminator(in_channels=3, use_sigmoid=config.GAN_LOSS != 'hinge')",
                            "Call"
                        ],
                        [
                            "Discriminator2(in_channels=3, use_sigmoid=config.GAN_LOSS != 'hinge')",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator, config.GPU)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "config.GPU",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.gen_weights_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_27": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.gen_weights_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_37": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dis_weights_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dis_weights_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "mean_135": {
                "input": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_181": {
                "input": {
                    "value": "gen_fake",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gen_fake.view(8, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Guided_Upsample/src/networks.py": {
        "torch": {
            "randint_241": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_241": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_242": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_242": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.middle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels=256, out_channels=128, kernel_size=4, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Conv2d(in_channels=in_channels, out_channels=64, kernel_size=4, stride=2, padding=1, bias=not use_spectral_norm), use_spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Conv2d(in_channels=64, out_channels=128, kernel_size=4, stride=2, padding=1, bias=not use_spectral_norm), use_spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Conv2d(in_channels=128, out_channels=256, kernel_size=4, stride=2, padding=1, bias=not use_spectral_norm), use_spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Conv2d(in_channels=256, out_channels=512, kernel_size=4, stride=1, padding=1, bias=not use_spectral_norm), use_spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Conv2d(in_channels=512, out_channels=1, kernel_size=4, stride=1, padding=1, bias=not use_spectral_norm), use_spectral_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_214": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_239": {
                "seed": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_130": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv5(conv4)",
                            "Call"
                        ],
                        [
                            "self.conv5(conv4)",
                            "Call"
                        ]
                    ]
                }
            },
            "spectral_norm_180": {
                "module": {
                    "value": "module",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_231": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv5(conv4)",
                            "Call"
                        ],
                        [
                            "self.conv5(conv4)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_44": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_66": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_70": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_74": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_96": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_101": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_106": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_111": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_139": {
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_141": {
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_144": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_146": {
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_161": {
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_163": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_165": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_191": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_193": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_197": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_199": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_203": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_205": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_209": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_211": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_215": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_85": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randint(5, (5, 5)).unsqueeze(0).unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.middle(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "(torch.tanh(x) + 1) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_192": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_204": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_spectral_norm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Transformer/DDP_trainer.py": {
        "torch": {
            "DistributedSampler_53": {
                "variable": {
                    "value": "self.train_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "config.world_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "global_rank",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_54": {
                "variable": {
                    "value": "self.test_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "config.world_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "global_rank",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size // config.world_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.train_sampler",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size // config.world_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.test_sampler",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_72": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "'cuda:{}'.format(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradScaler_117": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_62": {
                "obj": {
                    "value": "{'model': raw_model.state_dict(), 'epoch': epoch, 'optimizer': optim.state_dict(), 'tokens': tokens, 'best_validation_loss': validation_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_url",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.config.ckpt_path, save_name + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "autocast_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_135": {
                "mode": {
                    "value": "is_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "split == 'train'",
                            "Compare"
                        ]
                    ]
                }
            },
            "clip_grad_norm__153": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__159": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_127": {
                "mode": {
                    "value": "is_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "split == 'train'",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "Transformer/datas/dataset.py": {
        "torch": {
            "from_numpy_107": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_65": {
                "start": {
                    "value": "image_size * image_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Transformer/inference.py": {
        "torch": {
            "load_61": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opts.ckpt_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load('kmeans_centers.npy')",
                            "Call"
                        ],
                        [
                            "np.rint(127.5 * (C + 1.0))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(C)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(y) / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_108": {
                "variable": {
                    "value": "a_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[a] * n_samples",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "b_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "b_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[y] * n_samples",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Transformer/main.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load('kmeans_centers.npy')",
                            "Call"
                        ],
                        [
                            "np.rint(127.5 * (C + 1.0))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(C)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_26": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "Transformer/models/model.py": {
        "torch": {
            "Linear_34": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "variable": {
                    "value": "self.resid_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q @ k.transpose(-2, -1) * (1.0 / math.sqrt(k.size(-1)))",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(self.mask[:, :, :T, :T] == 0, float('-inf'))",
                            "Call"
                        ],
                        [
                            "F.softmax(att, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_drop(att)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_86": {
                "variable": {
                    "value": "self.ln1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_87": {
                "variable": {
                    "value": "self.ln2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config.n_embd, 4 * config.n_embd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_106": {
                "variable": {
                    "value": "self.ln1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_107": {
                "variable": {
                    "value": "self.ln2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config.n_embd, 4 * config.n_embd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_137": {
                "variable": {
                    "value": "self.tok_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_138": {
                "variable": {
                    "value": "self.pos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, config.block_size, config.n_embd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_139": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_146": {
                "variable": {
                    "value": "self.ln_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamW_207": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optim_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': [param_dict[pn] for pn in sorted(list(decay))], 'weight_decay': train_config.weight_decay}, {'params': [param_dict[pn] for pn in sorted(list(no_decay))], 'weight_decay': 0.0}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "train_config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "train_config.betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_133": {
                "variable": {
                    "value": "self.sos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.n_embd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[Block_2(config) for _ in range(config.n_layer)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[Block(config) for _ in range(config.n_layer)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "token_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sos, token_embeddings[:, :-1, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tril_44": {
                "input": {
                    "value": "torch.ones(config.block_size, config.block_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_78": {
                "input": {
                    "value": "1.702 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * config.n_embd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "4 * config.n_embd",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * config.n_embd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GELU_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "4 * config.n_embd",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_113": {
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "config.block_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_240": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_254": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "*size": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_224": {
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "idx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_250": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "F.cross_entropy(logits.view(-1, logits.size(-1)), targets.view(-1), reduce=False)",
                            "Call"
                        ],
                        [
                            "loss * masks",
                            "BinOp"
                        ],
                        [
                            "F.cross_entropy(logits.view(-1, logits.size(-1)), targets.view(-1))",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss) / torch.sum(masks)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_44": {
                "*size": {
                    "value": "config.block_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "config.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_252": {
                "input": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masks.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "masks.view(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "Transformer/utils/util.py": {
        "torch": {
            "topk_23": {
                "variable": {
                    "value": "(v, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ],
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ],
                        [
                            "logits[:, i, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sample",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_19": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ],
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ],
                        [
                            "logits[:, i, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sample",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randint(maxLength + 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_sample",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randint(maxLength + 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_161": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ],
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ],
                        [
                            "logits[:, i, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_45": {
                "variable": {
                    "value": "ix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits_i, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_47": {
                "variable": {
                    "value": "(_, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits_i, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ],
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ],
                        [
                            "logits[:, i, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_80": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits_i, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ],
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ],
                        [
                            "logits[:, i, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ],
                        [
                            "logits[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_112": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits_i, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_141": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits[:, i, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits_i, top_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_142": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits_i, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "(output[:, :counter], pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}