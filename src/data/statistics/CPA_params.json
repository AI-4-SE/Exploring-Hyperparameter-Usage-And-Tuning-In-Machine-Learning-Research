{
    "util.py": {
        "sklearn": {
            "KFold_15": {
                "variable": {
                    "value": "split_Kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shuffle_18": {
                "variable": {
                    "value": "Kfoldtrain",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "Kfoldtrain",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shuffle_19": {
                "variable": {
                    "value": "Kfoldtest",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "Kfoldtest",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "full_40": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(data.num_nodes, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_104": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs[arg[:-2]]",
                            "Subscript"
                        ],
                        [
                            "torch.index_select(tmp, 0, edge_index[idx])",
                            "Call"
                        ],
                        [
                            "tmp[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "edge_index[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "layer.py": {
        "torch": {
            "ReLU_20": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.heads, 2 * self.nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, self.nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, self.nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.nhid, self.nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, self.nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(self.nhid, self.nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_56": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index[0], None, num_nodes)",
                            "Call"
                        ],
                        [
                            "torch.where(alpha > 0, alpha + 1, alpha)",
                            "Call"
                        ],
                        [
                            "alpha * degree",
                            "BinOp"
                        ],
                        [
                            "alpha",
                            "variable"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_60": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index[0], None, num_nodes)",
                            "Call"
                        ],
                        [
                            "torch.where(alpha > 0, alpha + 1, alpha)",
                            "Call"
                        ],
                        [
                            "alpha * degree",
                            "BinOp"
                        ],
                        [
                            "alpha",
                            "variable"
                        ]
                    ]
                }
            },
            "mul_62": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_j * ones.view(-1, self.heads, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.mul(self.w, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_23": {
                "*size": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_29": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_30": {
                "num_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "num_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_74": {
                "input": {
                    "value": "x_j * alpha.view(-1, self.heads, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scatter_add(ones, edge_index[0], dim_size=num_nodes)[edge_index[0]].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(degree, self.l1) + self.b1",
                            "BinOp"
                        ],
                        [
                            "self.activation(degree)",
                            "Call"
                        ],
                        [
                            "torch.matmul(degree, self.l2) + self.b2",
                            "BinOp"
                        ],
                        [
                            "degree.unsqueeze(-2)",
                            "Call"
                        ],
                        [
                            "scatter_add(ones, edge_index[0], dim_size=num_nodes)[edge_index[0]].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_77": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "alpha > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.cat([x_i, x_j], dim=-1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(alpha, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "softmax(alpha, edge_index[0], None, num_nodes)",
                            "Call"
                        ],
                        [
                            "torch.where(alpha > 0, alpha + 1, alpha)",
                            "Call"
                        ],
                        [
                            "alpha * degree",
                            "BinOp"
                        ],
                        [
                            "alpha",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_55": {
                "tensors": {
                    "value": "[x_i, x_j]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "input": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scatter_add(ones, edge_index[0], dim_size=num_nodes)[edge_index[0]].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(degree, self.l1) + self.b1",
                            "BinOp"
                        ],
                        [
                            "self.activation(degree)",
                            "Call"
                        ],
                        [
                            "torch.matmul(degree, self.l2) + self.b2",
                            "BinOp"
                        ],
                        [
                            "degree.unsqueeze(-2)",
                            "Call"
                        ],
                        [
                            "scatter_add(ones, edge_index[0], dim_size=num_nodes)[edge_index[0]].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "input": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scatter_add(ones, edge_index[0], dim_size=num_nodes)[edge_index[0]].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(degree, self.l1) + self.b1",
                            "BinOp"
                        ],
                        [
                            "self.activation(degree)",
                            "Call"
                        ],
                        [
                            "torch.matmul(degree, self.l2) + self.b2",
                            "BinOp"
                        ],
                        [
                            "degree.unsqueeze(-2)",
                            "Call"
                        ],
                        [
                            "scatter_add(ones, edge_index[0], dim_size=num_nodes)[edge_index[0]].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_72": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "test_acc_values",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kfold_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.kfold",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_127": {
                "variable": {
                    "value": "mean_test_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_acc_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(kfold_num, args.epochs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_28": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data.x, data.edge_index, data.batch)",
                            "Call"
                        ],
                        [
                            "model(data.x, data.edge_index, data.batch)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_50": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_108": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultiStepLR_109": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.wd, amsgrad=False)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[50, 100, 150, 200, 250, 300, 350, 400, 450, 500]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_value__30": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_128": {
                "input": {
                    "value": "mean_test_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(test_acc_values, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "ModuleList_23": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(conv_layer) for _ in range(config.n_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.nfeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_28": {
                "variable": {
                    "value": "self.linears_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_35": {
                "variable": {
                    "value": "self.bns_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nclass",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear(score_over_layer)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_70": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear(score_over_layer)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_64": {
                "input": {
                    "value": "self.linears_prediction[layer](h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "config.nfeat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_38": {
                "num_features": {
                    "value": "config.nfeat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_40": {
                "num_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}