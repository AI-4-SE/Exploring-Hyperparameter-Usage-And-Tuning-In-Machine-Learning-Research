{
    "dataloader.py": {
        "tensorflow": {
            "load_data_12": {
                "variable": {
                    "value": "((train_images, train_labels), (test_images, test_labels))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_35": {
                "variable": {
                    "value": "((train_images, train_labels), (test_images, test_labels))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_16": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_flip_left_right_18": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_19": {
                "variable": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_20": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[4, 4], [4, 4], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_crop_21": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(image)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_26": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_40": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_flip_left_right_42": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_43": {
                "variable": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_44": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[4, 4], [4, 4], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_crop_45": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(image)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_49": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([113.9, 123.0, 125.3])) / np.array([66.7, 62.1, 63.0])",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[4, 4], [4, 4], [0, 0]], 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, sz)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "(image - np.array([112, 124, 129])) / np.array([70, 65, 68])",
                            "BinOp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/AB.py": {
        "tensorflow": {
            "stop_gradient_37": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tl.feat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Mean_45": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "function_47": {
                "jit_compile": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "layers": {
                    "value": "[tcl.Conv2d([1, 1], tl.gamma.shape[-1]), tcl.BatchNorm()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_55": {
                "variable": {
                    "value": "distill_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "distill_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(distill_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_50": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "he_normal_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_40": {
                "input_tensor": {
                    "value": "tf.abs(tf.square(s + self.margin) * tf.cast(tf.logical_and(s > -self.margin, t <= 0.0), tf.float32) + tf.square(s - self.margin) * tf.cast(tf.logical_and(s <= self.margin, t > 0.0), tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_40": {
                "x": {
                    "value": "tf.square(s + self.margin) * tf.cast(tf.logical_and(s > -self.margin, t <= 0.0), tf.float32) + tf.square(s - self.margin) * tf.cast(tf.logical_and(s <= self.margin, t > 0.0), tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_40": {
                "x": {
                    "value": "s + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "tf.logical_and(s > -self.margin, t <= 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_41": {
                "x": {
                    "value": "s - self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_41": {
                "x": {
                    "value": "tf.logical_and(s <= self.margin, t > 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_40": {
                "x": {
                    "value": "s > -self.margin",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "t <= 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_and_41": {
                "x": {
                    "value": "s <= self.margin",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "t > 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/AT.py": {
        "tensorflow": {
            "stop_gradient_38": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tl.feat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "input_tensor": {
                    "value": "tf.square(tf.nn.l2_normalize(s, [1, 2]) - tf.nn.l2_normalize(t, [1, 2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "layers": {
                    "value": "[tcl.Conv2d([1, 1], tl.gamma.shape[-1]), tcl.BatchNorm()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_39": {
                "x": {
                    "value": "tf.nn.l2_normalize(s, [1, 2]) - tf.nn.l2_normalize(t, [1, 2])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_43": {
                "inputs": {
                    "value": "[self.loss(*data) / 2 ** (len(self.student_layers) - i - 1) for (i, data) in enumerate(zip(self.student_layers, self.teacher_layers, self.student.aux_layers))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "he_normal_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_normalize_39": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(tl.feat)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/CO.py": {
        "tensorflow": {
            "stop_gradient_44": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.maximum(tl.feat, m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_45": {
                "input_tensor": {
                    "value": "tf.square(s - t) * tf.cast((s > t) | (t > 0), tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "layers": {
                    "value": "[tcl.Conv2d([1, 1], tl.gamma.shape[-1]), tcl.BatchNorm()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_31": {
                "value": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(norm.cdf(-m / s) > 0.001, -s * np.exp(-(m / s) ** 2 / 2) / np.sqrt(2 * np.pi) / norm.cdf(-m / s) + m, -3 * s).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_44": {
                "x": {
                    "value": "tl.feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.numpy()",
                            "Call"
                        ],
                        [
                            "m",
                            "Method Argument"
                        ],
                        [
                            "m",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_45": {
                "x": {
                    "value": "s - t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_45": {
                "x": {
                    "value": "(s > t) | (t > 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "he_normal_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_49": {
                "inputs": {
                    "value": "[self.loss(*data) / 2 ** (len(self.student_layers) - i - 1) for (i, data) in enumerate(zip(self.student_layers, self.teacher_layers, self.student.aux_layers, self.margins))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/DML.py": {
        "tensorflow": {
            "SparseCategoricalCrossentropy_18": {
                "variable": {
                    "value": "self.loss_object",
                    "type": "Attribute",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_30": {
                "input_tensor": {
                    "value": "tf.nn.softmax(x, 1) * (tf.nn.log_softmax(x, 1) - tf.nn.log_softmax(y, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientTape_33": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_30": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / self.T",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_30": {
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y / self.T",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/FSP.py": {
        "tensorflow": {
            "reshape_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [B, -1, D])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, -1, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool2d(x_, [2, 2], 2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_, [B, -1, D_])",
                            "Call"
                        ],
                        [
                            "x_",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, -1, D_]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SGD_30": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Mean_31": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_68": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool2d(x_, [2, 2], 2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_, [B, -1, D_])",
                            "Call"
                        ],
                        [
                            "x_",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "function_33": {
                "experimental_compile": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "layers": {
                    "value": "[tcl.Conv2d([1, 1], tl.gamma.shape[-1]), tcl.BatchNorm()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_49": {
                "variable": {
                    "value": "distill_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "distill_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(distill_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_36": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [B, -1, D])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool2d(x_, [2, 2], 2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_, [B, -1, D_])",
                            "Call"
                        ],
                        [
                            "x_",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "he_normal_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_46": {
                "input_tensor": {
                    "value": "tf.square(Gram(s, s_) - tf.stop_gradient(Gram(t, t_)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_46": {
                "x": {
                    "value": "Gram(s, s_) - tf.stop_gradient(Gram(t, t_))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_46": {
                "input": {
                    "value": "Gram(t, t_)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/FT.py": {
        "tensorflow": {
            "Sequential_40": {
                "variable": {
                    "value": "self.student.aux_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tcl.Conv2d([3, 3], int(D * rate), 1, name='conv0'), tcl.BatchNorm(name='bn0'), tcl.Conv2d([3, 3], int(D * rate ** 2), int(1 / rate), name='conv1'), tcl.BatchNorm(name='bn1'), tcl.Conv2d([3, 3], int(D * rate ** 3), 1, activation_fn=None, name='conv2'), tcl.BatchNorm(activation_fn=None, name='bn2')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_61": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.aux_layers[0](self.teacher_layer.feat, training=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_62": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.student.aux_layers(self.student_layer.feat, training=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SGD_67": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Mean_68": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "function_71": {
                "experimental_compile": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "layers": {
                    "value": "[tcl.Conv2d([3, 3], int(D * rate), 1, name='conv0'), tcl.BatchNorm(name='bn0'), tcl.Conv2d([3, 3], int(D * rate ** 2), int(1 / rate), name='conv1'), tcl.BatchNorm(name='bn1'), tcl.Conv2d([3, 3], int(D * rate ** 3), 1, name='conv2'), tcl.BatchNorm(activation_fn=None, name='bn2')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "layers": {
                    "value": "[tcl.Conv2d_transpose([3, 3], int(D * rate ** 2), 1, name='convt0'), tcl.BatchNorm(name='bnt0'), tcl.Conv2d_transpose([3, 3], int(D * rate), int(1 / rate), name='convt1'), tcl.BatchNorm(name='bnt1'), tcl.Conv2d_transpose([3, 3], D, 1, use_biases=True, name='convt2')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "leaky_relu_77": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.aux_layers[0](feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_64": {
                "input_tensor": {
                    "value": "tf.abs(t - s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_64": {
                "x": {
                    "value": "t - s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "input_tensor": {
                    "value": "tf.abs(enc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_81": {
                "x": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(self.aux_layers[0](feat))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/FitNet.py": {
        "tensorflow": {
            "SGD_35": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Mean_36": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "function_38": {
                "experimental_compile": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "layers": {
                    "value": "[tcl.Conv2d([1, 1], tl.gamma.shape[-1]), tcl.BatchNorm()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_52": {
                "variable": {
                    "value": "distill_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "distill_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.add_n(distill_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_41": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_48": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tl.feat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "he_normal_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "tf.square(s - t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_51": {
                "x": {
                    "value": "s - t",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/KDSVD.py": {
        "tensorflow": {
            "add_n_58": {
                "variable": {
                    "value": "self.distill_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "distill_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "aux(s.feat)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[B, H * W, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "variable": {
                    "value": "sVs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(aux(s.feat), [B, H * W, D])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVD.SVD(t.feat, self.distilled_SV)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l2_normalize_43": {
                "variable": {
                    "value": "sV",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sVs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(feat, tU, transpose_a=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_45": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVD.SVD(t.feat, self.distilled_SV)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ts, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "layers": {
                    "value": "[tcl.Conv2d([1, 1], tl.gamma.shape[-1]), tcl.BatchNorm()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_50": {
                "variable": {
                    "value": "S_rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.square(tf.expand_dims(sV, 2) - tf.expand_dims(sV_, 1)) / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_51": {
                "variable": {
                    "value": "T_rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.square(tf.expand_dims(tV, 2) - tf.expand_dims(tV_, 1)) / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_53": {
                "variable": {
                    "value": "l2loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.is_finite(l2loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "l2loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(S_rbf - tf.stop_gradient(T_rbf)) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_finite(l2loss), l2loss, tf.zeros_like(l2loss))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(l2loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_38": {
                "device_name": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_norm_66": {
                "t": {
                    "value": "dg",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "tf.norm(tg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "he_normal_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_finite_53": {
                "x": {
                    "value": "l2loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(S_rbf - tf.stop_gradient(T_rbf)) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_finite(l2loss), l2loss, tf.zeros_like(l2loss))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_53": {
                "input": {
                    "value": "l2loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(S_rbf - tf.stop_gradient(T_rbf)) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_finite(l2loss), l2loss, tf.zeros_like(l2loss))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_54": {
                "input_tensor": {
                    "value": "l2loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(S_rbf - tf.stop_gradient(T_rbf)) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_finite(l2loss), l2loss, tf.zeros_like(l2loss))",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_66": {
                "tensor": {
                    "value": "tg",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_52": {
                "input": {
                    "value": "T_rbf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-tf.square(tf.expand_dims(tV, 2) - tf.expand_dims(tV_, 1)) / 8)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_50": {
                "x": {
                    "value": "tf.expand_dims(sV, 2) - tf.expand_dims(sV_, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_51": {
                "x": {
                    "value": "tf.expand_dims(tV, 2) - tf.expand_dims(tV_, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_50": {
                "input": {
                    "value": "sV_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sV",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_51": {
                "input": {
                    "value": "tV_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tV",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/RKD.py": {
        "tensorflow": {
            "reduce_sum_8": {
                "variable": {
                    "value": "x_square",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_9": {
                "variable": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_10": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.expand_dims(x_square, 1) + tf.expand_dims(x_square, 0) - 2 * prod, 1e-12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_16": {
                "variable": {
                    "value": "e_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 0) - tf.expand_dims(x, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_5": {
                "input_tensor": {
                    "value": "tf.where(tf.less_equal(tf.abs(x - y), 1.0), tf.square(x - y) / 2, tf.abs(x - y) - 1 / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_17": {
                "a": {
                    "value": "e_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(e, 2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "e_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(e, 2)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l2_normalize_40": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sl.feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_41": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tl.feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_5": {
                "condition": {
                    "value": "tf.less_equal(tf.abs(x - y), 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(x - y) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(x - y) - 1 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_8": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_10": {
                "x": {
                    "value": "tf.expand_dims(x_square, 1) + tf.expand_dims(x_square, 0) - 2 * prod",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_11": {
                "input_tensor": {
                    "value": "tf.cast(distance > 0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_15": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_equal_5": {
                "x": {
                    "value": "tf.abs(x - y)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_11": {
                "x": {
                    "value": "distance > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_5": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_5": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_10": {
                "input": {
                    "value": "x_square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(x), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/SVD.py": {
        "tensorflow": {
            "reshape_8": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [B, H * W, D])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H * W, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_14": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(s, [0, 0], [-1, n])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_15": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(v, [0, 0, 0], [-1, -1, n])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_16": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(u, [0, 0, 0], [-1, -1, n])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_20": {
                "variable": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [B, H * W, D])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_21": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(tf.reduce_max(tf.abs(cosine), 1, keepdims=True), tf.abs(cosine))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(cosine)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(cosine)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [B, H * W, D])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(tf.reduce_max(tf.abs(cosine), 1, keepdims=True), tf.abs(cosine)), tf.sign(cosine), tf.zeros_like(cosine))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_4": {
                "condition": {
                    "value": "tf.math.is_finite(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [B, H * W, D])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [B, H * W, D])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [B, H * W, D])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "M > N",
                    "type": "Compare",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "M <= N",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "eigh_32": {
                "variable": {
                    "value": "(_, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, x, transpose_a=M > N, transpose_b=M <= N)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_33": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.eigh(xx)",
                            "Call"
                        ],
                        [
                            "tf.gather(V, list(range(min(M, N)))[::-1], axis=2)",
                            "Call"
                        ],
                        [
                            "Vs / tf.maximum(s, 1e-12)",
                            "BinOp"
                        ],
                        [
                            "U",
                            "variable"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(min(M, N)))[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVD_custom(x)",
                            "Call"
                        ],
                        [
                            "removenan(s)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.slice(s, [0, 0], [-1, n]), 1)",
                            "Call"
                        ],
                        [
                            "tf.norm(Us, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.norm(Vs, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(s, [B, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_50": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVD_custom(x)",
                            "Call"
                        ],
                        [
                            "removenan(s)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.slice(s, [0, 0], [-1, n]), 1)",
                            "Call"
                        ],
                        [
                            "tf.norm(Us, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.norm(Vs, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(s, [B, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_51": {
                "variable": {
                    "value": "s_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVD_custom(x)",
                            "Call"
                        ],
                        [
                            "removenan(s)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.slice(s, [0, 0], [-1, n]), 1)",
                            "Call"
                        ],
                        [
                            "tf.norm(Us, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.norm(Vs, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(s, [B, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_53": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.eye(K)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_55": {
                "variable": {
                    "value": "KT",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - eye) / (tf.expand_dims(s_2, 2) - tf.expand_dims(s_2, 1) + eye)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_75": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(M, N)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : left_grad(U, S, V, dU, dV)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : right_grad(U, S, V, dU, dV)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_finite_4": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [B, H * W, D])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_4": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [B, H * W, D])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "slice_14": {
                "input_": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVD_custom(x)",
                            "Call"
                        ],
                        [
                            "removenan(s)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.slice(s, [0, 0], [-1, n]), 1)",
                            "Call"
                        ],
                        [
                            "tf.norm(Us, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.norm(Vs, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(s, [B, -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_15": {
                "input_": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVD_custom(x)",
                            "Call"
                        ],
                        [
                            "removenan(v)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.slice(v, [0, 0, 0], [-1, -1, n]), 1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_16": {
                "input_": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVD_custom(x)",
                            "Call"
                        ],
                        [
                            "removenan(u)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.slice(u, [0, 0, 0], [-1, -1, n]), 1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_21": {
                "x": {
                    "value": "tf.reduce_max(tf.abs(cosine), 1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(cosine)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_22": {
                "x": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, y, transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_22": {
                "input": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, y, transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_28": {
                "device_name": {
                    "value": "CPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "Us",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [B, H * W, D])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.eigh(xx)",
                            "Call"
                        ],
                        [
                            "tf.gather(V, list(range(min(M, N)))[::-1], axis=2)",
                            "Call"
                        ],
                        [
                            "Vs / tf.maximum(s, 1e-12)",
                            "BinOp"
                        ],
                        [
                            "U",
                            "variable"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_37": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Us",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, V)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "Vs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [B, H * W, D])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Us / tf.maximum(s, 1e-12)",
                            "BinOp"
                        ],
                        [
                            "V",
                            "variable"
                        ],
                        [
                            "V",
                            "variable"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_42": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Vs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, U, transpose_a=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "dU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dV",
                            "variable"
                        ],
                        [
                            "dU",
                            "Method Argument"
                        ],
                        [
                            "dU",
                            "Method Argument"
                        ],
                        [
                            "dU",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.linalg.diag(1 / (s + 1e-08))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_65": {
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Us / tf.maximum(s, 1e-12)",
                            "BinOp"
                        ],
                        [
                            "V",
                            "variable"
                        ],
                        [
                            "V",
                            "variable"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(dU, tf.linalg.diag(1 / (s + 1e-08)))",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_68": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.greater(M, N), lambda : left_grad(U, S, V, dU, dV), lambda : right_grad(U, S, V, dU, dV))",
                            "Call"
                        ],
                        [
                            "tf.matmul(D - tf.matmul(U, tf.linalg.diag(tf.linalg.diag_part(tf.matmul(U, D, transpose_a=True))) + 2 * tf.matmul(S, msym(KT * tf.matmul(D, tf.matmul(U, S), transpose_a=True)))), V, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(grad, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.matmul(2 * tf.matmul(U, tf.matmul(S, msym(KT * tf.matmul(V, dV, transpose_a=True)))), V, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "a": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.eigh(xx)",
                            "Call"
                        ],
                        [
                            "tf.gather(V, list(range(min(M, N)))[::-1], axis=2)",
                            "Call"
                        ],
                        [
                            "Vs / tf.maximum(s, 1e-12)",
                            "BinOp"
                        ],
                        [
                            "U",
                            "variable"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "dV",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dU",
                            "variable"
                        ],
                        [
                            "dV",
                            "Method Argument"
                        ],
                        [
                            "dV",
                            "Method Argument"
                        ],
                        [
                            "dV",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_21": {
                "input_tensor": {
                    "value": "tf.abs(cosine)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_21": {
                "x": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, y, transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_53": {
                "num_rows": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(M, N)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_75": {
                "x": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_38": {
                "x": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVD_custom(x)",
                            "Call"
                        ],
                        [
                            "removenan(s)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.slice(s, [0, 0], [-1, n]), 1)",
                            "Call"
                        ],
                        [
                            "tf.norm(Us, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.norm(Vs, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(s, [B, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_43": {
                "x": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVD_custom(x)",
                            "Call"
                        ],
                        [
                            "removenan(s)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(tf.slice(s, [0, 0], [-1, n]), 1)",
                            "Call"
                        ],
                        [
                            "tf.norm(Us, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.norm(Vs, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(s, [B, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "transpose_59": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "diag_63": {
                "diagonal": {
                    "value": "1 / (s + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_54": {
                "input": {
                    "value": "s_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(s)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_65": {
                "diagonal": {
                    "value": "tf.linalg.diag_part(tf.matmul(U, D, transpose_a=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_part_65": {
                "input": {
                    "value": "tf.matmul(U, D, transpose_a=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Us / tf.maximum(s, 1e-12)",
                            "BinOp"
                        ],
                        [
                            "V",
                            "variable"
                        ],
                        [
                            "V",
                            "variable"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ],
                        [
                            "U",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(s)",
                            "Call"
                        ],
                        [
                            "S",
                            "Method Argument"
                        ],
                        [
                            "S",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "distiller/Soft_logits.py": {
        "tensorflow": {
            "reduce_sum_29": {
                "input_tensor": {
                    "value": "tf.nn.softmax(x, 1) * (tf.nn.log_softmax(x, 1) - tf.nn.log_softmax(y, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_29": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / self.T",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_29": {
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y / self.T",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distiller/VID.py": {
        "tensorflow": {
            "stop_gradient_44": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tl.feat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_45": {
                "features": {
                    "value": "aux.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_46": {
                "input_tensor": {
                    "value": "tf.math.log(var) + tf.square(t - s) / var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_50": {
                "inputs": {
                    "value": "[self.loss(*data) for (i, data) in enumerate(zip(self.student_layers, self.teacher_layers, self.aux_layers))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "layers": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "he_normal_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_33": {
                "value": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_46": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.softplus(aux.alpha) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_46": {
                "x": {
                    "value": "t - s",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nets/WResNet.py": {
        "tensorflow": {
            "reduce_mean_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Layers['conv'](x)",
                            "Call"
                        ],
                        [
                            "self.Layers['bn_last'](x)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, [1, 2])",
                            "Call"
                        ],
                        [
                            "self.Layers['fc'](x)",
                            "Call"
                        ],
                        [
                            "residual + out",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "nets/tcl.py": {
        "tensorflow": {
            "conv2d_56": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilations": {
                    "value": "self.dilations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_transpose_123": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[input.shape[0]] + self.output_shape_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilations": {
                    "value": "self.dilations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_179": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filter": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel",
                            "Attribute"
                        ],
                        [
                            "self.kernel",
                            "Attribute"
                        ]
                    ]
                },
                "strides": {
                    "value": "self.strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilations": {
                    "value": "self.dilations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_226": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel",
                            "Attribute"
                        ],
                        [
                            "self.kernel",
                            "Attribute"
                        ]
                    ]
                }
            },
            "batch_normalization_316": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(input, list(range(len(input.shape) - 1)), keepdims=True)",
                            "Call"
                        ],
                        [
                            "self.moving_mean",
                            "Attribute"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(input, list(range(len(input.shape) - 1)), keepdims=True)",
                            "Call"
                        ],
                        [
                            "self.moving_var",
                            "Attribute"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beta",
                            "Attribute"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gamma",
                            "Attribute"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarianceScaling_15": {
                "scale": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "fan_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Zeros_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "VarianceScaling_75": {
                "scale": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "fan_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Zeros_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "VarianceScaling_141": {
                "scale": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "fan_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Zeros_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "he_normal_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Zeros_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Zeros_256": {
                "variable": {
                    "value": "param_initializers[moving_mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Ones_258": {
                "variable": {
                    "value": "param_initializers[moving_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Ones_260": {
                "variable": {
                    "value": "param_initializers[gamma]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Zeros_262": {
                "variable": {
                    "value": "param_initializers[beta]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "moments_308": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(input.shape) - 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "op_util.py": {
        "tensorflow": {
            "SparseCategoricalCrossentropy_9": {
                "variable": {
                    "value": "loss_object",
                    "type": "variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_10": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LR",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Mean_15": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_16": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_17": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_18": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "function_20": {
                "jit_compile": {
                    "value": "COMPILE_MODE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "function_47": {
                "jit_compile": {
                    "value": "COMPILE_MODE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "name_scope_8": {
                "name": {
                    "value": "Optimizer_w_Distillation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_22": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "tensorflow": {
            "list_physical_devices_26": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_log_device_placement_25": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_memory_growth_27": {
                "device": {
                    "value": "gpus[args.gpu_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_visible_devices_28": {
                "devices": {
                    "value": "gpus[args.gpu_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "train_w_distillation.py": {
        "tensorflow": {
            "list_physical_devices_82": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "create_file_writer_121": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "args.train_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flush_millis": {
                    "value": "30000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_46": {
                "name": {
                    "value": "Categorical_loss/train",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_loss.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_47": {
                "name": {
                    "value": "Categorical_loss/test",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_loss.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_48": {
                "name": {
                    "value": "Accuracy/train",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_accuracy.result() * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_49": {
                "name": {
                    "value": "Accuracy/test",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "test_accuracy.result() * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_50": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_step(images, labels)",
                            "Call"
                        ],
                        [
                            "args.learning_rate",
                            "Attribute"
                        ],
                        [
                            "lr * args.decay_rate",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epoch in range(init_epoch, init_epoch + args.train_epoch)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "epoch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_visible_devices_83": {
                "devices": {
                    "value": "gpus[args.gpu_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_84": {
                "device": {
                    "value": "gpus[args.gpu_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}