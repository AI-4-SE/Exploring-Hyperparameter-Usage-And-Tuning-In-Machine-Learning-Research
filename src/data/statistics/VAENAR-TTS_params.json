{
    "audio/audio.py": {
        "torch": {}
    },
    "dataset.py": {
        "torch": {}
    },
    "evaluate.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_36": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset('val.txt', preprocess_config, train_config, sort=True, drop_last=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_config['optimizer']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hifigan/models.py": {
        "torch": {
            "ModuleList_24": {
                "variable": {
                    "value": "self.convs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=dilation[0], padding=get_padding(kernel_size, dilation[0]))), weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=dilation[1], padding=get_padding(kernel_size, dilation[1]))), weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=dilation[2], padding=get_padding(kernel_size, dilation[2])))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.convs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=1, padding=get_padding(kernel_size, 1))), weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=1, padding=get_padding(kernel_size, 1))), weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=1, padding=get_padding(kernel_size, 1)))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "weight_norm_118": {
                "variable": {
                    "value": "self.conv_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "Conv1d(80, h.upsample_initial_channel, 7, 1, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.ups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_137": {
                "variable": {
                    "value": "self.resblocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_145": {
                "variable": {
                    "value": "self.conv_post",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "Conv1d(ch, 1, 7, 1, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_161": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xt + x",
                            "BinOp"
                        ],
                        [
                            "self.conv_pre(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.ups[i](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "xs / self.num_kernels",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_163": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xt + x",
                            "BinOp"
                        ],
                        [
                            "self.conv_pre(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.ups[i](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "xs / self.num_kernels",
                            "BinOp"
                        ]
                    ]
                }
            },
            "leaky_relu_98": {
                "variable": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xt + x",
                            "BinOp"
                        ],
                        [
                            "self.conv_pre(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.ups[i](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "xs / self.num_kernels",
                            "BinOp"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "LRELU_SLOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "leaky_relu_100": {
                "variable": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "c1(xt)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(xt, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "c2(xt)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "LRELU_SLOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "leaky_relu_152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xt + x",
                            "BinOp"
                        ],
                        [
                            "self.conv_pre(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.ups[i](x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "xs / self.num_kernels",
                            "BinOp"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "LRELU_SLOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "remove_weight_norm_173": {
                "module": {
                    "value": "self.conv_pre",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "remove_weight_norm_174": {
                "module": {
                    "value": "self.conv_post",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "remove_weight_norm_107": {
                "module": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convs1",
                            "Attribute"
                        ],
                        [
                            "self.convs2",
                            "Attribute"
                        ],
                        [
                            "self.ups",
                            "Attribute"
                        ],
                        [
                            "self.resblocks",
                            "Attribute"
                        ]
                    ]
                }
            },
            "remove_weight_norm_109": {
                "module": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convs1",
                            "Attribute"
                        ],
                        [
                            "self.convs2",
                            "Attribute"
                        ],
                        [
                            "self.ups",
                            "Attribute"
                        ],
                        [
                            "self.resblocks",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv1d_119": {
                "in_channels": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h.upsample_initial_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_145": {
                "in_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.upsample_initial_channel // 2 ** (i + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "remove_weight_norm_170": {
                "module": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convs1",
                            "Attribute"
                        ],
                        [
                            "self.convs2",
                            "Attribute"
                        ],
                        [
                            "self.ups",
                            "Attribute"
                        ],
                        [
                            "self.resblocks",
                            "Attribute"
                        ]
                    ]
                }
            },
            "weight_norm_26": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=dilation[0], padding=get_padding(kernel_size, dilation[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_36": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=dilation[1], padding=get_padding(kernel_size, dilation[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_46": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=dilation[2], padding=get_padding(kernel_size, dilation[2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_62": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=1, padding=get_padding(kernel_size, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_72": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=1, padding=get_padding(kernel_size, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_82": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=1, padding=get_padding(kernel_size, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_126": {
                "module": {
                    "value": "ConvTranspose1d(h.upsample_initial_channel // 2 ** i, h.upsample_initial_channel // 2 ** (i + 1), k, u, padding=(k - u) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_27": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "get_padding(kernel_size, dilation[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_37": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "get_padding(kernel_size, dilation[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_47": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "get_padding(kernel_size, dilation[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_63": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "get_padding(kernel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_73": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "get_padding(kernel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_83": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "get_padding(kernel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_127": {
                "in_channels": {
                    "value": "h.upsample_initial_channel // 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h.upsample_initial_channel // 2 ** (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(k - u) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/VAENAR.py": {
        "torch": {
            "mean_110": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p - q",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_120": {
                "variable": {
                    "value": "log_tgt_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_lengths.type(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_121": {
                "variable": {
                    "value": "log_pre_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.length_predictor(text_embd.detach(), text_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_158": {
                "variable": {
                    "value": "reduced_mel_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mel_lengths + reduction_factor - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "reduction_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "rounding_mode": {
                    "value": "trunc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_182": {
                "variable": {
                    "value": "batched_text_embd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_embd.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, self.n_sample, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_185": {
                "variable": {
                    "value": "batched_mel_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mel_targets.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, self.n_sample, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_189": {
                "variable": {
                    "value": "batched_mel_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mel_lengths.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, self.n_sample]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_193": {
                "variable": {
                    "value": "batched_r_mel_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reduced_mel_lens.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, self.n_sample]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_197": {
                "variable": {
                    "value": "batched_text_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_lengths.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, self.n_sample]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_96": {
                "variable": {
                    "value": "l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.mean(torch.square(r - t), dim=-1) * seq_mask, dim=-1) / reshaped_lens.type(torch.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_102": {
                "variable": {
                    "value": "l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.square(r - t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_104": {
                "input": {
                    "value": "l2_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.sum(torch.mean(torch.square(r - t), dim=-1) * seq_mask, dim=-1) / reshaped_lens.type(torch.float32), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.mean(torch.square(r - t), dim=[1, 2, 3])",
                            "Call"
                        ],
                        [
                            "self._compute_l2_loss(decoded_outs, batched_mel_targets, batched_mel_lengths, reduce_loss)",
                            "Call"
                        ],
                        [
                            "l2_loss + initial_l2_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_112": {
                "input": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(p - q, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_123": {
                "input": {
                    "value": "torch.square(log_pre_lengths - log_tgt_lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_125": {
                "input": {
                    "value": "log_pre_lengths - log_tgt_lengths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_102": {
                "input": {
                    "value": "r - t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_123": {
                "input": {
                    "value": "log_pre_lengths - log_tgt_lengths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_97": {
                "input": {
                    "value": "torch.mean(torch.square(r - t), dim=-1) * seq_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_98": {
                "input": {
                    "value": "torch.square(r - t)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_98": {
                "input": {
                    "value": "r - t",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/attention.py": {
        "torch": {
            "tile_34": {
                "variable": {
                    "value": "memeory_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memeory_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, query_max_time, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_39": {
                "variable": {
                    "value": "query_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_mask.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, 1, memory_max_time]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_41": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memeory_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_mask_from_lengths(memory_lengths, memory_max_time)",
                            "Call"
                        ],
                        [
                            "torch.tile(memeory_mask.unsqueeze(1), [1, query_max_time, 1])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "query_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_mask_from_lengths(query_lengths, query_max_time)",
                            "Call"
                        ],
                        [
                            "torch.tile(query_mask.unsqueeze(2), [1, 1, memory_max_time])",
                            "Call"
                        ],
                        [
                            "get_mask_from_lengths(query_lengths, query_max_time)",
                            "Call"
                        ],
                        [
                            "torch.tile(query_mask.unsqueeze(2), [1, 1, memory_max_time])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_88": {
                "variable": {
                    "value": "memory_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memory_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, query_max_time, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_93": {
                "variable": {
                    "value": "query_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_mask.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, 1, memory_max_time]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_95": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memory_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_mask_from_lengths(memory_lengths, memory_max_time)",
                            "Call"
                        ],
                        [
                            "torch.tile(memory_mask.unsqueeze(1), [1, query_max_time, 1])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "query_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_mask_from_lengths(query_lengths, query_max_time)",
                            "Call"
                        ],
                        [
                            "torch.tile(query_mask.unsqueeze(2), [1, 1, memory_max_time])",
                            "Call"
                        ],
                        [
                            "get_mask_from_lengths(query_lengths, query_max_time)",
                            "Call"
                        ],
                        [
                            "torch.tile(query_mask.unsqueeze(2), [1, 1, memory_max_time])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_96": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "length_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, self.num_head, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tril_103": {
                "variable": {
                    "value": "causal_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(logits.shape, dtype=torch.bool, device=logits.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_113": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "headed_queries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_head(queries)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "headed_keys.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_129": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_and(memeory_mask, query_mask)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(memory_mask, query_mask)",
                            "Call"
                        ],
                        [
                            "torch.tile(length_mask.unsqueeze(1), [1, self.num_head, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._get_key_mask(batch_size, memory_max_time, query_max_time, memory_lengths, query_lengths, inputs.device)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(length_mask, causal_mask)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(headed_queries, headed_keys.transpose(-2, -1))",
                            "Call"
                        ],
                        [
                            "logits / math.sqrt(float(self.attention_dim // self.num_head))",
                            "BinOp"
                        ],
                        [
                            "logits / self.temperature",
                            "BinOp"
                        ],
                        [
                            "torch.where(length_mask, logits, paddings)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(logits, dtype=torch.float32) * (-2.0 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(headed_queries, headed_keys.transpose(-2, -1))",
                            "Call"
                        ],
                        [
                            "logits / math.sqrt(float(self.attention_dim // self.num_head))",
                            "BinOp"
                        ],
                        [
                            "logits / self.temperature",
                            "BinOp"
                        ],
                        [
                            "torch.where(length_mask, logits, paddings)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_131": {
                "variable": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "headed_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_head(values)",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNorm_149": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs, att_outs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_175": {
                "variable": {
                    "value": "self.layer_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_180": {
                "variable": {
                    "value": "self.layer_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "attention_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs, self_att_outs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self_att_outs, att_outs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logical_and_126": {
                "variable": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "length_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_and(memeory_mask, query_mask)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(memory_mask, query_mask)",
                            "Call"
                        ],
                        [
                            "torch.tile(length_mask.unsqueeze(1), [1, self.num_head, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._get_key_mask(batch_size, memory_max_time, query_max_time, memory_lengths, query_lengths, inputs.device)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(length_mask, causal_mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "causal_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tril(torch.ones(logits.shape, dtype=torch.bool, device=logits.device))",
                            "Call"
                        ],
                        [
                            "self._get_causal_mask(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_103": {
                "*size": {
                    "value": "logits.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_128": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(headed_queries, headed_keys.transpose(-2, -1))",
                            "Call"
                        ],
                        [
                            "logits / math.sqrt(float(self.attention_dim // self.num_head))",
                            "BinOp"
                        ],
                        [
                            "logits / self.temperature",
                            "BinOp"
                        ],
                        [
                            "torch.where(length_mask, logits, paddings)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_32": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_37": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_86": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_91": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/decoder.py": {
        "torch": {
            "ModuleList_68": {
                "variable": {
                    "value": "self.attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CrossAttentionBlock(input_dim=attention_dim, memory_dim=embd_dim, attention_dim=attention_dim, attention_heads=attention_heads, attention_temperature=temperature, ffn_hidden=ffn_hidden, name='decoder-attention-{}'.format(i)) for i in range(nblk)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_34": {
                "variable": {
                    "value": "l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.mean(torch.abs(reconstructed - targets), dim=-1) * seq_mask, dim=-1) / lengths.type(torch.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l1_loss_41": {
                "variable": {
                    "value": "l1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstructed",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_49": {
                "variable": {
                    "value": "l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.mean(torch.square(reconstructed - targets), dim=-1) * seq_mask, dim=-1) / lengths.type(torch.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_56": {
                "variable": {
                    "value": "l2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstructed",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_35": {
                "input": {
                    "value": "torch.mean(torch.abs(reconstructed - targets), dim=-1) * seq_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "torch.mean(torch.square(reconstructed - targets), dim=-1) * seq_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_36": {
                "input": {
                    "value": "torch.abs(reconstructed - targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_51": {
                "input": {
                    "value": "torch.square(reconstructed - targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_37": {
                "input": {
                    "value": "reconstructed - targets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_52": {
                "input": {
                    "value": "reconstructed - targets",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/encoder.py": {
        "torch": {
            "Embedding_18": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.pe_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pos_drop_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.self_attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SelfAttentionBlock(input_dim=pre_hidden, attention_dim=attention_dim, attention_heads=attention_heads, attention_temperature=attention_temperature, ffn_hidden=ffn_hidden) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "model/flow.py": {
        "torch": {
            "matmul_57": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.linalg.inv(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_89": {
                "variable": {
                    "value": "logdet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_108": {
                "variable": {
                    "value": "_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs.view(-1, self.channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_109": {
                "variable": {
                    "value": "_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs.view(-1, self.channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_146": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_scale + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_153": {
                "variable": {
                    "value": "logdet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(scale) * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_163": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_scale + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_130": {
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "inputs.shape[-1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "data": {
                    "value": "torch.from_numpy(w_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inv_67": {
                "A": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_83": {
                "data": {
                    "value": "torch.normal(0.0, 0.05, [self.channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_84": {
                "data": {
                    "value": "torch.zeros(self.channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_99": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_110": {
                "input": {
                    "value": "init_scale / (_std + epsilon)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_151": {
                "input": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_154": {
                "tensors": {
                    "value": "[zp, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_168": {
                "input": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_170": {
                "input": {
                    "value": "torch.log(scale) * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_171": {
                "tensors": {
                    "value": "[zp, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "ndarray": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linalg.qr(np.random.randn(channels, channels))[0].astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_83": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "[self.channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "*size": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_88": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_98": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_153": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(log_scale + 2.0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(log_scale + 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "slogdet_58": {
                "input": {
                    "value": "self.weight.double()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_60": {
                "*size": {
                    "value": "input_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slogdet_68": {
                "input": {
                    "value": "torch.linalg.inv(self.weight.double())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "input_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_91": {
                "*size": {
                    "value": "input_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_101": {
                "*size": {
                    "value": "input_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_170": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(log_scale + 2.0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(log_scale + 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "inv_68": {
                "A": {
                    "value": "self.weight.double()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/glow.py": {
        "torch": {
            "zeros_23": {
                "variable": {
                    "value": "total_logdet",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[z.size(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "total_logdet",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[z.size(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "total_logdet",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[z.size(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_69": {
                "variable": {
                    "value": "self.flows",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GlowBlock(channels, n_transformer_blk, embd_dim, attention_dim, attention_heads, temperature, ffn_hidden, orders[i % 2]) for i in range(n_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "total_logdet",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[z.size(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "total_logdet",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[z.size(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "total_logdet",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[z.size(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/length_predictor.py": {
        "torch": {
            "sum_17": {
                "variable": {
                    "value": "target_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(torch.exp(proj_outs) * mask).squeeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_17": {
                "input": {
                    "value": "proj_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.projection(inputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/optimizer.py": {
        "torch": {
            "Adam_10": {
                "variable": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "train_config['optimizer']['betas']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "train_config['optimizer']['eps']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model/posterior.py": {
        "torch": {
            "exp_36": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_72": {
                "variable": {
                    "value": "sample_level_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_mask * time_level_log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "variable": {
                    "value": "self.pe_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pos_drop_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_102": {
                "variable": {
                    "value": "self.attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CrossAttentionBlock(input_dim=pre_hidden, memory_dim=embd_dim, attention_dim=attention_dim, attention_heads=attention_heads, attention_temperature=temperature, ffn_hidden=ffn_hidden) for i in range(nblk)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "normal_38": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "[batch, nsamples, max_time, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, nsamples, max_time, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "mu.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "[batch, max_time]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "mu.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "expanded_logvar + normalized_samples ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_62": {
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/prior.py": {
        "torch": {
            "max_27": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets_lengths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normal_28": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "generator": {
                    "value": "[batch_size, length, self.channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_32": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_mask * logprobs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_mask * logprobs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "model/transform.py": {
        "torch": {
            "ModuleList_40": {
                "variable": {
                    "value": "self.attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[CrossAttentionBlock(input_dim=attention_dim, memory_dim=embd_dim, attention_dim=attention_dim, attention_heads=attention_heads, attention_temperature=temperature, ffn_hidden=ffn_hidden) for i in range(nblk)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "model/utils.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_39": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_81": {
                "variable": {
                    "value": "self.conv_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Conv1D(in_channels=hidden, out_channels=hidden, kernel_size=conv_kernel, activation=activation, drop_rate=drop_rate, bn_before_act=bn_before_act) for i in range(nconv)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_103": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_127": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_128": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_152": {
                "variable": {
                    "value": "self.conv_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Conv1D(in_channels=hidden if i == 0 else conv_filters, out_channels=conv_filters, kernel_size=conv_kernel, activation=activations[i], drop_rate=drop_rate) for i in range(n_conv)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tile_181": {
                "variable": {
                    "value": "pos_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(torch.arange(0, len, dtype=torch.float32, device=device) * step).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_184": {
                "variable": {
                    "value": "dim_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, dim, dtype=torch.float32, device=device).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[len, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_188": {
                "variable": {
                    "value": "pos_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.eq(torch.fmod(dim_mat_int, 2), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.sin(pos_mat / torch.pow(10000.0, dim_mat / float(dim)))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.cos(pos_mat / torch.pow(10000.0, (dim_mat - 1) / float(dim)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_185": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_185": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_189": {
                "input": {
                    "value": "torch.fmod(dim_mat_int, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_190": {
                "input": {
                    "value": "pos_mat / torch.pow(10000.0, dim_mat / float(dim))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_191": {
                "input": {
                    "value": "pos_mat / torch.pow(10000.0, (dim_mat - 1) / float(dim))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "fmod_189": {
                "input": {
                    "value": "dim_mat_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_mat.type(torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_190": {
                "input": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "dim_mat / float(dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_191": {
                "input": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "(dim_mat - 1) / float(dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_182": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "synthesize.py": {
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_136": {
                "variable": {
                    "value": "batchs",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TextDataset(args.source, preprocess_config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_33": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset('train.txt', preprocess_config, train_config, sort=True, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size * group_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_57": {
                "variable": {
                    "value": "train_logger",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "train_log_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(train_config['path']['log_path'], 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "SummaryWriter_58": {
                "variable": {
                    "value": "val_logger",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "val_log_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(train_config['path']['log_path'], 'val')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__119": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "grad_clip_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_config['optimizer']['grad_clip_thresh']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_199": {
                "obj": {
                    "value": "{'model': model.state_dict(), 'optimizer': optimizer._optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(train_config['path']['ckpt_path'], '{}.pth.tar'.format(step))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_112": {
                "input": {
                    "value": "kl_divergence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/model.py": {
        "torch": {
            "load_20": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(train_config['path']['ckpt_path'], '{}.pth.tar'.format(args.restore_step))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_48": {
                "variable": {
                    "value": "vocoder",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "descriptinc/melgan-neurips",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "load_melgan",
                    "type": "str",
                    "possible_values": []
                },
                "pickle_module": {
                    "value": "linda_johnson",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_52": {
                "variable": {
                    "value": "vocoder",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "descriptinc/melgan-neurips",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "load_melgan",
                    "type": "str",
                    "possible_values": []
                },
                "pickle_module": {
                    "value": "multi_speaker",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_63": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "hifigan/generator_LJSpeech.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_65": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "hifigan/generator_universal.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/tools.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "arange_88": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(lengths).item()",
                            "Call"
                        ],
                        [
                            "max((len(x) for x in inputs))",
                            "Call"
                        ],
                        [
                            "max((np.shape(x)[0] for x in inputs))",
                            "Call"
                        ],
                        [
                            "mel_max_length",
                            "Name"
                        ],
                        [
                            "max([input_ele[i].size(0) for i in range(len(input_ele))])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_88": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_345": {
                "variable": {
                    "value": "out_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "speakers",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "speakers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(speakers).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(speakers).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_33": {
                "variable": {
                    "value": "texts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "texts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(texts).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(texts).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "src_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "src_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(src_lens).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(src_lens).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "mels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mels).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "mel_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mel_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mel_lens).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "speakers",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "speakers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(speakers).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(speakers).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "texts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "texts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(texts).long().to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(texts).long().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "src_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "src_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(src_lens).to(device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(src_lens).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_86": {
                "variable": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_lens * preprocess_config['preprocessing']['audio']['frame_shift_sample']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_337": {
                "variable": {
                    "value": "one_batch_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, max_len - batch.size(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_239": {
                "ndarray": {
                    "value": "mel_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(predictions, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_341": {
                "variable": {
                    "value": "one_batch_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, max_len - batch.size(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "ndarray": {
                    "value": "mel_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[6][0, :mel_len].detach().transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "audio_processor._denormalize(mel_target.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "mel_target + ref_level_db",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_159": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "ndarray": {
                    "value": "mel_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions[0, :mel_len].detach().transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "audio_processor._denormalize(mel_prediction.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "mel_prediction + ref_level_db",
                            "BinOp"
                        ],
                        [
                            "np.transpose(predictions[i, :mel_len], [1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_167": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}