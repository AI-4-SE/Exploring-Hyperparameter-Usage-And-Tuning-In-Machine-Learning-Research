{
    "pytorch/train_model.py": {
        "sklearn": {
            "PCA_54": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "model.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_57": {
                "variable": {
                    "value": "latents",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pca.explained_variance_ratio_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "parse_arguments()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_like_78": {
                "variable": {
                    "value": "latent_log_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(pca.explained_variance_ratio_, dtype=torch.float, device=args['device'])",
                            "Call"
                        ],
                        [
                            "latents.repeat(n_points, 1)",
                            "Call"
                        ],
                        [
                            "model.init_latents(n_points, args['device'], param_init)",
                            "Call"
                        ],
                        [
                            "torch.tensor(np.random.normal(train_means, train_std, size=(n_points, model.latent_size)), device=args['device'])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "args['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "parse_arguments()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_97": {
                "variable": {
                    "value": "net_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "net_optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_99": {
                "variable": {
                    "value": "latent_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "latent_optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(latent_params, lr=latent_lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(latent_params, lr=latent_lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_526": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_folder, 'model.h5')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_folder, 'model.h5')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_folder, 'model.h5')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_582": {
                "variable": {
                    "value": "args[device]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_584": {
                "variable": {
                    "value": "args[device]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_66": {
                "variable": {
                    "value": "train_means",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['train_latents']",
                            "Subscript"
                        ],
                        [
                            "(latents, latent_log_var)",
                            "Tuple"
                        ],
                        [
                            "latents",
                            "variable"
                        ],
                        [
                            "results['train_latents']",
                            "Subscript"
                        ],
                        [
                            "optimize_network(args, model, train_y, train_mask, 'train', debug=args['debug'])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_67": {
                "variable": {
                    "value": "train_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['train_latents']",
                            "Subscript"
                        ],
                        [
                            "(latents, latent_log_var)",
                            "Tuple"
                        ],
                        [
                            "latents",
                            "variable"
                        ],
                        [
                            "results['train_latents']",
                            "Subscript"
                        ],
                        [
                            "optimize_network(args, model, train_y, train_mask, 'train', debug=args['debug'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "latents",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.normal(train_means, train_std, size=(n_points, model.latent_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "args['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "parse_arguments()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "net_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['net_lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "latent_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "latent_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[latents]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "latent_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['latent_param_lr']",
                            "Subscript"
                        ],
                        [
                            "args['test_latent_param_lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_94": {
                "variable": {
                    "value": "net_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['net_lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_95": {
                "variable": {
                    "value": "latent_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "latent_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[latents]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "latent_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['latent_param_lr']",
                            "Subscript"
                        ],
                        [
                            "args['test_latent_param_lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_113": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(latent_params, lr=latent_lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(latent_params, lr=latent_lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "all_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_pred, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_322": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_folder, 'model.h5')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_folder, 'model.h5')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_folder, 'model.h5')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_415": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_folder, 'model.h5')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_folder, 'model.h5')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_folder, 'model.h5')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_428": {
                "variable": {
                    "value": "missing_data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "missing_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_missing_sfm(test_y_true.cpu(), noise)",
                            "Call"
                        ],
                        [
                            "make_missing(test_y_true.cpu(), noise)",
                            "Call"
                        ],
                        [
                            "torch.tensor(missing_data, dtype=torch.float, device=args['device'])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "parse_arguments()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_429": {
                "variable": {
                    "value": "missing_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "missing_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_missing_sfm(test_y_true.cpu(), noise)",
                            "Call"
                        ],
                        [
                            "make_missing(test_y_true.cpu(), noise)",
                            "Call"
                        ],
                        [
                            "torch.tensor(missing_mask, dtype=torch.float, device=args['device'])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ],
                        [
                            "parse_arguments()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "latent_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[latents]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "latent_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['latent_param_lr']",
                            "Subscript"
                        ],
                        [
                            "args['test_latent_param_lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_112": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "latent_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[latents]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "latent_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['latent_param_lr']",
                            "Subscript"
                        ],
                        [
                            "args['test_latent_param_lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_247": {
                "input": {
                    "value": "(all_pred - clean_y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_like_158": {
                "variable": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latents[idxes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "args['log_var']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_243": {
                "input": {
                    "value": "all_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_pred, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_159": {
                "input": {
                    "value": "torch.exp(z_var) + latents[idxes] ** 2 - 1.0 - z_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_163": {
                "input": {
                    "value": "torch.exp(latent_log_var[idxes]) + latents[idxes] ** 2 - 1.0 - latent_log_var[idxes]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_159": {
                "input": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full_like(latents[idxes], args['log_var'])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_163": {
                "input": {
                    "value": "latent_log_var[idxes]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/utils.py": {
        "torch": {
            "tensor_61": {
                "data": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arr",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch/vad_model.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_68": {
                "variable": {
                    "value": "self.hiddens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.hiddens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "log_var_param",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(log_var)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_174": {
                "variable": {
                    "value": "log_var_param",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(log_var)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_210": {
                "variable": {
                    "value": "additional",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size()[:-1] + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, additional]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_213": {
                "variable": {
                    "value": "transformed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x, additional], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "transform_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform_layer(x).view(-1, 4, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNorm_18": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_points",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_124": {
                "mean": {
                    "value": "torch.zeros_like(latents)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_194": {
                "mean": {
                    "value": "torch.zeros_like(latents)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latents",
                            "variable"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "latents + torch.normal(torch.zeros_like(latents), std=self.std)",
                            "BinOp"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "latents + torch.randn_like(latents) * torch.exp(0.5 * latent_log_var)",
                            "BinOp"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "latents + torch.normal(torch.zeros_like(latents), std=self.std)",
                            "BinOp"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 84, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "data": {
                    "value": "np.random.normal(0, stdev, size=(n_points, self.latent_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_109": {
                "data": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_124": {
                "input": {
                    "value": "latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latents",
                            "Method Argument"
                        ],
                        [
                            "latents",
                            "Method Argument"
                        ],
                        [
                            "latents",
                            "Method Argument"
                        ],
                        [
                            "latents",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_131": {
                "input": {
                    "value": "self.log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_153": {
                "input": {
                    "value": "latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latents",
                            "Method Argument"
                        ],
                        [
                            "latents",
                            "Method Argument"
                        ],
                        [
                            "latents",
                            "Method Argument"
                        ],
                        [
                            "latents",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_153": {
                "input": {
                    "value": "0.5 * latent_log_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_158": {
                "input": {
                    "value": "self.log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_194": {
                "input": {
                    "value": "latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latents",
                            "Method Argument"
                        ],
                        [
                            "latents",
                            "Method Argument"
                        ],
                        [
                            "latents",
                            "Method Argument"
                        ],
                        [
                            "latents",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_203": {
                "input": {
                    "value": "self.log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}