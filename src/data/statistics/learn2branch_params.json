{
    "03_train_competitor.py": {
        "sklearn": {
            "ExtraTreesRegressor_152": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.RandomState(args.seed)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "03_train_gcnn.py": {
        "tensorflow": {
            "ConfigProto_182": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_242": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lambda : lr",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "py_func_22": {
                "func": {
                    "value": "load_batch_gcnn",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.int32, tf.float32, tf.float32, tf.int32, tf.int32, tf.int32, tf.int32, tf.int32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_88": {
                "variable": {
                    "value": "true_bestscore",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "true_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.pad_output(tf.reshape(cand_scores, (1, -1)), n_cands)",
                            "Call"
                        ],
                        [
                            "true_scores.numpy()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "enable_eager_execution_184": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "executing_eagerly_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_188": {
                "seed": {
                    "value": "rng.randint(np.iinfo(int).max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Mean_246": {
                "variable": {
                    "value": "epoch_loss_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Accuracy_247": {
                "variable": {
                    "value": "epoch_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_83": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(tf.squeeze(logits, 0), cands)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_85": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "best_cands",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batched_states, tf.convert_to_tensor(False))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.gather(tf.squeeze(logits, 0), cands), 0)",
                            "Call"
                        ],
                        [
                            "model.pad_output(logits, n_cands.numpy())",
                            "Call"
                        ],
                        [
                            "model(batched_states, tf.convert_to_tensor(True))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.gather(tf.squeeze(logits, 0), cands), 0)",
                            "Call"
                        ],
                        [
                            "model.pad_output(logits, n_cands.numpy())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_70": {
                "input_tensor": {
                    "value": "n_vs",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_76": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(tf.squeeze(logits, 0), cands)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_78": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "best_cands",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batched_states, tf.convert_to_tensor(False))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.gather(tf.squeeze(logits, 0), cands), 0)",
                            "Call"
                        ],
                        [
                            "model.pad_output(logits, n_cands.numpy())",
                            "Call"
                        ],
                        [
                            "model(batched_states, tf.convert_to_tensor(True))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.gather(tf.squeeze(logits, 0), cands), 0)",
                            "Call"
                        ],
                        [
                            "model.pad_output(logits, n_cands.numpy())",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_87": {
                "tensor": {
                    "value": "cand_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "GradientTape_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_82": {
                "value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_83": {
                "params": {
                    "value": "tf.squeeze(logits, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "cands",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_49": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_75": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_76": {
                "params": {
                    "value": "tf.squeeze(logits, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "cands",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_83": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batched_states, tf.convert_to_tensor(False))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.gather(tf.squeeze(logits, 0), cands), 0)",
                            "Call"
                        ],
                        [
                            "model.pad_output(logits, n_cands.numpy())",
                            "Call"
                        ],
                        [
                            "model(batched_states, tf.convert_to_tensor(True))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.gather(tf.squeeze(logits, 0), cands), 0)",
                            "Call"
                        ],
                        [
                            "model.pad_output(logits, n_cands.numpy())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_76": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batched_states, tf.convert_to_tensor(False))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.gather(tf.squeeze(logits, 0), cands), 0)",
                            "Call"
                        ],
                        [
                            "model.pad_output(logits, n_cands.numpy())",
                            "Call"
                        ],
                        [
                            "model(batched_states, tf.convert_to_tensor(True))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.gather(tf.squeeze(logits, 0), cands), 0)",
                            "Call"
                        ],
                        [
                            "model.pad_output(logits, n_cands.numpy())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_94": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batched_states, tf.convert_to_tensor(False))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.gather(tf.squeeze(logits, 0), cands), 0)",
                            "Call"
                        ],
                        [
                            "model.pad_output(logits, n_cands.numpy())",
                            "Call"
                        ],
                        [
                            "model(batched_states, tf.convert_to_tensor(True))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.gather(tf.squeeze(logits, 0), cands), 0)",
                            "Call"
                        ],
                        [
                            "model.pad_output(logits, n_cands.numpy())",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "04_test.py": {
        "tensorflow": {
            "reduce_max_45": {
                "variable": {
                    "value": "n_vars_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n_vars_per_sample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_47": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(value=output, num_or_size_splits=n_vars_per_sample, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.pad(x, paddings=[[0, 0], [0, n_vars_max - tf.shape(x)[1]]], mode='CONSTANT', constant_values=fill) for x in output], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "n_vars_per_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_52": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.pad(x, paddings=[[0, 0], [0, n_vars_max - tf.shape(x)[1]]], mode='CONSTANT', constant_values=fill) for x in output]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_163": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_max_96": {
                "variable": {
                    "value": "true_bestscore",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "true_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding(tf.reshape(cand_scores, (1, -1)), n_cands)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "enable_eager_execution_165": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "executing_eagerly_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_76": {
                "variable": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(tf.squeeze(pred_scores, 0), cands)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_53": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [0, n_vars_max - tf.shape(x)[1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "fill",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100000000.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_91": {
                "variable": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pred_scores.reshape((1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "cand_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "convert_to_tensor_73": {
                "value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_76": {
                "params": {
                    "value": "tf.squeeze(pred_scores, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "cands",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_random_seed_189": {
                "seed": {
                    "value": "rng.randint(np.iinfo(int).max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_73": {
                "input_tensor": {
                    "value": "n_vs",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_76": {
                "input": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy['model']((c, ei, ev, v, tf.reduce_sum(n_cs, keepdims=True), tf.reduce_sum(n_vs, keepdims=True)), tf.convert_to_tensor(False))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.gather(tf.squeeze(pred_scores, 0), cands), 0)",
                            "Call"
                        ],
                        [
                            "padding(pred_scores, n_cands)",
                            "Call"
                        ],
                        [
                            "policy['model'].predict(cand_feats)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(pred_scores.reshape((1, -1)), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_102": {
                "input": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "policy['model']((c, ei, ev, v, tf.reduce_sum(n_cs, keepdims=True), tf.reduce_sum(n_vs, keepdims=True)), tf.convert_to_tensor(False))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.gather(tf.squeeze(pred_scores, 0), cands), 0)",
                            "Call"
                        ],
                        [
                            "padding(pred_scores, n_cands)",
                            "Call"
                        ],
                        [
                            "policy['model'].predict(cand_feats)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(pred_scores.reshape((1, -1)), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k",
                            "variable"
                        ]
                    ]
                }
            },
            "py_func_231": {
                "func": {
                    "value": "policy['batch_fun']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "policy['batch_datatypes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_55": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "05_evaluate.py": {
        "tensorflow": {
            "ConfigProto_212": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_eager_execution_214": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "executing_eagerly_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_273": {
                "seed": {
                    "value": "policy['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_79": {
                "value": {
                    "value": "c['values']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_80": {
                "value": {
                    "value": "e['indices']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_81": {
                "value": {
                    "value": "e['values']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_82": {
                "value": {
                    "value": "v['values']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_83": {
                "value": {
                    "value": "[c['values'].shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_84": {
                "value": {
                    "value": "[v['values'].shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_87": {
                "value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/baseline/model.py": {
        "tensorflow": {
            "reshape_83": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input + self.shift",
                            "BinOp"
                        ],
                        [
                            "input * self.scale",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, [-1, self.n_units])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_84": {
                "variable": {
                    "value": "sample_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input + self.shift",
                            "BinOp"
                        ],
                        [
                            "input * self.scale",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, [-1, self.n_units])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_85": {
                "variable": {
                    "value": "sample_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(input - sample_avg) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_86": {
                "variable": {
                    "value": "sample_count",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(input=input) / self.n_units",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.feature_module_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[K.layers.Dense(units=self.emb_size, activation=None, use_bias=True, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.feature_module_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[K.layers.Dense(units=self.emb_size, activation=None, use_bias=False, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.feature_module_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[K.layers.Dense(units=self.emb_size, activation=None, use_bias=False, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "self.feature_module_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[PreNormLayer(1, shift=False), K.layers.Activation(self.activation), K.layers.Dense(units=self.emb_size, activation=None, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.post_conv_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[PreNormLayer(1, shift=False)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.output_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[K.layers.Dense(units=self.emb_size, activation=None, kernel_initializer=self.initializer), K.layers.Activation(self.activation), K.layers.Dense(units=self.emb_size, activation=None, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_nd_210": {
                "variable": {
                    "value": "conv_output",
                    "type": "variable",
                    "possible_values": []
                },
                "updates": {
                    "value": "joint_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature_module_final(tf.gather(self.feature_module_left(left_features), axis=0, indices=edge_indices[0]) + self.feature_module_edge(edge_features) + tf.gather(self.feature_module_right(right_features), axis=0, indices=edge_indices[1]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.expand_dims(edge_indices[scatter_dim], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[scatter_out_size, self.emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Orthogonal_292": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_295": {
                "variable": {
                    "value": "self.cons_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[PreNormLayer(n_units=self.cons_nfeats), K.layers.Dense(units=self.emb_size, activation=self.activation, kernel_initializer=self.initializer), K.layers.Dense(units=self.emb_size, activation=self.activation, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_302": {
                "variable": {
                    "value": "self.edge_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[PreNormLayer(self.edge_nfeats)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_307": {
                "variable": {
                    "value": "self.var_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[PreNormLayer(n_units=self.var_nfeats), K.layers.Dense(units=self.emb_size, activation=self.activation, kernel_initializer=self.initializer), K.layers.Dense(units=self.emb_size, activation=self.activation, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_318": {
                "variable": {
                    "value": "self.output_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[K.layers.Dense(units=self.emb_size, activation=self.activation, kernel_initializer=self.initializer), K.layers.Dense(units=1, activation=None, kernel_initializer=self.initializer, use_bias=False)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_364": {
                "variable": {
                    "value": "n_vars_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n_vars_per_sample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_366": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_module(tf.concat([conv_output, prev_features], axis=1))",
                            "Call"
                        ],
                        [
                            "tf.split(value=output, num_or_size_splits=n_vars_per_sample, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.pad(x, paddings=[[0, 0], [0, n_vars_max - tf.shape(x)[1]]], mode='CONSTANT', constant_values=pad_value) for x in output], axis=0)",
                            "Call"
                        ],
                        [
                            "self.output_module(variable_features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [1, -1])",
                            "Call"
                        ],
                        [
                            "self.pad_output(output, n_vars_per_sample)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "n_vars_per_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_371": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.pad(x, paddings=[[0, 0], [0, n_vars_max - tf.shape(x)[1]]], mode='CONSTANT', constant_values=pad_value) for x in output]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_414": {
                "variable": {
                    "value": "n_cons_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n_cons_per_sample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_415": {
                "variable": {
                    "value": "n_vars_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n_vars_per_sample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_433": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_module(tf.concat([conv_output, prev_features], axis=1))",
                            "Call"
                        ],
                        [
                            "tf.split(value=output, num_or_size_splits=n_vars_per_sample, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.pad(x, paddings=[[0, 0], [0, n_vars_max - tf.shape(x)[1]]], mode='CONSTANT', constant_values=pad_value) for x in output], axis=0)",
                            "Call"
                        ],
                        [
                            "self.output_module(variable_features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [1, -1])",
                            "Call"
                        ],
                        [
                            "self.pad_output(output, n_vars_per_sample)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_106": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(self.var, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(self.var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_218": {
                "values": {
                    "value": "[conv_output, prev_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorSpec_346": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "size_86": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input + self.shift",
                            "BinOp"
                        ],
                        [
                            "input * self.scale",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, [-1, self.n_units])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_106": {
                "x": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_106": {
                "input": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_128": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_131": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_134": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Activation_138": {
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_139": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_148": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Activation_149": {
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_150": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_203": {
                "params": {
                    "value": "self.feature_module_right(right_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_indices[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_212": {
                "input": {
                    "value": "edge_indices[scatter_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_297": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_298": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_309": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_310": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_319": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_320": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorSpec_339": {
                "shape": {
                    "value": "[None, self.cons_nfeats]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_340": {
                "shape": {
                    "value": "[2, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_341": {
                "shape": {
                    "value": "[None, self.edge_nfeats]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_342": {
                "shape": {
                    "value": "[None, self.var_nfeats]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_343": {
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_344": {
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_372": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [0, n_vars_max - tf.shape(x)[1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "pad_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100000000.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_26": {
                "value": {
                    "value": "np.zeros((n_units,))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_37": {
                "value": {
                    "value": "np.ones((n_units,))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_197": {
                "params": {
                    "value": "self.feature_module_left(left_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_indices[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_374": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/mean_convolution/model.py": {
        "tensorflow": {
            "reshape_83": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input + self.shift",
                            "BinOp"
                        ],
                        [
                            "input * self.scale",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, [-1, self.n_units])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_84": {
                "variable": {
                    "value": "sample_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input + self.shift",
                            "BinOp"
                        ],
                        [
                            "input * self.scale",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, [-1, self.n_units])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_85": {
                "variable": {
                    "value": "sample_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(input - sample_avg) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_86": {
                "variable": {
                    "value": "sample_count",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(input=input) / self.n_units",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.feature_module_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[K.layers.Dense(units=self.emb_size, activation=None, use_bias=True, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.feature_module_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[K.layers.Dense(units=self.emb_size, activation=None, use_bias=False, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.feature_module_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[K.layers.Dense(units=self.emb_size, activation=None, use_bias=False, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "self.feature_module_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[PreNormLayer(1, shift=False), K.layers.Activation(self.activation), K.layers.Dense(units=self.emb_size, activation=None, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.output_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[K.layers.Dense(units=self.emb_size, activation=None, kernel_initializer=self.initializer), K.layers.Activation(self.activation), K.layers.Dense(units=self.emb_size, activation=None, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_nd_200": {
                "variable": {
                    "value": "conv_output",
                    "type": "variable",
                    "possible_values": []
                },
                "updates": {
                    "value": "joint_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature_module_final(tf.gather(self.feature_module_left(left_features), axis=0, indices=edge_indices[0]) + self.feature_module_edge(edge_features) + tf.gather(self.feature_module_right(right_features), axis=0, indices=edge_indices[1]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.expand_dims(edge_indices[scatter_dim], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[scatter_out_size, self.emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_nd_207": {
                "variable": {
                    "value": "neighbour_count",
                    "type": "variable",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.ones(shape=[tf.shape(edge_indices)[1], 1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.expand_dims(edge_indices[scatter_dim], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[scatter_out_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_211": {
                "variable": {
                    "value": "neighbour_count",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(neighbour_count, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(neighbour_count)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "neighbour_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scatter_nd(updates=tf.ones(shape=[tf.shape(edge_indices)[1], 1], dtype=tf.float32), indices=tf.expand_dims(edge_indices[scatter_dim], axis=1), shape=[scatter_out_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(neighbour_count, 0), tf.ones_like(neighbour_count), neighbour_count)",
                            "Call"
                        ]
                    ]
                }
            },
            "Orthogonal_292": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_295": {
                "variable": {
                    "value": "self.cons_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[PreNormLayer(n_units=self.cons_nfeats), K.layers.Dense(units=self.emb_size, activation=self.activation, kernel_initializer=self.initializer), K.layers.Dense(units=self.emb_size, activation=self.activation, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_302": {
                "variable": {
                    "value": "self.edge_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[PreNormLayer(self.edge_nfeats)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_307": {
                "variable": {
                    "value": "self.var_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[PreNormLayer(n_units=self.var_nfeats), K.layers.Dense(units=self.emb_size, activation=self.activation, kernel_initializer=self.initializer), K.layers.Dense(units=self.emb_size, activation=self.activation, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_318": {
                "variable": {
                    "value": "self.output_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[K.layers.Dense(units=self.emb_size, activation=self.activation, kernel_initializer=self.initializer), K.layers.Dense(units=1, activation=None, kernel_initializer=self.initializer, use_bias=False)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_364": {
                "variable": {
                    "value": "n_vars_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n_vars_per_sample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_366": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_module(tf.concat([conv_output, prev_features], axis=1))",
                            "Call"
                        ],
                        [
                            "tf.split(value=output, num_or_size_splits=n_vars_per_sample, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.pad(x, paddings=[[0, 0], [0, n_vars_max - tf.shape(x)[1]]], mode='CONSTANT', constant_values=pad_value) for x in output], axis=0)",
                            "Call"
                        ],
                        [
                            "self.output_module(variable_features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [1, -1])",
                            "Call"
                        ],
                        [
                            "self.pad_output(output, n_vars_per_sample)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "n_vars_per_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_371": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.pad(x, paddings=[[0, 0], [0, n_vars_max - tf.shape(x)[1]]], mode='CONSTANT', constant_values=pad_value) for x in output]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_418": {
                "variable": {
                    "value": "n_cons_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n_cons_per_sample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_419": {
                "variable": {
                    "value": "n_vars_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n_vars_per_sample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_437": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_module(tf.concat([conv_output, prev_features], axis=1))",
                            "Call"
                        ],
                        [
                            "tf.split(value=output, num_or_size_splits=n_vars_per_sample, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.pad(x, paddings=[[0, 0], [0, n_vars_max - tf.shape(x)[1]]], mode='CONSTANT', constant_values=pad_value) for x in output], axis=0)",
                            "Call"
                        ],
                        [
                            "self.output_module(variable_features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [1, -1])",
                            "Call"
                        ],
                        [
                            "self.pad_output(output, n_vars_per_sample)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_106": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(self.var, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(self.var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_212": {
                "x": {
                    "value": "neighbour_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scatter_nd(updates=tf.ones(shape=[tf.shape(edge_indices)[1], 1], dtype=tf.float32), indices=tf.expand_dims(edge_indices[scatter_dim], axis=1), shape=[scatter_out_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(neighbour_count, 0), tf.ones_like(neighbour_count), neighbour_count)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_213": {
                "input": {
                    "value": "neighbour_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scatter_nd(updates=tf.ones(shape=[tf.shape(edge_indices)[1], 1], dtype=tf.float32), indices=tf.expand_dims(edge_indices[scatter_dim], axis=1), shape=[scatter_out_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(neighbour_count, 0), tf.ones_like(neighbour_count), neighbour_count)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_218": {
                "values": {
                    "value": "[conv_output, prev_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorSpec_346": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "size_86": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input + self.shift",
                            "BinOp"
                        ],
                        [
                            "input * self.scale",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, [-1, self.n_units])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_106": {
                "x": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_106": {
                "input": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_128": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_131": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_134": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Activation_138": {
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_139": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_144": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Activation_145": {
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_146": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_193": {
                "params": {
                    "value": "self.feature_module_right(right_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_indices[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_202": {
                "input": {
                    "value": "edge_indices[scatter_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_208": {
                "shape": {
                    "value": "[tf.shape(edge_indices)[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_209": {
                "input": {
                    "value": "edge_indices[scatter_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_297": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_298": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_309": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_310": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_319": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_320": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorSpec_339": {
                "shape": {
                    "value": "[None, self.cons_nfeats]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_340": {
                "shape": {
                    "value": "[2, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_341": {
                "shape": {
                    "value": "[None, self.edge_nfeats]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_342": {
                "shape": {
                    "value": "[None, self.var_nfeats]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_343": {
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_344": {
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_372": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [0, n_vars_max - tf.shape(x)[1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "pad_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100000000.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_26": {
                "value": {
                    "value": "np.zeros((n_units,))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_37": {
                "value": {
                    "value": "np.ones((n_units,))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_187": {
                "params": {
                    "value": "self.feature_module_left(left_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_indices[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_208": {
                "input": {
                    "value": "edge_indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_374": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/no_prenorm/model.py": {
        "tensorflow": {
            "reshape_83": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input + self.shift",
                            "BinOp"
                        ],
                        [
                            "input * self.scale",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, [-1, self.n_units])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_84": {
                "variable": {
                    "value": "sample_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input + self.shift",
                            "BinOp"
                        ],
                        [
                            "input * self.scale",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, [-1, self.n_units])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_85": {
                "variable": {
                    "value": "sample_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(input - sample_avg) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_86": {
                "variable": {
                    "value": "sample_count",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.size(input=input) / self.n_units",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.feature_module_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[K.layers.Dense(units=self.emb_size, activation=None, use_bias=True, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.feature_module_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[K.layers.Dense(units=self.emb_size, activation=None, use_bias=False, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.feature_module_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[K.layers.Dense(units=self.emb_size, activation=None, use_bias=False, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "self.feature_module_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[PreNormLayer(1, shift=False), K.layers.Activation(self.activation), K.layers.Dense(units=self.emb_size, activation=None, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.output_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[K.layers.Dense(units=self.emb_size, activation=None, kernel_initializer=self.initializer), K.layers.Activation(self.activation), K.layers.Dense(units=self.emb_size, activation=None, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_nd_200": {
                "variable": {
                    "value": "conv_output",
                    "type": "variable",
                    "possible_values": []
                },
                "updates": {
                    "value": "joint_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feature_module_final(tf.gather(self.feature_module_left(left_features), axis=0, indices=edge_indices[0]) + self.feature_module_edge(edge_features) + tf.gather(self.feature_module_right(right_features), axis=0, indices=edge_indices[1]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.expand_dims(edge_indices[scatter_dim], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[scatter_out_size, self.emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Orthogonal_281": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_284": {
                "variable": {
                    "value": "self.cons_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[PreNormLayer(n_units=self.cons_nfeats), K.layers.Dense(units=self.emb_size, activation=self.activation, kernel_initializer=self.initializer), K.layers.Dense(units=self.emb_size, activation=self.activation, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_291": {
                "variable": {
                    "value": "self.edge_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[PreNormLayer(self.edge_nfeats)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_296": {
                "variable": {
                    "value": "self.var_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[PreNormLayer(n_units=self.var_nfeats), K.layers.Dense(units=self.emb_size, activation=self.activation, kernel_initializer=self.initializer), K.layers.Dense(units=self.emb_size, activation=self.activation, kernel_initializer=self.initializer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_307": {
                "variable": {
                    "value": "self.output_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[K.layers.Dense(units=self.emb_size, activation=self.activation, kernel_initializer=self.initializer), K.layers.Dense(units=1, activation=None, kernel_initializer=self.initializer, use_bias=False)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_354": {
                "variable": {
                    "value": "n_vars_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n_vars_per_sample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_356": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_module(tf.concat([conv_output, prev_features], axis=1))",
                            "Call"
                        ],
                        [
                            "tf.split(value=output, num_or_size_splits=n_vars_per_sample, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.pad(x, paddings=[[0, 0], [0, n_vars_max - tf.shape(x)[1]]], mode='CONSTANT', constant_values=pad_value) for x in output], axis=0)",
                            "Call"
                        ],
                        [
                            "self.output_module(variable_features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [1, -1])",
                            "Call"
                        ],
                        [
                            "self.pad_output(output, n_vars_per_sample)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "n_vars_per_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_361": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.pad(x, paddings=[[0, 0], [0, n_vars_max - tf.shape(x)[1]]], mode='CONSTANT', constant_values=pad_value) for x in output]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_408": {
                "variable": {
                    "value": "n_cons_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n_cons_per_sample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_409": {
                "variable": {
                    "value": "n_vars_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n_vars_per_sample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_427": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_module(tf.concat([conv_output, prev_features], axis=1))",
                            "Call"
                        ],
                        [
                            "tf.split(value=output, num_or_size_splits=n_vars_per_sample, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.pad(x, paddings=[[0, 0], [0, n_vars_max - tf.shape(x)[1]]], mode='CONSTANT', constant_values=pad_value) for x in output], axis=0)",
                            "Call"
                        ],
                        [
                            "self.output_module(variable_features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [1, -1])",
                            "Call"
                        ],
                        [
                            "self.pad_output(output, n_vars_per_sample)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_106": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(self.var, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(self.var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_207": {
                "values": {
                    "value": "[conv_output, prev_features]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorSpec_336": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "size_86": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input + self.shift",
                            "BinOp"
                        ],
                        [
                            "input * self.scale",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, [-1, self.n_units])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_106": {
                "x": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_106": {
                "input": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_128": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_131": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_134": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Activation_138": {
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_139": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_144": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Activation_145": {
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_146": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_193": {
                "params": {
                    "value": "self.feature_module_right(right_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_indices[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_202": {
                "input": {
                    "value": "edge_indices[scatter_dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_286": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_287": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_298": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_299": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_308": {
                "units": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_309": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorSpec_329": {
                "shape": {
                    "value": "[None, self.cons_nfeats]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_330": {
                "shape": {
                    "value": "[2, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_331": {
                "shape": {
                    "value": "[None, self.edge_nfeats]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_332": {
                "shape": {
                    "value": "[None, self.var_nfeats]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_333": {
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_334": {
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_362": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [0, n_vars_max - tf.shape(x)[1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "pad_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100000000.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_26": {
                "value": {
                    "value": "np.zeros((n_units,))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_37": {
                "value": {
                    "value": "np.ones((n_units,))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_187": {
                "params": {
                    "value": "self.feature_module_left(left_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_indices[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_364": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utilities_tf.py": {
        "tensorflow": {
            "convert_to_tensor_61": {
                "variable": {
                    "value": "c_features",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "c_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(c_features, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(c_features, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_62": {
                "variable": {
                    "value": "e_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "e_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate([e_ind + cv_shift[:, j:j + 1] for (j, e_ind) in enumerate(e_indices)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(e_indices, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_63": {
                "variable": {
                    "value": "e_features",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "e_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(e_features, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(e_features, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_64": {
                "variable": {
                    "value": "v_features",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(v_features, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(v_features, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_65": {
                "variable": {
                    "value": "n_cs_per_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "n_cs_per_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[c.shape[0] for c in c_features]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(n_cs_per_sample, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_66": {
                "variable": {
                    "value": "n_vs_per_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "n_vs_per_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v.shape[0] for v in v_features]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(n_vs_per_sample, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_67": {
                "variable": {
                    "value": "candss",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "candss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate([cands + shift for (cands, shift) in zip(candss, cv_shift[1])])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(candss, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_68": {
                "variable": {
                    "value": "cand_choices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cand_choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(cand_choices)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(cand_choices, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_69": {
                "variable": {
                    "value": "cand_scoress",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cand_scoress",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(cand_scoress, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(cand_scoress, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_70": {
                "variable": {
                    "value": "n_cands_per_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "n_cands_per_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cds.shape[0] for cds in candss]",
                            "ListComp"
                        ],
                        [
                            "tf.convert_to_tensor(n_cands_per_sample, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}